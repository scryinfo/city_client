---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by cyz_scry.
--- DateTime: 2019/1/2 10:12
---
UnitTest.TestBlockStart()-------------------------------------------------------

local testcount = 2
local ResPathList = {}  --Resource path

for i = 1, testcount do
    ResPathList[i] = 'Assets/CityGame/Resources/testPng/C'..i..'.png'
end

UnitTest.Exec("abel_w19_New_AB_load", "abel_w19_New_AB_load",  function ()
    local listpath = {}
    listpath[1] = "Assets/CityGame/Resources/testPng/C1.png"
    listpath[2] = "Assets/CityGame/Resources/testPng/C2.png"
    listpath[3] = "Assets/CityGame/Resources/View/RetailShelfPanel.prefab"
    local cb = function(ins,bundleinfo)
        local pkginfo = bundleinfo
        local assert = bundleinfo.mainObject
        local bundle = bundleinfo.bundle
        local xx = 0
    end
    panelMgr:LoadPrefab_A(listpath[3], ct.getType(UnityEngine.Sprite), nil,cb) --Sprite loading icon
    panelMgr:LoadPrefab_A(listpath[2], ct.getType(UnityEngine.Texture), nil,cb) --Texture loading icon
    panelMgr:LoadPrefab_A(listpath[1], nil, nil,cb) --Load prefab
end)

-- Asynchronously load 1000 256 icons time test
UnitTest.Exec("abel_w19_New_AB_Solution", "abel_w19_New_AB_Solution", function ()
    -- Test of size 160
    local aTester = AsyncSequenceTester:new()
    AsyncSequenceTester.recordTester(aTester)
    -- Initialize test data
    aTester.testcount = 1000
    aTester.loadCount = 0
    aTester.bundlelist = {}
    aTester.assertlist = {}
    aTester.startTime = 0
    aTester.ResPathList = ResPathList
    aTester.curPos = 1
    aTester.testSquence = {}
    aTester.resetData = function()
        local tester = AsyncSequenceTester.Tester()
        tester.startTime = 0
        tester.loadCount = 1
    end
    -- Asynchronous load test with callback
    local testLoadFunA = function(tester)
        local testData = AsyncSequenceTester.Tester()
        local curSeq = testData:getCurSeq()
        --ct.log('abel_w19_New_AB_Solution','testData' ..tostring(testData))
        local testData = AsyncSequenceTester.Tester()
        --ct.log('abel_w19_New_AB_Solution','testData = AsyncSequenceTester.Tester()' ..tostring(testData))
        local curSeq = testData:getCurSeq()
        --ct.log('abel_w19_New_AB_Solution','curSeq' ..tostring(curSeq))
        for i = 1, testData.testcount do
            panelMgr:LoadPrefab_A(testData.ResPathList[i], curSeq.type, testData,curSeq.cb)
        end
    end

    --Callback after successful loading
    local callback = function (testData, obj , ab)
        local testData = AsyncSequenceTester.Tester()
        local curSeq = testData:getCurSeq()
        testData.assertlist[#testData.assertlist] = obj
        --testData.assertlist[#testData.assertlist] = obj:useby(testData)
        --testData.bundlelist[#testData.bundlelist +1] = obj.bundle
        testData.loadCount = testData.loadCount + 1
        if testData.loadCount >= testData.testcount then
            local costTime = os.clock() - testData.startTime
            curSeq.excutetime = costTime
            local nextDelay = testData:getCurSeq()._nextTestDelay
            --Uninstall
            --local pos = #testData.bundlelist
            --while pos > 0 do
            --    if testData.bundlelist[pos] ~= nil then
            --        resMgr:UnloadAssetBundle(testData.bundlelist[pos].name, true)
            --        --UnityEngine.AssetBundle.Unload(testData.bundlelist[pos],true)
            --        table.remove(testData.bundlelist, pos)
            --        pos = pos -1
            --    end
            --end
            local timer = FrameTimer.New(function()
                testData:Nextfun()
                collectgarbage("collect")
                testData:excute()
            end, nextDelay,0)
            timer:Start()
        end
    end
    local logfun = function()
        local testData = AsyncSequenceTester.Tester()
        testData:printExcuteTime()
    end
    aTester.testSquence[1] = { fun = testLoadFunA, type = nil, _nextTestDelay = 30, cb = callback, prefun = aTester.resetData, msg = '1000个256大小的 Texture 异步加载的时间 =', excutetime = 0}
    --aTester.testSquence[2] = { fun = testLoadFunA, type = ct.getType(UnityEngine.Sprite), _nextTestDelay = 30, prefun = aTester.resetData, cb = callback, msg = '1000个256大小的 Sprite 异步加载的时间 = ',excutetime = 0}
    aTester.testSquence[3] = { fun = logfun, type = nil, _nextTestDelay = 30, msg = '统计时间 = ',excutetime = 0}

    --Start executing asynchronous test sequence
    collectgarbage("collect")
    aTester:excute()
    --Test of size 128
    --[[
    Test Results
    pc
        [abel_w17_load_A_s160_n1000_time] Asynchronous loading time of 1000 textures of 160 size = 2.2260000000001
        [abel_w17_load_A_s160_n1000_time] The time for asynchronous loading of 1000 Sprites of 160 size = 2.3319999999999
        * The performance difference ratio is not large, the average can load 33.33/2.332 = 14.29 per frame
    equipment
        [abel_w17_load_A_s160_n1000_time] Asynchronous loading time of 1000 textures of 160 size = 6.757779
        [abel_w17_load_A_s160_n1000_time] The time for asynchronous loading of 1000 160-sized Sprites = 6.006067
        * Sprite on the device takes less time to load than Texture
            * This conclusion is consistent with the conclusion of synchronous loading?
        * On average, 33.33/6.006067 = 5.555 can be loaded per frame (texture 33.33/6.757779 = 4.932)
        * Compare synchronous loading
            [abel_w17_load_S_s160_n1000_time] The time for 1000 textures of 160 size to load synchronously = 2.265139
            [abel_w17_load_S_s160_n1000_time] The time for 1000 160 Sprites to load simultaneously = 4.293647
            * Sprite asynchronous loading takes about the same time as synchronous loading; texture synchronous loading time will be much less
            * The program will freeze during synchronous loading
    --]]
end)

UnitTest.TestBlockEnd()-----------------------------------------------------------