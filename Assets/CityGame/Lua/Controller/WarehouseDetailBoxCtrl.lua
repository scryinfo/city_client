---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Fisher.
--- DateTime: 2019/4/18 18:11
---从货架打开仓库（另外做一个Panel）
WarehouseDetailBoxCtrl = class("WarehouseDetailBoxCtrl",UIPanel)
UIPanel:ResgisterOpen(WarehouseDetailBoxCtrl)

local ToNumber = tonumber
local StringSun = string.sub
function WarehouseDetailBoxCtrl:initialize()
    UIPanel.initialize(self,UIType.PopUp,UIMode.DoNothing,UICollider.Normal)
end

function WarehouseDetailBoxCtrl:bundleName()
    return "Assets/CityGame/Resources/View/WarehouseDetailBoxPanel.prefab"
end

function WarehouseDetailBoxCtrl:OnCreate(obj)
    UIPanel.OnCreate(self,obj)
end

function WarehouseDetailBoxCtrl:Awake(go)
    self.gameObject = go
    self:_getComponent(go)
    self.luaBehaviour = self.gameObject:GetComponent('LuaBehaviour')
    self.luaBehaviour:AddClick(self.closeBtn.gameObject,self._clickCloseBtn,self)
end
function WarehouseDetailBoxCtrl:Active()
    UIPanel.Active(self)
    self:_language()
    Event.AddListener("addShelf",self.addShelf,self)
end
function WarehouseDetailBoxCtrl:Refresh()
    self:initializeUiInfoData()
end

function WarehouseDetailBoxCtrl:Hide()
    UIPanel.Hide(self)
    self:CloseDestroy()
    Event.RemoveListener("addShelf",self.addShelf,self)
end
-------------------------------------------------------------获取组件-------------------------------------------------------------------------------
function WarehouseDetailBoxCtrl:_getComponent(go)
    --topRoot
    self.closeBtn = go.transform:Find("topRoot/closeBtn")
    self.sortingBtn = go.transform:Find("topRoot/sortingBtn")
    --contentRoot
    self.noTip = go.transform:Find("contentRoot/noTip")
    self.tipText = go.transform:Find("contentRoot/noTip/tipText"):GetComponent("Text")
    self.Content = go.transform:Find("contentRoot/ScrollView/Viewport/Content")
    self.WarehouseItem = go.transform:Find("contentRoot/ScrollView/Viewport/Content/WarehouseItem").gameObject
end
-------------------------------------------------------------初始化---------------------------------------------------------------------------------
--初始化UI数据
function WarehouseDetailBoxCtrl:initializeUiInfoData()
    self.m_data.insId = self.m_data.info.insId
    if next(self.m_data.info.store) == nil then
        self.noTip.transform.localScale = Vector3.one
        return
    else
        if not self.goodsItemTable then
            self.goodsItemTable = {}
        end
        self.noTip.transform.localScale = Vector3.zero
        self.addShelfBool = GoodsItemStateType.addShelf
        self:CreateGoodsItems(self.m_data.info.store,self.WarehouseItem,self.Content,WarehouseItem,self.luaBehaviour,self.m_data.info.buildingType,self.addShelfBool,self.m_data.info.info.id)
    end
end
--设置多语言
function WarehouseDetailBoxCtrl:_language()
    self.tipText.text = GetLanguage(25020024)
end
-------------------------------------------------------------点击函数-------------------------------------------------------------------------------
--关闭
function WarehouseDetailBoxCtrl:_clickCloseBtn()
    PlayMusEff(1002)
    UIPanel.ClosePage()
end
-------------------------------------------------------------事件函数--------------------------------------------------------------------------------
--上架
function WarehouseDetailBoxCtrl:addShelf(dataInfo)
    if self.m_data.info.buildingType == BuildingType.MaterialFactory then
        --原料厂
        --检查货架是否是空的
        if not self.m_data.shelf.shelf.good then
            Event.Brocast("m_ReqMaterialShelfAdd",self.m_data.insId,dataInfo.itemId,dataInfo.number,dataInfo.price,dataInfo.producerId,dataInfo.qty,dataInfo.switch)
        else
            --如果货架不是空的，检查货架上是否有这个商品
            if self:ShelfWhetherHave(self.m_data.shelf.shelf.good,dataInfo.itemId) == true then
                --发送修改价格
                --Event.Brocast("m_ReqMaterialModifyShelf",self.m_data.insId,dataInfo.itemId,dataInfo.number,dataInfo.price,dataInfo.producerId,dataInfo.qty)
                --发送上架
                Event.Brocast("m_ReqMaterialShelfAdd",self.m_data.insId,dataInfo.itemId,dataInfo.number,dataInfo.price,dataInfo.producerId,dataInfo.qty,dataInfo.switch)
            else
                Event.Brocast("m_ReqMaterialShelfAdd",self.m_data.insId,dataInfo.itemId,dataInfo.number,dataInfo.price,dataInfo.producerId,dataInfo.qty,dataInfo.switch)
            end
        end
    elseif self.m_data.info.buildingType == BuildingType.ProcessingFactory then
        --加工厂
        --检查货架是否是空的
        if not self.m_data.shelf.shelf.good then
            Event.Brocast("m_ReqprocessingShelfAdd",self.m_data.insId,dataInfo.itemId,dataInfo.number,dataInfo.price,dataInfo.producerId,dataInfo.qty,dataInfo.switch)
        else
            --如果货架不是空的，检查货架上是否有这个商品
            if self:ShelfWhetherHave(self.m_data.shelf.shelf.good,dataInfo.itemId,dataInfo.producerId) == true then
                --发送修改价格
                --Event.Brocast("m_ReqprocessingModifyShelf",self.m_data.insId,dataInfo.itemId,dataInfo.number,dataInfo.price,dataInfo.producerId,dataInfo.qty)
                --发送上架
                Event.Brocast("m_ReqprocessingShelfAdd",self.m_data.insId,dataInfo.itemId,dataInfo.number,dataInfo.price,dataInfo.producerId,dataInfo.qty,dataInfo.switch)
            else
                Event.Brocast("m_ReqprocessingShelfAdd",self.m_data.insId,dataInfo.itemId,dataInfo.number,dataInfo.price,dataInfo.producerId,dataInfo.qty,dataInfo.switch)
            end
        end
    elseif self.m_data.info.buildingType == BuildingType.RetailShop then
        --零售店
        --检查货架是否是空的
        if not self.m_data.shelf.shelf.good then
            Event.Brocast("m_ReqRetailStoresShelfAdd",self.m_data.insId,dataInfo.itemId,dataInfo.number,dataInfo.price,dataInfo.producerId,dataInfo.qty,dataInfo.switch)
        else
            --如果货架不是空的，检查货架上是否有这个商品
            if self:ShelfWhetherHave(self.m_data.shelf.shelf.good,dataInfo.itemId) == true then
                --发送修改价格
                --Event.Brocast("m_ReqRetailStoresModifyShelf",self.m_data.insId,dataInfo.itemId,dataInfo.number,dataInfo.price,dataInfo.producerId,dataInfo.qty)
                --发送上架
                Event.Brocast("m_ReqRetailStoresShelfAdd",self.m_data.insId,dataInfo.itemId,dataInfo.number,dataInfo.price,dataInfo.producerId,dataInfo.qty,dataInfo.switch)
            else
                Event.Brocast("m_ReqRetailStoresShelfAdd",self.m_data.insId,dataInfo.itemId,dataInfo.number,dataInfo.price,dataInfo.producerId,dataInfo.qty,dataInfo.switch)
            end
        end
    elseif self.m_data.info.buildingType == BuildingType.TalentCenter then
        --集散中心
    end
end
-------------------------------------------------------------回调函数-------------------------------------------------------------------------------
--上架成功后刷新
function WarehouseDetailBoxCtrl:RefreshWarehouseData(dataInfo)
    for key,value in pairs(self.m_data.info.store.inHand) do
        if value.key.id == dataInfo.item.key.id then
            if value.n == dataInfo.item.n then
                table.remove(self.m_data.info.store.inHand,key)
            else
                value.n = value.n - dataInfo.item.n
            end
        end
    end
    if not self.m_data.info.store.locked or next(self.m_data.info.store.locked) == nil then
        if not self.m_data.info.store.locked then
            self.m_data.info.store.locked = {}
        end
        self.m_data.info.store.locked[#self.m_data.info.store.locked + 1] = ct.deepCopy(dataInfo.item)
    else
        self.m_data.info.store.locked[#self.m_data.info.store.locked + 1] = ct.deepCopy(dataInfo.item)
    end
    self:addShelfGood(dataInfo)
    self:CloseDestroy()
    self:initializeUiInfoData()
    self:_clickCloseBtn()
    UIPanel.ClosePage()
    Event.Brocast("changeStoreInfoData",dataInfo)
    Event.Brocast("SmallPop",GetLanguage(25060008), ReminderType.Succeed)
end
----------------------------------------------------------------------------------------------------------------------------------------------------
--上架前检查货架上是否有这个商品  返回true有   返回false没有
function WarehouseDetailBoxCtrl:ShelfWhetherHave(table,itemId,producerId)
    if table == nil then
        return true
    end
    for key,value in pairs(table) do
        if producerId == nil then
            if value.k.id == itemId then
                return true
            end
        else
            if value.k.id == itemId and value.k.producerId == producerId then
                return true
            end
        end
    end
    return false
end
--上架成功后更新数据
function WarehouseDetailBoxCtrl:addShelfGood(dataInfo)
    --如果shelf.good 是空的
    if not self.m_data.shelf.shelf.good or next(self.m_data.shelf.shelf.good) == nil then
        local goods = {}
        local k = {}
        goods.k = k
        goods.k.id = dataInfo.item.key.id
        goods.k.producerId = dataInfo.item.key.producerId
        goods.k.qualityScore = dataInfo.item.key.qualityScore
        goods.k.brandName = dataInfo.item.key.brandName
        goods.k.brandScore = dataInfo.item.key.brandScore
        goods.autoReplenish = dataInfo.autoRepOn
        goods.n = dataInfo.item.n
        goods.price = dataInfo.price
        if not self.m_data.shelf.shelf.good then
            self.m_data.shelf.shelf.good = {}
        end
        self.m_data.shelf.shelf.good[#self.m_data.shelf.shelf.good + 1] = goods
    else
        --架子上有没有这个商品
        for key,value in pairs(self.m_data.shelf.shelf.good) do
            --如果架子上有,直接修改数量和价格
            if value.k.id == dataInfo.item.key.id and value.k.producerId == dataInfo.item.key.producerId then
                value.n = value.n + dataInfo.item.n
                value.price = dataInfo.price
                Event.Brocast("refreshShelfDetailPart",self.m_data)
                return
            end
        end
        --如果没有这个商品
        local goods = {}
        local k = {}
        goods.k = k
        goods.k.id = dataInfo.item.key.id
        goods.k.producerId = dataInfo.item.key.producerId
        goods.k.brandName = dataInfo.item.key.brandName
        goods.k.brandScore = dataInfo.item.key.brandScore
        goods.k.qualityScore = dataInfo.item.key.qualityScore
        goods.autoReplenish = dataInfo.autoRepOn
        goods.n = dataInfo.item.n
        goods.price = dataInfo.price
        self.m_data.shelf.shelf.good[#self.m_data.shelf.shelf.good + 1] = goods
    end
    Event.Brocast("refreshShelfDetailPart",self.m_data)
end
--生成itemPrefab
function WarehouseDetailBoxCtrl:CreateGoodsItems(dataInfo,itemPrefab,itemRoot,className,behaviour,goodsType,...)
    if not dataInfo or next(dataInfo) == nil then
        return
    end
    if not dataInfo.inHand or next(dataInfo.inHand) == nil then
        return
    end
    local arg = {...}
    --筛选出有用的数据
    --如果是原料厂上架，筛选出原料；如果是加工厂上架，筛选出商品
    local temporaryDataInfo = {}
    local materialKey,goodsKey = 21,22
    if self.m_data.info.buildingType == BuildingType.MaterialFactory then
        for key,value in pairs(dataInfo.inHand) do
            if ToNumber(StringSun(value.key.id,1,2)) == materialKey then
                if not self.m_data.shelf.shelf.good or next(self.m_data.shelf.shelf.good) == nil then
                    table.insert(temporaryDataInfo,value)
                else
                    local bools = true
                    for k,v in pairs(self.m_data.shelf.shelf.good) do
                        if value.key.id == v.k.id then
                            bools = false
                        end
                    end
                    if bools then
                        table.insert(temporaryDataInfo,value)
                    end
                end
            end
        end
        if next(temporaryDataInfo) == nil then
            self.noTip.transform.localScale = Vector3.one
            self.tipText.text = GetLanguage(25020024)
        end
    elseif self.m_data.info.buildingType == BuildingType.ProcessingFactory then
        for key,value in pairs(dataInfo.inHand) do
            if ToNumber(StringSun(value.key.id,1,2)) == goodsKey then
                if not self.m_data.shelf.shelf.good or next(self.m_data.shelf.shelf.good) == nil then
                    table.insert(temporaryDataInfo,value)
                else
                    local bools = true
                    for k,v in pairs(self.m_data.shelf.shelf.good) do
                        if value.key.id == v.k.id and value.key.producerId == v.k.producerId then
                            bools = false
                            break
                        end
                    end
                    if bools == true then
                        table.insert(temporaryDataInfo,value)
                    end
                end
            end
        end
        if next(temporaryDataInfo) == nil then
            self.noTip.transform.localScale = Vector3.one
            self.tipText.text = GetLanguage(25020024)
        end
    elseif self.m_data.info.buildingType == BuildingType.RetailShop then
        for key,value in pairs(dataInfo.inHand) do
            if ToNumber(StringSun(value.key.id,1,2)) == goodsKey then
                if not self.m_data.shelf.shelf.good or next(self.m_data.shelf.shelf.good) == nil then
                    table.insert(temporaryDataInfo,value)
                else
                    local bools = true
                    for k,v in pairs(self.m_data.shelf.shelf.good) do
                        if value.key.id == v.k.id and value.key.producerId == v.k.producerId then
                            bools = false
                            break
                        end
                    end
                    if bools == true then
                        table.insert(temporaryDataInfo,value)
                    end
                end
            end
        end
        if next(temporaryDataInfo) == nil then
            self.noTip.transform.localScale = Vector3.one
            self.tipText.text = GetLanguage(25020024)
        end
    end
    for key,value in pairs(temporaryDataInfo) do
        local obj = self:loadingItemPrefab(itemPrefab,itemRoot)
        local itemGoodsIns = className:new(value,obj,behaviour,key,goodsType,arg)
        table.insert(self.goodsItemTable,itemGoodsIns)
    end
end
--加载实例化Prefab
function WarehouseDetailBoxCtrl:loadingItemPrefab(itemPrefab,itemRoot)
    local obj = UnityEngine.GameObject.Instantiate(itemPrefab)
    local objRect = obj.transform:GetComponent("RectTransform");
    obj.transform:SetParent(itemRoot.transform)
    objRect.transform.localScale = Vector3.one;
    --obj.transform:SetSiblingIndex(1)
    obj:SetActive(true)
    return obj
end
--退出时清空Item数据
function WarehouseDetailBoxCtrl:CloseDestroy()
    if not self.goodsItemTable or next(self.goodsItemTable) == nil then
        return
    else
        for key,valueObj in pairs(self.goodsItemTable) do
            destroy(valueObj.prefab.gameObject)
            self.goodsItemTable[key] = nil
        end
    end
end