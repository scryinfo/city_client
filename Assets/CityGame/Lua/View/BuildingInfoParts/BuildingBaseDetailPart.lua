---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Fisher.
--- DateTime: 2019/4/12 17:34
---
BuildingBaseDetailPart = class('BuildingBaseDetailPart',BasePartDetail)

--生成itemPrefab(生成多个)
function BuildingBaseDetailPart:CreateGoodsItems(dataInfo,itemPrefab,itemRoot,className,behaviour,instanceTable,goodsType,...)
    if not dataInfo then
        return
    end
    local arg = {...}
    if next(arg) == nil then
        for key,value in pairs(dataInfo) do
            local obj = BuildingBaseDetailPart.loadingItemPrefab(itemPrefab,itemRoot)
            local itemGoodsIns = className:new(value,obj,behaviour,key,goodsType)
            table.insert(instanceTable,itemGoodsIns)
        end
    else
        for key,value in pairs(dataInfo) do
            local obj = BuildingBaseDetailPart.loadingItemPrefab(itemPrefab,itemRoot)
            local itemGoodsIns = className:new(value,obj,behaviour,key,goodsType,arg)
            table.insert(instanceTable,itemGoodsIns)
        end
    end
end
--生成生产线代生产队列
function BuildingBaseDetailPart:CreatedWaitingQueue(dataInfo,itemPrefab,itemRoot,className,behaviour,instanceTable,goodsType)
    if not dataInfo then
        return
    end
    local objPrefab = BuildingBaseDetailPart.loadingItemPrefabs(itemPrefab,itemRoot)
    local lineItemIns = className:new(dataInfo,objPrefab,behaviour,goodsType)
    table.insert(instanceTable,lineItemIns)
end
--生成itemPrefab(生成一个)
function BuildingBaseDetailPart:CreateGoodsItem(dataInfo,itemPrefab,itemRoot,className,behaviour,instanceTable,goodsType,...)
    if not dataInfo then
        return
    end
    local arg = {}
    local obj = BuildingBaseDetailPart.loadingItemPrefab(itemPrefab,itemRoot)
    local itemGoodsIns = className:new(dataInfo,obj,behaviour,#instanceTable + 1,goodsType,arg)
    table.insert(instanceTable,itemGoodsIns)
end

--计算仓库容量
function BuildingBaseDetailPart:_getWarehouseCapacity(dataTable)
    local warehouseNowCount = 0
    local lockedNowCount = 0
    if not dataTable.inHand then
        warehouseNowCount = 0
    else
        for key,value in pairs(dataTable.inHand) do
            warehouseNowCount = warehouseNowCount + value.n
        end
    end
    if not dataTable.locked then
        lockedNowCount = 0
    else
        for key,value in pairs(dataTable.locked) do
            lockedNowCount = lockedNowCount + value.n
        end
    end
    return warehouseNowCount + lockedNowCount
end

--关闭时清空数据
function BuildingBaseDetailPart:CloseDestroy(dataTable)
    if next(dataTable) == nil then
        return
    else
        for key,valueObj in pairs(dataTable) do
            destroy(valueObj.prefab.gameObject)
            dataTable[key] = nil
        end
    end
end
--删除某个商品
function BuildingBaseDetailPart:deleteGoodsItem(dataTable,id)
    if next(dataTable) == nil then
        return
    else
        destroy(dataTable[id].prefab.gameObject)
        table.remove(dataTable,id)
    end
    local id = 1
    for key,value in pairs(dataTable) do
        dataTable[id]:RefreshID(id)
        id = id + 1
    end
end
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--加载实例化Prefab
function BuildingBaseDetailPart.loadingItemPrefab(itemPrefab,itemRoot)
    local obj = UnityEngine.GameObject.Instantiate(itemPrefab)
    local objRect = obj.transform:GetComponent("RectTransform")
    obj.transform:SetParent(itemRoot.transform)
    objRect.transform.localScale = Vector3.one
    --obj.transform:SetSiblingIndex(1)
    obj:SetActive(true)
    return obj
end
--加载实例化Prefab(只针对生产队列第一次无法点击的问题,没有找到具体原因)
function BuildingBaseDetailPart.loadingItemPrefabs(itemPrefab,itemRoot)
    local obj = UnityEngine.GameObject.Instantiate(itemPrefab)
    local objRect = obj.transform:GetComponent("RectTransform")
    obj.transform:SetParent(itemRoot.transform)
    objRect.transform.localScale = Vector3.one
    objRect.transform.localPosition = Vector3.zero
    obj:SetActive(true)
    return obj
end
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------