---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xuyafang.
--- DateTime: 2019/3/5 15:26
---
MapModel = {}
local pbl = pbl

--启动事件--
function MapModel.registerNetMsg()
    --网络回调注册
    CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","queryTypeBuildingSummary"), MapModel.n_OnReceiveQueryBuildsSummary)
    CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","queryMarketSummary"), MapModel.n_OnReceiveQueryMarketSummary)
    CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","queryGroundSummary"), MapModel.n_OnReceiveGroundTransSummary)
    CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","queryTechnologySummary"), MapModel.n_OnReceiveLabSummary)
    CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","queryContractSummary"), MapModel.n_OnReceiveSigningSummary)
    CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","queryPromotionSummary"), MapModel.n_OnReceivePromoteSummary)
    --CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","queryWareHouseSummary"), MapModel.n_OnReceiveWarehouseSummary)
    CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","queryTypeBuildingDetail"), MapModel.n_OnReceiveQueryBuildsDetail)  --建筑详情搜索回调
    CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","queryMarketDetail"), MapModel.n_OnReceiveQueryMarketDetail)
    CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","queryContractGridDetail"), MapModel.n_OnReceiveSignDetail)
    CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","queryTechnologyDetail"), MapModel.n_OnReceiveTechDetail)
    CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","queryPromotionsDetail"), MapModel.n_OnReceivePromotionDetail)
    --CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","queryWareHouseDetail"), MapModel.n_OnReceiveWarehouseDetail)

end


--- 客户端请求 ---
--请求建筑搜索摘要
function MapModel.m_ReqBuildsSummary(itemId)
    if itemId ~= nil then
        DataManager.ModelSendNetMes("gscode.OpCode", "queryTypeBuildingSummary","gs.Num",{ num = itemId})
        FlightMainModel.OpenFlightLoading()
    end
end
--请求原料商品搜索摘要
function MapModel.m_ReqQueryMarketSummary(itemId)
    if itemId ~= nil then
        DataManager.ModelSendNetMes("gscode.OpCode", "queryMarketSummary","gs.Num",{ num = itemId})
        FlightMainModel.OpenFlightLoading()
    end
end
--请求土地交易搜索摘要
function MapModel.m_ReqGroundTransSummary()
    local msgId = pbl.enum("gscode.OpCode", "queryGroundSummary")
    CityEngineLua.Bundle:newAndSendMsg(msgId, nil)
    FlightMainModel.OpenFlightLoading()
end
--请求科研搜索摘要
function MapModel.m_ReqLabSummary(itemId)
    if itemId ~= nil then
        DataManager.ModelSendNetMes("gscode.OpCode", "queryTechnologySummary","gs.Num",{ num = itemId})
        FlightMainModel.OpenFlightLoading()
    end
end
--请求推广搜索摘要
function MapModel.m_ReqPromotionSummary(itemId)
    if itemId ~= nil then
        DataManager.ModelSendNetMes("gscode.OpCode", "queryPromotionSummary","gs.Num",{ num = itemId})
        FlightMainModel.OpenFlightLoading()
    end
end
--仓库摘要
function MapModel.m_ReqWarehouseSummary()
    local msgId = pbl.enum("gscode.OpCode", "queryWareHouseSummary")
    CityEngineLua.Bundle:newAndSendMsg(msgId, nil)
    FlightMainModel.OpenFlightLoading()
end
--签约摘要
function MapModel.m_ReqSigningSummary()
    local msgId = pbl.enum("gscode.OpCode", "queryContractSummary")
    CityEngineLua.Bundle:newAndSendMsg(msgId, nil)
    FlightMainModel.OpenFlightLoading()
end
---详情
--请求建筑搜索详情
function MapModel.m_ReqBuildsDetail(gridIndexPos, itemId)
    local data = { centerIdx = {x = gridIndexPos.x, y = gridIndexPos.y}, type = itemId}
    DataManager.ModelSendNetMes("gscode.OpCode", "queryTypeBuildingDetail","gs.QueryTypeBuildingDetail", data)
    FlightMainModel.OpenFlightLoading()
end
--请求原料商品搜索详情
function MapModel.m_ReqMarketDetail(gridIndexPos, itemId)
    local data = { centerIdx = {x = gridIndexPos.x, y = gridIndexPos.y}, itemId = itemId}
    DataManager.ModelSendNetMes("gscode.OpCode", "queryMarketDetail","gs.QueryMarketDetail", data)
    FlightMainModel.OpenFlightLoading()
end
--请求仓库详情
function MapModel.m_ReqWarehouseDetail(gridIndexPos)
    local data = { centerIdx = {x = gridIndexPos.x, y = gridIndexPos.y}}
    DataManager.ModelSendNetMes("gscode.OpCode", "queryWareHouseDetail","gs.QueryWareHouseDetail", data)
    FlightMainModel.OpenFlightLoading()
end
--请求签约详情
function MapModel.m_ReqSigningDetail(gridIndexPos)
    local data = { x = gridIndexPos.x, y = gridIndexPos.y}
    DataManager.ModelSendNetMes("gscode.OpCode", "queryContractGridDetail","gs.GridIndex", data)
    FlightMainModel.OpenFlightLoading()
end
--请求推广详情
function MapModel.m_ReqPromotionDetail(gridIndexPos,typeIds)
    local data = { centerIdx = {x = gridIndexPos.x, y = gridIndexPos.y}, itemId = typeIds}
    DataManager.ModelSendNetMes("gscode.OpCode", "queryPromotionsDetail","gs.queryPromotionsDetail", data)
    FlightMainModel.OpenFlightLoading()
end
--请求科研详情
function MapModel.m_ReqTechnologyDetail(gridIndexPos,typeIds)
    local data = { centerIdx = {x = gridIndexPos.x, y = gridIndexPos.y}, itemId = typeIds}
    DataManager.ModelSendNetMes("gscode.OpCode", "queryTechnologyDetail","gs.queryTechnologyDetail", data)
    FlightMainModel.OpenFlightLoading()
end
--- 摘要回调 ---
--建筑类型搜索摘要
function MapModel.n_OnReceiveQueryBuildsSummary(stream)
    FlightMainModel.CloseFlightLoading()
    if stream == nil or stream == "" then
        return
    end
    local data = assert(pbl.decode("gs.BuildingGridSummary", stream), "MapModel.n_OnReceiveQueryBuildsSummary: stream == nil")
    MapCtrl._receiveBuildsSummary(MapCtrl, data)
end

--原料商品搜索摘要
function MapModel.n_OnReceiveQueryMarketSummary(stream)
    FlightMainModel.CloseFlightLoading()
    if stream == nil or stream == "" then
        return
    end
    local data = assert(pbl.decode("gs.MarketSummary", stream), "MapModel.n_OnReceiveQueryMarketSummary: stream == nil")
    MapCtrl._receiveMarketSummary(MapCtrl, data)
end
--土地交易搜索摘要
function MapModel.n_OnReceiveGroundTransSummary(stream)
    FlightMainModel.CloseFlightLoading()
    if stream == nil or stream == "" then
        return
    end
    local data = assert(pbl.decode("gs.GroundSummary", stream), "MapModel.n_OnReceiveGroundTransSummary: stream == nil")
    MapCtrl._receiveGroundTransSummary(MapCtrl, data)
end
--签约摘要
function MapModel.n_OnReceiveSigningSummary(stream)
    FlightMainModel.CloseFlightLoading()
    if stream == nil or stream == "" then
        return
    end
    local data = assert(pbl.decode("gs.ContractSummary", stream), "MapModel.n_OnReceiveSigningSummary: stream == nil")
    MapCtrl._receiveSigningSummary(MapCtrl, data)
end
--科研摘要
function MapModel.n_OnReceiveLabSummary(stream)
    FlightMainModel.CloseFlightLoading()
    if stream == nil or stream == "" then
        return
    end
    local data = assert(pbl.decode("gs.TechOrPromSummary", stream), "MapModel.n_OnReceiveLabSummary: stream == nil")
    MapCtrl._receiveLabSummary(MapCtrl, data)
end
--推广摘要
function MapModel.n_OnReceivePromoteSummary(stream)
    FlightMainModel.CloseFlightLoading()
    if stream == nil or stream == "" then
        return
    end
    local data = assert(pbl.decode("gs.TechOrPromSummary", stream), "MapModel.n_OnReceivePromoteSummary: stream == nil")
    MapCtrl._receivePromotionSummary(MapCtrl, data)
end
--仓库摘要
function MapModel.n_OnReceiveWarehouseSummary(stream)
    FlightMainModel.CloseFlightLoading()
    if stream == nil or stream == "" then
        return
    end
    local data = assert(pbl.decode("gs.WareHouseSummary", stream), "MapModel.n_OnReceiveLabSummary: stream == nil")
    MapCtrl._receiveWarehouseSummary(MapCtrl, data)
end


--- 详情回调 ---
--建筑类型搜索详情
function MapModel.n_OnReceiveQueryBuildsDetail(stream)
    FlightMainModel.CloseFlightLoading()
    if stream == nil or stream == "" then
        return
    end
    local data = assert(pbl.decode("gs.TypeBuildingDetail", stream), "MapModel.n_OnReceiveQueryBuildsDetail: stream == nil")
    MapCtrl._receiveBuildsDetail(MapCtrl, data)
end
--原料商品搜索详情
function MapModel.n_OnReceiveQueryMarketDetail(stream)
    FlightMainModel.CloseFlightLoading()
    if stream == nil or stream == "" then
        return
    end
    local data = assert(pbl.decode("gs.MarketDetail", stream), "MapModel.n_OnReceiveQueryMarketDetail: stream == nil")
    MapCtrl._receiveMarketDetail(MapCtrl, data)
end
--签约
function MapModel.n_OnReceiveSignDetail(stream)
    FlightMainModel.CloseFlightLoading()
    if stream == nil or stream == "" then
        return
    end
    local data = assert(pbl.decode("gs.ContractGridDetail", stream), "MapModel.n_OnReceiveSignDetail: stream == nil")
    MapCtrl._receiveSignDetail(MapCtrl, data)
end
--科研
function MapModel.n_OnReceiveTechDetail(stream)
    FlightMainModel.CloseFlightLoading()
    if stream == nil or stream == "" then
        return
    end
    local data = assert(pbl.decode("gs.TechnologyDetail", stream), "MapModel.n_OnReceiveTechDetail: stream == nil")
    MapCtrl._receiveTechDetail(MapCtrl, data)
end
--仓库
function MapModel.n_OnReceiveWarehouseDetail(stream)
    FlightMainModel.CloseFlightLoading()
    if stream == nil or stream == "" then
        return
    end
    local data = assert(pbl.decode("gs.WareHouseDetail", stream), "MapModel.n_OnReceiveWarehouseDetail: stream == nil")
    MapCtrl._receiveWarehouseDetail(MapCtrl, data)
end
--推广
function MapModel.n_OnReceivePromotionDetail(stream)
    FlightMainModel.CloseFlightLoading()
    if stream == nil or stream == "" then
        return
    end
    local data = assert(pbl.decode("gs.PromotionsDetail", stream), "MapModel.n_OnReceivePromotionDetail: stream == nil")
    MapCtrl._receivePromotionDetail(MapCtrl, data)
end