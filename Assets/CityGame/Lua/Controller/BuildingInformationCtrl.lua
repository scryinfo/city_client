---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Fisher.
--- DateTime: 2019/5/14 10:58
---Building information details

BuildingInformationCtrl = class('BuildingInformationCtrl',UIPanel)
UIPanel:ResgisterOpen(BuildingInformationCtrl)

local isShow = false
local businessState = false
local oneself = nil  --Whether it is the building owner
--Building Information Item Path
BuildingInformationCtrl.MaterialFactoryItem_Path = "Assets/CityGame/Resources/View/NewItems/materialFactoryItem.prefab"         --Raw material factory
BuildingInformationCtrl.ProcessingFactoryItem_Path = "Assets/CityGame/Resources/View/NewItems/processingFactoryItem.prefab"     --Processing plant
BuildingInformationCtrl.RetailStoreItem_Path = "Assets/CityGame/Resources/View/NewItems/retailStoreItem.prefab"                 --Retail store
BuildingInformationCtrl.LaboratoryItem_Path = "Assets/CityGame/Resources/View/NewItems/laboratoryItem.prefab"                 --graduate School
BuildingInformationCtrl.HouseItem_Path = "Assets/CityGame/Resources/View/NewItems/houseBuildingInfoItem.prefab"                 --Residential
BuildingInformationCtrl.PromoteItem_Path = "Assets/CityGame/Resources/View/NewItems/PromoteItem.prefab"                 --Promote
function BuildingInformationCtrl:initialize()
    UIPanel.initialize(self,UIType.Normal,UIMode.HideOther,UICollider.None);
end

function BuildingInformationCtrl:bundleName()
    return "Assets/CityGame/Resources/View/BuildingInformationPanel.prefab"
end

function BuildingInformationCtrl:OnCreate(obj)
    UIPanel.OnCreate(self,obj)
end

function BuildingInformationCtrl:Awake(go)
    self.gameObject = go
    self:_getComponent(go)
    self.luaBehaviour = self.gameObject:GetComponent('LuaBehaviour')
    self.luaBehaviour:AddClick(self.closeBtn.gameObject,self._clickCloseBtn,self)
    self.luaBehaviour:AddClick(self.buildingNomal.gameObject,self._clickBuildingNomal,self)
    self.luaBehaviour:AddClick(self.landNomal.gameObject,self._clickLandNomal,self)
    self.luaBehaviour:AddClick(self.switchBtn.gameObject,self._clickSwitchBtn,self)
    self.luaBehaviour:AddClick(self.buildingName.gameObject,self._clickBuildingName,self)
    self.luaBehaviour:AddClick(self.bgBtn.gameObject,self._clickBgBtn,self)
    --Bind the click event to the button of each land
    --TODO: The building information plot is modified so that it cannot be clicked, so there is no need to add a click event 2019/8/15
    --for key,value in pairs(self.mineLandBtnTable) do
    --    self.luaBehaviour:AddClick(value.gameObject,self._clickMineGroundBtn,self)
    --end
    --for key,value in pairs(self.otherLandBtnTable) do
    --    self.luaBehaviour:AddClick(value.gameObject,self._clickOtherGroundBtn,self)
    --end
end
function BuildingInformationCtrl:Active()
    UIPanel.Active(self)
    Event.AddListener("openTipBox",self.openTipBox,self)
end
function BuildingInformationCtrl:Refresh()
    self:language()
    --Get and initialize UI building information
    self:getBuildingInfo()
    --Acquire and initialize land information
    self:getLandInfo()
    --button index
    self.indexTable = {}
    self:closeGroundButton()
end

function BuildingInformationCtrl:Hide()
    UIPanel.Hide(self)
    Event.RemoveListener("openTipBox",self.openTipBox,self)
    if self.buildingInfoItem ~= nil then
        destroy(self.buildingInfoItem.prefab.gameObject)
        self.buildingInfoItem = nil
    end
    if isShow == true then
        self.tipBox.transform:SetParent(self.content)
        self.tipBoxText.text = ""
        self.tipBox.transform.localScale = Vector3.zero
    end
    if self.avatarData then
        AvatarManger.CollectAvatar(self.avatarData)
    end
    self.indexTable = {}
    --Prosperity is emptied, to ensure that the next time you open the building information to get the latest
    self.prosperity = nil
    oneself = nil
end
-------------------------------------------------------------Get components---------------------------------------------------------------------------------
function BuildingInformationCtrl:_getComponent(go)
    ---TopRoot
    self.closeBtn = go.transform:Find("topRoot/top/closeBtn")
    self.topName = go.transform:Find("topRoot/top/topName"):GetComponent("Text")
    --buildingInfoBtn
    self.buildingNomal = go.transform:Find("topRoot/button/buildingInfoBtn/nomal")      --Building information button is not selected
    self.buildingNomalText = go.transform:Find("topRoot/button/buildingInfoBtn/nomal/nomalText"):GetComponent("Text")
    self.buildingChoose = go.transform:Find("topRoot/button/buildingInfoBtn/choose")    --Building information button is selected
    self.buildingChooseText = go.transform:Find("topRoot/button/buildingInfoBtn/choose/chooseText"):GetComponent("Text")
    --landInfomationBtn
    self.landNomal = go.transform:Find("topRoot/button/landInfomationBtn/nomal")        --Land information button is not selected
    self.landNomalText = go.transform:Find("topRoot/button/landInfomationBtn/nomal/nomalText"):GetComponent("Text")
    self.landChoose = go.transform:Find("topRoot/button/landInfomationBtn/choose")      --Land information button is selected
    self.landChooseText = go.transform:Find("topRoot/button/landInfomationBtn/choose/chooseText"):GetComponent("Text")
    ---content
    --buildingInfoRoot
    self.buildingInfoRoot = go.transform:Find("content/buildingInfoRoot")               --Building information
    self.content = go.transform:Find("content/buildingInfoRoot/content")
    self.bgBtn = go.transform:Find("content/buildingInfoRoot/content/bgBtn")
    self.buildingName = go.transform:Find("content/buildingInfoRoot/content/buildingName"):GetComponent("Text")
    self.modifyImg = go.transform:Find("content/buildingInfoRoot/content/modifyImg")
    self.buildingTypeText = go.transform:Find("content/buildingInfoRoot/content/buildingTypeText"):GetComponent("Text")
    self.tipText = go.transform:Find("content/buildingInfoRoot/content/tipBg/tipText"):GetComponent("Text")
    self.buildingIcon = go.transform:Find("content/buildingInfoRoot/content/buildingIcon"):GetComponent("Image")
    self.buildTimeText = go.transform:Find("content/buildingInfoRoot/content/infoBg/buildTimeText"):GetComponent("Text")
    self.timeText = go.transform:Find("content/buildingInfoRoot/content/infoBg/timeText"):GetComponent("Text")
    self.switchBtn = go.transform:Find("content/buildingInfoRoot/content/infoBg/switchBtn"):GetComponent("Text")
    self.tipBox = go.transform:Find("content/buildingInfoRoot/content/tipBox")
    self.tipBoxText = go.transform:Find("content/buildingInfoRoot/content/tipBox/tipBoxText"):GetComponent("Text")
    --landInfoRoot
    self.landInfoRoot = go.transform:Find("content/landInfoRoot")                       --Land information
    self.gridGroup = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content"):GetComponent("GridLayoutGroup")
----------------------------------------------------------landInfoConten Plot----------------------------------------------------------------------------------
    --Plot 1 (the same location shows whether it is own land or renting someone else's land)
    self.mineLandBtn1 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg7/mineLandBtn7")
    self.otherLandBtn1 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg7/otherLandBtn7")
    --Plot 2
    self.mineLandBtn2 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg8/mineLandBtn8")
    self.otherLandBtn2 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg8/otherLandBtn8")
    --Plot 3
    self.mineLandBtn3 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg9/mineLandBtn9")
    self.otherLandBtn3 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg9/otherLandBtn9")
    --Plot 4
    self.mineLandBtn4 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg12/mineLandBtn12")
    self.otherLandBtn4 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg12/otherLandBtn12")
    --Plot 5
    self.mineLandBtn5 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg13/mineLandBtn13")
    self.otherLandBtn5 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg13/otherLandBtn13")
    --Plot 6
    self.mineLandBtn6 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg14/mineLandBtn14")
    self.otherLandBtn6 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg14/otherLandBtn14")
    --Plot 7
    self.mineLandBtn7 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg17/mineLandBtn17")
    self.otherLandBtn7 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg17/otherLandBtn17")
    --Plot 8
    self.mineLandBtn8 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg18/mineLandBtn18")
    self.otherLandBtn8 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg18/otherLandBtn18")
    --Plot 9
    self.mineLandBtn9 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg19/mineLandBtn19")
    self.otherLandBtn9 = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/landBg19/otherLandBtn19")
    --Lot selection box
    self.chooseBoxImg = go.transform:Find("content/landInfoRoot/content/landInfoConten/Viewport/Content/chooseBoxImg")

    --mineLandBtnTable
    if not self.mineLandBtnTable then
        self.mineLandBtnTable = {}
        for i = 1,9 do
            table.insert(self.mineLandBtnTable, self["mineLandBtn"..tostring(i)])
        end
    end
    --otherLandBtnTable
    if not self.otherLandBtnTable then
        self.otherLandBtnTable = {}
        for i = 1,9 do
            table.insert(self.otherLandBtnTable,self["otherLandBtn"..tostring(i)])
        end
    end
--------------------------------------------------------------------------------------------------------------------------------------------------------------
    --mineLandInfo
    self.mineLandInfo = go.transform:Find("content/landInfoRoot/content/mineLandInfo")
    self.buyingTime = go.transform:Find("content/landInfoRoot/content/mineLandInfo/buyingTime/time"):GetComponent("Text")
    self.buyingTimeText = go.transform:Find("content/landInfoRoot/content/mineLandInfo/buyingTime/timeText"):GetComponent("Text")
    self.buyingPrice = go.transform:Find("content/landInfoRoot/content/mineLandInfo/buyingPrice/price"):GetComponent("Text")
    self.buyingPriceText = go.transform:Find("content/landInfoRoot/content/mineLandInfo/buyingPrice/priceText"):GetComponent("Text")
    self.buildingText = go.transform:Find("content/landInfoRoot/content/mineLandInfo/buildingSize/buildingText"):GetComponent("Text")
    self.buildingSizeText = go.transform:Find("content/landInfoRoot/content/mineLandInfo/buildingSize/buildingSizeText"):GetComponent("Text")
    --otherLandInfo
    self.otherLandInfo = go.transform:Find("content/landInfoRoot/content/otherLandInfo")
    self.headImg = go.transform:Find("content/landInfoRoot/content/otherLandInfo/headBg/headImg"):GetComponent("Image")
    self.nameText = go.transform:Find("content/landInfoRoot/content/otherLandInfo/name/nameText"):GetComponent("Text")
    self.genderImg = go.transform:Find("content/landInfoRoot/content/otherLandInfo/name/nameText/genderImg"):GetComponent("Image")
    self.companyText = go.transform:Find("content/landInfoRoot/content/otherLandInfo/company/companyText"):GetComponent("Text")
    self.leaseTime = go.transform:Find("content/landInfoRoot/content/otherLandInfo/leaseTime/leaseTimeText"):GetComponent("Text")
    self.leaseTimeText = go.transform:Find("content/landInfoRoot/content/otherLandInfo/leaseTime/leaseTimeText/timeText"):GetComponent("Text")
    self.rentText = go.transform:Find("content/landInfoRoot/content/otherLandInfo/rent/rentText"):GetComponent("Text")
    self.priceText = go.transform:Find("content/landInfoRoot/content/otherLandInfo/rent/priceText"):GetComponent("Text")
    --buildingTypeContent                                                               --Generate different items according to different buildings
    self.buildingTypeContent = go.transform:Find("content/buildingInfoRoot/content/buildingTypeContent")
end
---------------------------------------------------------------Initialization function------------------------------------------------------------------------------
---------------------------------------------------------------Building information--------------------------------------------------------------------------------
--Request building information
function BuildingInformationCtrl:getBuildingInfo()
    if self.m_data then
        self.m_data.insId = OpenModelInsID.BuildingInfoId
        DataManager.OpenDetailModel(BuildingInformationModel,self.m_data.insId)
        if self.m_data.buildingType == BuildingType.MaterialFactory then
            --Raw material factory
            DataManager.DetailModelRpcNoRet(self.m_data.insId, 'm_ReqMaterialFactoryInfo',self.m_data.id,self.m_data.ownerId)
        elseif self.m_data.buildingType == BuildingType.ProcessingFactory then
            --Processing plant
            DataManager.DetailModelRpcNoRet(self.m_data.insId, 'm_ReqProcessingFactoryInfo',self.m_data.id,self.m_data.ownerId)
        elseif self.m_data.buildingType == BuildingType.RetailShop then
            --Retail store
            DataManager.DetailModelRpcNoRet(self.m_data.insId, 'm_ReqRetailShopInfo',self.m_data.id,self.m_data.ownerId)
        elseif self.m_data.buildingType == BuildingType.Laboratory then
            --graduate School
            DataManager.DetailModelRpcNoRet(self.m_data.insId, 'm_LaboratoryInfo',self.m_data.id,self.m_data.ownerId)
        elseif self.m_data.buildingType == BuildingType.House then
            --Residential (same as retail store)
            DataManager.DetailModelRpcNoRet(self.m_data.insId, 'm_ReqRetailShopInfo',self.m_data.id,self.m_data.ownerId)
        elseif self.m_data.buildingType == BuildingType.Municipal then
            --Promote
            DataManager.DetailModelRpcNoRet(self.m_data.insId, 'm_ReqPromoteInfo',self.m_data.id,self.m_data.ownerId)
        end
    end
end
--Initialize UI building information
function BuildingInformationCtrl:initializeUiBuildingInfo()
    self.buildingName.text = self.m_data.name
    LoadSprite(BuildingInformationIcon[self.m_data.mId].imgPath,self.buildingIcon,true)
    self.timeText.text = self:getStringTime(self.m_data.constructCompleteTs)
    --Opened and closed
    self:initializeButtonInfo()
    --Adjust plot UI layout
    self:initializeLandUiLayout()
    --Initialize the same information
    local data = PlayerBuildingBaseData[self.m_data.mId]
    --Cache a building scale for use when you are not in
    self.buildingSize = data.x
    self.buildingSizeText.text = data.x.."×"..data.y
    self.buildingTypeText.text = GetLanguage(data.sizeName)..GetLanguage(data.typeName)
    if self.m_data.buildingType == BuildingType.MaterialFactory then
        --Raw material factory
        self.tipText.text = GetLanguage(23020001)
        local function callback(obj)
            self.buildingInfoItem = materialFactoryItem:new(self.buildingInfo,obj,self.luaBehaviour,self.m_data.ownerId)
        end
        createPrefab(BuildingInformationCtrl.MaterialFactoryItem_Path,self.buildingTypeContent,callback)
    elseif self.m_data.buildingType == BuildingType.ProcessingFactory then
        --Processing plant
        self.tipText.text = GetLanguage(23020002)
        local function callback(obj)
            self.buildingInfoItem = processingFactoryItem:new(self.buildingInfo,obj,self.luaBehaviour,self.m_data.ownerId)
        end
        createPrefab(BuildingInformationCtrl.ProcessingFactoryItem_Path,self.buildingTypeContent,callback)
    elseif self.m_data.buildingType == BuildingType.RetailShop then
        --Retail store
        self.tipText.text = GetLanguage(23020003)
        local function callback(obj)
            self.buildingInfoItem = retailStoreItem:new(self.buildingInfo,obj,self.luaBehaviour,self.m_data.ownerId)
        end
        createPrefab(BuildingInformationCtrl.RetailStoreItem_Path,self.buildingTypeContent,callback)
    elseif self.m_data.buildingType == BuildingType.House then
        --Residential
        self.tipText.text = GetLanguage(23020004)
        local function callback(obj)
            self.buildingInfoItem = houseBuildingInfoItem:new(self.buildingInfo,obj,self.luaBehaviour,self.m_data.ownerId)
        end
        createPrefab(BuildingInformationCtrl.HouseItem_Path,self.buildingTypeContent,callback)
    elseif self.m_data.buildingType == BuildingType.Municipal then
        --Promotion company
        self.tipText.text = GetLanguage(23020005)
        local function callback(obj)
            self.buildingInfoItem = PromoteItem:new(self.buildingInfo,obj,self.luaBehaviour,self.m_data.ownerId)
        end
        createPrefab(BuildingInformationCtrl.PromoteItem_Path,self.buildingTypeContent,callback)
    elseif self.m_data.buildingType == BuildingType.Laboratory then
        --graduate School
        self.tipText.text = GetLanguage(23020006)
        local function callback(obj)
            self.buildingInfoItem = laboratoryItem:new(self.buildingInfo,obj,self.luaBehaviour,self.m_data.ownerId)
        end
        createPrefab(BuildingInformationCtrl.LaboratoryItem_Path,self.buildingTypeContent,callback)
    end
    self:defaultBuildingInfoTrue()
end
--Initialize button information
function BuildingInformationCtrl:initializeButtonInfo()
    --Whether it is the building owner
    if self.m_data.ownerId == DataManager.GetMyOwnerID() then
        --Whether to open
        if self.m_data.state == "OPERATE" then
            self.switchBtn.text = GetLanguage(30010004)
            businessState = true
        else
            self.switchBtn.text = GetLanguage(30010005)
            businessState = false
        end
        oneself = true
        self.switchBtn.transform.localScale = Vector3.one
        self.modifyImg.transform.localScale = Vector3.one
        self.buildingName:GetComponent("Button").interactable = true
    else
        oneself = false
        self.switchBtn.transform.localScale = Vector3.zero
        self.modifyImg.transform.localScale = Vector3.zero
        self.buildingName:GetComponent("Button").interactable = false
    end
end
--Open building information by default
function BuildingInformationCtrl:defaultBuildingInfoTrue()
    self.tipBox.transform.localScale = Vector3.zero
    self.buildingChoose.transform.localScale = Vector3.one
    self.buildingInfoRoot.transform.localScale = Vector3.one
    self.landChoose.transform.localScale = Vector3.zero
    self.landInfoRoot.gameObject:SetActive(false)
end
---------------------------------------------------------------Land information--------------------------------------------------------------------------------
--Request land information, land owner information, building information
function BuildingInformationCtrl:getLandInfo()
    --Request land information
    local startLandId = TerrainManager.GridIndexTurnBlockID(self.m_data.pos)
    local landIds = DataManager.CaculationTerrainRangeBlock(startLandId,PlayerBuildingBaseData[self.m_data.mId].x)
    self.groundData = {}
    for k,landId in pairs(landIds) do
        local data = DataManager.GetGroundDataByID(landId)
        table.insert(self.groundData,data)
    end
    --Request information about landlord
    self.groundOwnerData = {}
    for k,ground in pairs(self.groundData) do
        local ids = {}
        table.insert(ids,ground.Data.ownerId)
        PlayerInfoManger.GetInfos(ids,self.SaveData,self)
    end
    --Request information from the owner
    local ids = {}
    table.insert(ids,self.m_data.ownerId)
    PlayerInfoManger.GetInfos(ids,self.SaveData,self)
end

--Initialize the plot UI layout
function BuildingInformationCtrl:initializeLandUiLayout()
    local buildingSize = PlayerBuildingBaseData[self.m_data.mId].x
    if buildingSize == 1 or buildingSize == 3 then
        -- If it is a 1*1 building, the plot UI layout
        -- Or 3*3 buildings, plot UI layout
        self.gridGroup.padding.left = -55
        self.gridGroup.padding.top = -60
    elseif buildingSize == 2 then
        --If it is a 2*2 building, the plot UI layout
        self.gridGroup.padding.left = -5
        self.gridGroup.padding.top = -15
    end
end

--Initialize UI land plot information
function BuildingInformationCtrl:initializeUiLandInfo()
    --Building size
    local buildingSize = PlayerBuildingBaseData[self.m_data.mId].x
    --1*1 Small building
    if buildingSize == 1 then
        --scale
        self.buildingGroundNum = 1
        for key,value in pairs(self.groundData) do
            --Rented land
            if value.Data.rent then
                self.otherLandBtnTable[5].transform.localScale = Vector3.one
                table.insert(self.indexTable,self.otherLandBtnTable[5])
                --By default, the information of the first plot is opened --TODO: Now it does not distinguish the plot information, so temporarily comment out
                --self:_updateGroundInfo(1,false)
            else
                --Is the place to buy
                self.mineLandBtnTable[5].transform.localScale = Vector3.one
                table.insert(self.indexTable,self.mineLandBtnTable[5])
                --By default, the information of the first plot is opened --TODO: Now it does not distinguish the plot information, so temporarily comment out
                --self:_updateGroundInfo(1,true)
            end
        end
        --2*2 Medium-sized building
    elseif buildingSize == 2 then
        --scale
        self.buildingGroundNum = 4
        for key,value in pairs(self.groundData) do
            --Whether the plot is bought or rented
            if value.Data.rent then
                if key == 3 or key == 4 then
                    self.otherLandBtnTable[key + 1].transform.localScale = Vector3.one
                    table.insert(self.indexTable,self.otherLandBtnTable[key + 1])
                else
                    self.otherLandBtnTable[key].transform.localScale = Vector3.one
                    table.insert(self.indexTable,self.otherLandBtnTable[key])
                end
            else
                if key == 3 or key == 4 then
                    self.mineLandBtnTable[key + 1].transform.localScale = Vector3.one
                    table.insert(self.indexTable,self.mineLandBtnTable[key + 1])
                else
                    self.mineLandBtnTable[key].transform.localScale = Vector3.one
                    table.insert(self.indexTable,self.mineLandBtnTable[key])
                end
            end
        end
        --By default, the information of the first plot is opened --TODO: Now it does not distinguish the plot information, so temporarily comment out
        --if self.groundData[1].Data.rent then
        --    self:_updateGroundInfo(1,false)
        --else
        --    self:_updateGroundInfo(1,true)
        --end
        --3*3 Large building
    elseif buildingSize == 3 then
        --scale
        self.buildingGroundNum = 9
        for key,value in pairs(self.groundData) do
            --Whether the plot is bought or rented
            if value.Data.rent then
                self.otherLandBtnTable[key].transform.localScale = Vector3.one
                table.insert(self.indexTable,self.self.otherLandBtnTable[key])
            else
                self.mineLandBtnTable[key].transform.localScale = Vector3.one
                table.insert(self.indexTable,self.mineLandBtnTable[key])
            end
        end
        --By default, the information of the first plot is opened --TODO: Now it does not distinguish the plot information, so temporarily comment out
        --if self.groundData[1].Data.rent then
        --    self:_updateGroundInfo(1,false)
        --else
        --    self:_updateGroundInfo(1,true)
        --end
    end
    --Default framed plot 1 --TODO: building information plot cannot be clicked, modified to not use framed
    --self.chooseBoxImg.transform:SetParent(self.indexTable[1])
    --self.chooseBoxImg.transform.localPosition = Vector3(0,0,0)
    --self.chooseBoxImg.transform.localScale = Vector3.one
    self.chooseBoxImg.transform.localScale = Vector3.zero
    --Open building land information
    self:_updateGroundInfo(oneself)
end

------------------------------------------------------------------------------------------------------------------------------------------------------
--multi-language
function BuildingInformationCtrl:language()
    self.topName.text = ""
    self.buildingNomalText.text = GetLanguage(30010001)
    self.buildingChooseText.text = GetLanguage(30010001)
    self.landNomalText.text = GetLanguage(30010002)
    self.landChooseText.text = GetLanguage(30010002)
    self.buildTimeText.text = GetLanguage(30010003)
    self.buyingTime.text = --[[GetLanguage(30080003)]]"建筑繁荣度:"
    self.buyingPrice.text = GetLanguage(30080004)
    self.buildingText.text = "建筑规模:"
    self.leaseTime.text = --[[GetLanguage(30080001)]]"建筑规模:"
    self.rentText.text = --[[GetLanguage(30080002)]]"建筑繁荣度:"
end
---------------------------------------------------------------Click function--------------------------------------------------------------------------------
--Open building information
function BuildingInformationCtrl:_clickBuildingNomal(ins)
    PlayMusEff(1002)
    ins.buildingChoose.transform.localScale = Vector3.one
    ins.buildingInfoRoot.transform.localScale = Vector3.one
    ins.landChoose.transform.localScale = Vector3.zero
    ins.landInfoRoot.gameObject:SetActive(false)
end
--Open land information
function BuildingInformationCtrl:_clickLandNomal(ins)
    PlayMusEff(1002)
    if ins.prosperity == nil then
        Event.Brocast("m_ReqBuildingProsperity",ins.m_data.id)
    end
    ins.landChoose.transform.localScale = Vector3.one
    ins.landInfoRoot.gameObject:SetActive(true)
    ins.buildingChoose.transform.localScale = Vector3.zero
    ins.buildingInfoRoot.transform.localScale = Vector3.zero
    ins:initializeUiLandInfo()
    ins:closeTipBox()
end
--Closed or dismantled
function BuildingInformationCtrl:_clickSwitchBtn(ins)
    PlayMusEff(1002)
    if businessState == true then
        --Closed
        local data = {isbool = false,fun = function()
            Event.Brocast("m_ReqClosedBuilding",ins.m_data.id)
        end}
        ct.OpenCtrl('ReminderTipsCtrl',data)
    else
        --tear down
        local data = {isbool = true,fun = function()
            Event.Brocast("m_ReqDemolitionBuilding",ins.m_data.id)
            DataManager.RemoveMyBuildingDetailByBuildID(ins.m_data.id)
            UIPanel.CloseAllPageExceptMain()
            Event.Brocast("SmallPop",GetLanguage(30010015), ReminderType.Succeed)
        end}
        ct.OpenCtrl('ReminderTipsCtrl',data)
    end
    ins:closeTipBox()
end
--Modify building name
function BuildingInformationCtrl:_clickBuildingName(ins)
    PlayMusEff(1002)
    local data = {}
    data.titleInfo = GetLanguage(30010006)
    data.inputDefaultStr = GetLanguage(30010007)
    data.btnCallBack = function(name)
        Event.Brocast("m_ReqSetBuildingName",ins.m_data.id,name)
    end
    ct.OpenCtrl("InputDialogPageCtrl",data)
    ins:closeTipBox()
end
----Own plot information
--function BuildingInformationCtrl:_clickMineGroundBtn(ins)
--    PlayMusEff(1002)
--    --Change the position of the check box
--    ins.chooseBoxImg.transform:SetParent(self.transform)
--    ins.chooseBoxImg.transform.localPosition = Vector3(0,0,0)
--    ins:_updateGroundInfo(ins:getIndexKey(self),true)
--end
----Other's land information
--function BuildingInformationCtrl:_clickOtherGroundBtn(ins)
--    PlayMusEff(1002)
--    --Change the position of the check box
--    ins.chooseBoxImg.transform:SetParent(self.transform)
--    ins.chooseBoxImg.transform.localPosition = Vector3(0,0,0)
--    ins:_updateGroundInfo(ins:getIndexKey(self),false)
--end
--Refresh plot information
function BuildingInformationCtrl:_updateGroundInfo(isShow)
    --TODO:Building land information only distinguishes between yourself and others isShow is true is yourself, flase is others
    if isShow then
        --myself
        self.mineLandInfo.transform.localScale = Vector3.one
        self.otherLandInfo.transform.localScale = Vector3.zero
        --TODO:The price display is modified to the total price of the current building scale (1*1 or 2*2 or 3*3), self.groundData[1].Data.auctionPrice, the total auction price of the large block, self.groundData[1].Data.groundNum Number of plots* Scale
        self.buyingPriceText.text = "E"..GetClientPriceString(self.groundData[1].Data.auctionPrice / self.groundData[1].Data.groundNum * self.buildingGroundNum)
    else
        --别人
        self.mineLandInfo.transform.localScale = Vector3.zero
        self.otherLandInfo.transform.localScale = Vector3.one
        self.avatarData = AvatarManger.GetSmallAvatar(self.groundOwnerData[1].faceId,self.headImg.transform,0.15)
        self.nameText.text = self.groundOwnerData[1].name
        self.companyText.text = self.groundOwnerData[1].companyName
        self.leaseTimeText.text = self.buildingSize.."×"..self.buildingSize
        if self.groundOwnerData[1].male then
            LoadSprite("Assets/CityGame/Resources/Atlas/BuildingInformation/male.png",self.genderImg,true)
        else
            LoadSprite("Assets/CityGame/Resources/Atlas/BuildingInformation/famale.png",self.genderImg,true)
        end
    end

    --When isShow is equal to true, it is a land to buy when it is false, it is a rented land --TODO: Now it does not distinguish land information, so temporarily comment out
    --[[if isShow then
        self.mineLandInfo.transform.localScale = Vector3.one
        self.otherLandInfo.transform.localScale = Vector3.zero
        --TODO:The construction time previously shown is now changed to show building prosperity
        --self.buyingTimeText.text = self:getStringTime(self.groundData[index].Data.auctionTs)
        --TODO:I used to click on each piece of land to display the information of each piece of land. After clicking, the price of the building size (1*1 price or 2*2 price or 3*3 price) was changed. When this method is called above Assignment
        --self.buyingPriceText.text = "E"..GetClientPriceString(self.groundData[index].Data.auctionPrice)
    else
        self.mineLandInfo.transform.localScale = Vector3.zero
        self.otherLandInfo.transform.localScale = Vector3.one
        self.avatarData = AvatarManger.GetSmallAvatar(self.groundOwnerData[index].faceId,self.headImg.transform,0.15)
        self.nameText.text = self.groundOwnerData[index].name
        self.companyText.text = self.groundOwnerData[index].companyName
        self.priceText.text = "E"..GetClientPriceString(self.groundData[index].Data.rent.rentPreDay)
        if self.groundOwnerData[index].male then
            LoadSprite("Assets/CityGame/Resources/Atlas/BuildingInformation/male.png",self.genderImg,false)
        else
            LoadSprite("Assets/CityGame/Resources/Atlas/BuildingInformation/famale.png",self.genderImg,false)
        end
        if self.groundData[index].Data.rent.rentDueTime == nil then
            self.leaseTimeText.text = self:getStringTime(self.groundData[index].Data.rent.rentBeginTs)
        else
            self.leaseTimeText.text = self:getStringTime(self.groundData[index].Data.rent.rentBeginTs).." - "..self:getStringTime(self.groundData[index].Data.rent.rentDueTime)
        end
    end]]
end
--Close the prompt box
function BuildingInformationCtrl:_clickBgBtn(ins)
    PlayMusEff(1002)
    ins:closeTipBox()
end
--Close the interface
function BuildingInformationCtrl:_clickCloseBtn(ins)
    PlayMusEff(1002)
    ins:closeTipBox()
    UIPanel.ClosePage()
end
---------------------------------------------------------------Callback---------------------------------------------------------------------------
--Cache building information callback
function BuildingInformationCtrl:builidngInfo(dataInfo)
    if dataInfo ~= nil then
        self.buildingInfo = dataInfo
        --Initialize UI building information
        self:initializeUiBuildingInfo()
    end
end
--Suspension callback
function BuildingInformationCtrl:closedBuildingSucceed(dataInfo)
    if dataInfo then
        UIPanel.ClosePage()
        self.switchBtn.text = GetLanguage(30010005)
        businessState = false
        Event.Brocast("SmallPop",GetLanguage(30010013), ReminderType.Succeed)
    end
end
--Successful modification of building name
function BuildingInformationCtrl:setBuildingNameSucceed(dataInfo)
    if dataInfo then
        UIPanel.ClosePage()
        self.buildingName.text = dataInfo.name
        Event.Brocast("SmallPop",GetLanguage(30010016), ReminderType.Succeed)
    end
end
--Save building prosperity
function BuildingInformationCtrl:saveBuildingProsperity(data)
    if data then
        self.prosperity = data.prosperity_value
        self.buyingTimeText.text = self.prosperity
        self.priceText.text = self.prosperity
    end
end
----------------------------------------------------------------Event function---------------------------------------------------------------------------
--Open the prompt box
function BuildingInformationCtrl:openTipBox(stringKey,position,parent)
    if isShow == false then
        if stringKey ~= nil and position ~= nil then
            self.tipBox.transform:SetParent(parent)
            self.tipBoxText.text = GetLanguage(stringKey)
            self.tipBox.transform.anchoredPosition = Vector3.New(-250,0,0)
            self.tipBox.transform.localScale = Vector3.one
        end
        isShow = true
    else
        self.tipBox.transform:SetParent(self.content)
        self.tipBoxText.text = ""
        self.tipBox.transform.localScale = Vector3.zero
        isShow = false
    end
end
--Close the prompt box (regardless of the parent node, it will be restored and closed)
function BuildingInformationCtrl:closeTipBox()
    self.tipBox.transform:SetParent(self.content)
    self.tipBoxText.text = ""
    self.tipBox.transform.localScale = Vector3.zero
    isShow = false
end
---------------------------------------------------------------------------------------------------------------------------------------------------
--Every time you open, hide all the plot buttons, use that one to open that one
function BuildingInformationCtrl:closeGroundButton()
    for key,value in pairs(self.mineLandBtnTable) do
        value.transform.localScale = Vector3.zero
    end
    for key,value in pairs(self.otherLandBtnTable) do
        value.transform.localScale = Vector3.zero
    end
end
--Get key
function BuildingInformationCtrl:getIndexKey(instance)
    for key,value in pairs(self.indexTable) do
        if value.gameObject.name == instance.name then
            return key
        end
    end
end
--Time format conversion
function BuildingInformationCtrl:getStringTime(ms)
    local timeTable = getFormatUnixTime(ms / 1000)
    local timeStr = timeTable.year.."/"..timeTable.month.."/"..timeTable.day.." "..timeTable.hour..":"..timeTable.minute
    return timeStr
end
--Cache building owner information
function BuildingInformationCtrl:SaveData(ownerData)
    if self.groundOwnerData then
        table.insert(self.groundOwnerData,ownerData[1])
    end
end