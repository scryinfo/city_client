---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Fisher.
--- DateTime: 2019/4/11 16:58
---建筑主界面仓库
BuildingWarehousePart = class("BuildingWarehousePart",BasePart)

function BuildingWarehousePart:PrefabName()
    return "BuildingWarehousePart"
end

function BuildingWarehousePart:GetDetailClass()
    return BuildingWarehouseDetailPart
end

function BuildingWarehousePart:_InitTransform()
    self:_getComponent(self.transform)
end

function BuildingWarehousePart:RefreshData(data)
    if data == nil then
        return
    end
    self.m_data = data
    self:_initFunc()
    UnitTest.Exec_now("abel_0512_materialConsumedInform", "e_materialConsumedInform")
end

function BuildingWarehousePart:_ResetTransform()
    Event.RemoveListener("partUpdateCapacity",self.updateCapacity,self)
    Event.RemoveListener("refreshWarehousePartCount",self.refreshWarehousePartCount,self)
end

function BuildingWarehousePart:_getComponent(transform)
    if transform == nil then
        return
    end
    self.topText = transform:Find("Top/topText"):GetComponent("Text")
    self.capacitySlider = transform:Find("Top/capacitySlider"):GetComponent("Slider")
    self.numberText = transform:Find("Top/capacitySlider/numberText"):GetComponent("Text")
    self.unselectTitleText = transform:Find("UnselectBtn/titleText"):GetComponent("Text")
    self.selectTitleText = transform:Find("SelectBtn/titleText"):GetComponent("Text")
end

function BuildingWarehousePart:_InitChildClick(mainPanelLuaBehaviour)
    Event.AddListener("partUpdateCapacity",self.updateCapacity,self)
    Event.AddListener("refreshWarehousePartCount",self.refreshWarehousePartCount,self)
end

function BuildingWarehousePart:_initFunc()
    self:_language()
    self:_initializeWarehouseCapacity()
end
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
--重置组件
function BuildingWarehousePart:_language()
    self.topText.text = GetLanguage(25010002)
    self.unselectTitleText.text = GetLanguage(25010001)
    self.selectTitleText.text = GetLanguage(25010001)
end
--初始化仓库容量
function BuildingWarehousePart:_initializeWarehouseCapacity()
    --缓存仓库已用容量
    self.Capacity = self:_getWarehouseCapacity(self.m_data.store)
    self.capacitySlider.maxValue = PlayerBuildingBaseData[self.m_data.info.mId].storeCapacity
    self.capacitySlider.value = self.Capacity
    self.numberText.text = self.capacitySlider.value.."/"..self.capacitySlider.maxValue
end
--计算仓库容量
function BuildingWarehousePart:_getWarehouseCapacity(dataTable)
    local warehouseNowCount = 0
    local lockedNowCount = 0
    if not dataTable.inHand then
        warehouseNowCount = 0
    else
        for key,value in pairs(dataTable.inHand) do
            warehouseNowCount = warehouseNowCount + value.n
        end
    end
    if not dataTable.locked then
        lockedNowCount = 0
    else
        for key,value in pairs(dataTable.locked) do
            lockedNowCount = lockedNowCount + value.n
        end
    end
    return warehouseNowCount + lockedNowCount
end
------------------------------------------------------------------------------------回调函数------------------------------------------------------------------------------------
--刷新生产线生产出来商品，当前的仓库容量
function BuildingWarehousePart:updateCapacity(data)
    if data ~= nil then
        self.Capacity = self.Capacity + 1
        self.capacitySlider.maxValue = PlayerBuildingBaseData[self.m_data.info.mId].storeCapacity
        self.capacitySlider.value = self.Capacity
        self.numberText.text = self.capacitySlider.value.."/"..self.capacitySlider.maxValue

        if not self.m_data.store.inHand or next(self.m_data.store.inHand) == nil then
            local goods = {}
            local key = {}
            goods.key = key
            goods.key.id = data.iKey.id
            goods.key.producerId = data.iKey.producerId
            goods.key.qty = data.iKey.qty
            goods.n = data.nowCount
            if not self.m_data.store.inHand then
                self.m_data.store.inHand = {}
            end
            self.m_data.store.inHand[#self.m_data.store.inHand + 1] = goods
        else
            for key,value in pairs(self.m_data.store.inHand) do
                if value.key.id == data.iKey.id then
                    value.n = value.n + 1
                    return
                end
            end
            local goods = {}
            local key = {}
            goods.key = key
            goods.key.id = data.iKey.id
            goods.key.producerId = data.iKey.producerId
            goods.key.qty = data.iKey.qty
            goods.n = data.nowCount
            self.m_data.store.inHand[#self.m_data.store.inHand + 1] = goods
        end
    end
end
--运输成功后，更新当前显示的数量
function BuildingWarehousePart:refreshWarehousePartCount()
    self:_initializeWarehouseCapacity()
end