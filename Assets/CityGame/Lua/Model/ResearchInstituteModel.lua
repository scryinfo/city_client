---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Tina.
--- DateTime: 2019/7/24 10:55
---

ResearchInstituteModel = class("ResearchInstituteModel",ModelBase)

function ResearchInstituteModel:initialize(insId)
    self.insId = insId
    self:OnCreate()
end

--Start event--
function ResearchInstituteModel:OnCreate()
    --Network callback registration
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","detailTechnology","gs.Technology",self.n_OnReceiveDetailTechnology)
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","startBusiness","gs.Id",self.n_OnReceiveOpenBusiness)
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","getScienceItemSpeed","gs.ScienceItemSpeed",self.n_OnReceiveResearchGetScienceItemSpeed)
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","ftyLineAddInform","gs.FtyLineAddInform",self.n_OnReceiveFtyLineAddInform)
    DataManager.ModelRegisterNetMsg(self.insId, "gscode.OpCode", "ftyLineChangeInform", "gs.LineInfo", self.n_OnReceiveGetFtyLineChangeInform)
    DataManager.ModelRegisterNetMsg(self.insId, "gscode.OpCode", "openScienceBox", "gs.ScienceBoxACK", self.n_OnReceiveOpenScienceBox)
    DataManager.ModelRegisterNetMsg(self.insId, "gscode.OpCode", "getScienceStorageData", "gs.ScienceStorageData", self.n_OnReceiveGetScienceStorageData)
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","useSciencePoint","gs.OpenScience",self.n_OnUserData) --Use points
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","buySciencePoint","gs.BuySciencePoint",self.n_OnBuyData) --Purchase points
    -- Get the recommended price of the institute
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","queryLaboratoryRecommendPrice","gs.GMRecommendPrice",self.n_OnqueryLaboratoryRecommendPrice)
end
--Remove event--
function ResearchInstituteModel:Close()
    --Network callback registration
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","detailTechnology","gs.Technology",self.n_OnReceiveDetailTechnology)
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","startBusiness","gs.Id",self.n_OnReceiveOpenBusiness)
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","getScienceItemSpeed","gs.ScienceItemSpeed",self.n_OnReceiveResearchGetScienceItemSpeed)
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","ftyLineAddInform","gs.FtyLineAddInform",self.n_OnReceiveFtyLineAddInform)
    DataManager.ModelRemoveNetMsg(self.insId, "gscode.OpCode", "ftyLineChangeInform", "gs.LineInfo", self.n_OnReceiveGetFtyLineChangeInform)
    DataManager.ModelRemoveNetMsg(self.insId, "gscode.OpCode", "openScienceBox", "gs.ScienceBoxACK", self.n_OnReceiveOpenScienceBox)
    DataManager.ModelRemoveNetMsg(self.insId, "gscode.OpCode", "getScienceStorageData", "gs.ScienceStorageData", self.n_OnReceiveGetScienceStorageData)
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","useSciencePoint","gs.OpenScience",self.n_OnUserData) --Use points
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","buySciencePoint","gs.BuySciencePoint",self.n_OnBuyData) --Purchase points
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","queryLaboratoryRecommendPrice","gs.GMRecommendPrice",self.n_OnqueryLaboratoryRecommendPrice)
end

-- Obtain building details from the server and initiate query of the institute's information
function ResearchInstituteModel:m_ReqOpenTechnology()
    DataManager.ModelSendNetMes("gscode.OpCode", "detailTechnology","gs.Id",{ id = self.insId})
end

--  Inquire the server for detailed information about the production line
function ResearchInstituteModel:m_ReqGetScienceLineData()
    DataManager.ModelSendNetMes("gscode.OpCode", "getScienceLineData","gs.Id",{ id = self.insId})
end

-- Initiate a query to the server about the production speed of technology lists (research institutes, promotion companies)
function ResearchInstituteModel:m_ReqGetScienceItemSpeed()
    DataManager.ModelSendNetMes("gscode.OpCode", "getScienceItemSpeed","gs.Id",{ id = self.insId})
end

-- Send research messages to the server
function ResearchInstituteModel:m_ReqAddScienceLine(addLine)
    FlightMainModel.OpenFlightLoading()
    DataManager.ModelSendNetMes("gscode.OpCode", "addScienceLine","gs.AddLine",addLine)
end

-- Send shelf data to the server (research institute, promotion company)
function ResearchInstituteModel:m_ReqGetScienceShelfData()
    DataManager.ModelSendNetMes("gscode.OpCode", "getScienceShelfData","gs.Id",{ id = self.insId})
end

-- Send delete production line to the server (research institute, promotion company)
function ResearchInstituteModel:m_ReqDelScienceLine(delLineId)
    DataManager.ModelSendNetMes("gscode.OpCode", "delScienceLine","gs.DelLine",{buildingId = self.insId, lineId = delLineId})
end

--Send delete production line to the server (research institute, promotion company)
function ResearchInstituteModel:m_ReqSetScienceLineOrder(id)
    DataManager.ModelSendNetMes("gscode.OpCode", "setScienceLineOrder","gs.SetLineOrder",{buildingId = self.insId, lineId = id, lineOrder = 2})
end

--  Send delete production line to the server (research institute, promotion company)
function ResearchInstituteModel:m_ReqOpenScienceBox(itemId, num)
    DataManager.ModelSendNetMes("gscode.OpCode", "openScienceBox","gs.OpenScience",{buildingId = self.insId, itemId = itemId, num = num})
end

-- Send to the server to obtain scientific and technological data warehouse data (research institute, promotion company)
function ResearchInstituteModel:m_ReqGetScienceStorageData()
    DataManager.ModelSendNetMes("gscode.OpCode", "getScienceStorageData","gs.Id",{id = self.insId})
end

-- Send to the server (research institute, promotion company)
function ResearchInstituteModel:m_ReqScienceShelfAdd(shelfAdd)
    FlightMainModel.OpenFlightLoading()
    DataManager.ModelSendNetMes("gscode.OpCode", "scienceShelfAdd","gs.ShelfAdd",shelfAdd)
end

-- Send all the delisted technologies to the server (research institute, promotion company)
function ResearchInstituteModel:m_ReqScienceShelfDel(shelfDel)
    DataManager.ModelSendNetMes("gscode.OpCode", "scienceShelfDel","gs.ShelfDel",shelfDel)
end

--Send modification listing information to the server (research institute, promotion company)
function ResearchInstituteModel:m_ReqScienceShelfSet(shelfSet)
    DataManager.ModelSendNetMes("gscode.OpCode", "scienceShelfSet","gs.ShelfSet",shelfSet)
end

--  Use points
function ResearchInstituteModel:m_userData(buildingId,typeId,num)
    DataManager.ModelSendNetMes("gscode.OpCode", "useSciencePoint","gs.OpenScience",{buildingId = buildingId,itemId = typeId,num = num})
end

-- Purchase points
function ResearchInstituteModel:m_buyData(buildingId,typeId,num,price,ownerId)
    DataManager.ModelSendNetMes("gscode.OpCode", "buySciencePoint","gs.BuySciencePoint",
            {buildingId = buildingId,item = {key = {id = typeId},n = num},price = price,buyerId = ownerId,})
end

-- Get the recommended price of the institute
function ResearchInstituteModel:m_queryLaboratoryRecommendPrice()
    DataManager.ModelSendNetMes("gscode.OpCode", "queryLaboratoryRecommendPrice","gs.QueryBuildingInfo", {buildingId = self.insId, playerId = DataManager.GetMyOwnerID()})
end
-----------------------------------------------------------Callback-----------------------------------------------------------
-- Query the information callback of the institute and refresh the data in the incoming layer
function ResearchInstituteModel:n_OnReceiveDetailTechnology(technology)
    DataManager.ControllerRpcNoRet(self.insId,"ResearchInstituteCtrl", '_receiveDetailTechnology', technology)
end

--Successful opening, request building details again
function ResearchInstituteModel:n_OnReceiveOpenBusiness(data)
    if data ~= nil and data.id == self.insId then
        self:m_ReqOpenTechnology()
        Event.Brocast("SmallPop", GetLanguage(24020018), ReminderType.Succeed)  --Prompt for successful opening
    end
end

-- Query the research information callback, pass in the ctrl layer to refresh the data
function ResearchInstituteModel:n_OnReceiveResearchGetScienceItemSpeed(scienceItemSpeed)
    Event.Brocast("c_OnReceiveResearchGetScienceItemSpeed",scienceItemSpeed)
    self:m_ReqGetScienceLineData()
end

-- Notice of additional production lines
function ResearchInstituteModel:n_OnReceiveFtyLineAddInform(newLine)
    FlightMainModel.CloseFlightLoading()
    UIPanel.ClosePage()
    self:m_ReqGetScienceLineData()
    Event.Brocast("c_OnReceiveResearchFtyLineAddInform",newLine)
end

-- Production line change push
function ResearchInstituteModel:n_OnReceiveGetFtyLineChangeInform(newLine)
    Event.Brocast("c_OnReceiveGetFtyLineChangeInform",newLine)
end

-- Open technology points (open treasure box)
function ResearchInstituteModel:n_OnReceiveOpenScienceBox(scienceBoxACK)
    Event.Brocast("c_OnReceiveOpenScienceBox",scienceBoxACK)
end

-- Obtain scientific and technological data warehouse data (research institute, promotion company)
function ResearchInstituteModel:n_OnReceiveGetScienceStorageData(scienceStorageData)
    Event.Brocast("c_OnReceiveGetScienceStorageData",scienceStorageData)
end

--Use credit callback
function ResearchInstituteModel:n_OnUserData(info)
    Event.Brocast("part_UserData",info)
    local data = {}
    data.num = info.num
    data.pointNum = info.pointNum
    ct.OpenCtrl("GetCountCtrl",data)
end

--Purchase points callback
function ResearchInstituteModel:n_OnBuyData(info)
    --self:m_detailPublicFacility(info.buildingId)
    self:m_ReqGetScienceShelfData()
    if info.buyerId == DataManager.GetMyOwnerID() then
        local data = {}
        data.num = info.item.n
        data.pointNum = info.typePointAllNum
        ct.OpenCtrl("GetCountCtrl",data)
    end
end

-- Get the recommended price of the institute
function ResearchInstituteModel:n_OnqueryLaboratoryRecommendPrice(info)
    Event.Brocast("c_OnqueryLaboratoryRecommendPrice",info)
end