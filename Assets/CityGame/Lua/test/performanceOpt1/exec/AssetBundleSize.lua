---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by cyz_scry.
--- DateTime: 2019/1/2 10:12
---
UnitTest.TestBlockStart()-------------------------------------------------------

local testcount = 2
local ResPathList = {}  --资源路径

for i = 1, testcount do
    ResPathList[i] = 'Assets/CityGame/Resources/testPng/C'..i..'.png'
end

UnitTest.Exec("abel_w19_New_AB_load", "abel_w19_New_AB_load",  function ()
    local listpath = {}
    listpath[1] = "Assets/CityGame/Resources/testPng/C1.png"
    listpath[2] = "Assets/CityGame/Resources/testPng/C2.png"
    listpath[3] = "Assets/CityGame/Resources/View/RetailShelfPanel.prefab"
    local cb = function(ins,bundleinfo)
        local pkginfo = bundleinfo
        local assert = bundleinfo.mainObject
        local bundle = bundleinfo.bundle
        local xx = 0
    end
    panelMgr:LoadPrefab_A(listpath[3], ct.getType(UnityEngine.Sprite), nil,cb) --Sprite方式加载图标
    panelMgr:LoadPrefab_A(listpath[2], ct.getType(UnityEngine.Texture), nil,cb) --Texture方式加载图标
    panelMgr:LoadPrefab_A(listpath[1], nil, nil,cb) --加载 prefab
end)

--异步加载1000个256 icon 时间测试
UnitTest.Exec("abel_w19_New_AB_Solution", "abel_w19_New_AB_Solution",  function ()
    --尺寸160的测试
    local aTester = AsyncSequenceTester:new()
    AsyncSequenceTester.recordTester(aTester)
    --初始化测试数据
    aTester.testcount = 1000
    aTester.loadCount = 0
    aTester.bundlelist = {}
    aTester.assertlist = {}
    aTester.startTime = 0
    aTester.ResPathList = ResPathList
    aTester.curPos = 1
    aTester.testSquence = {}
    aTester.resetData = function()
        local tester = AsyncSequenceTester.Tester()
        tester.startTime = 0
        tester.loadCount = 1
    end
    --异步加载测试,带回调
    local testLoadFunA = function(tester)
        local testData = AsyncSequenceTester.Tester()
        local curSeq = testData:getCurSeq()
        --ct.log('abel_w19_New_AB_Solution','testData' ..tostring(testData))
        local testData = AsyncSequenceTester.Tester()
        --ct.log('abel_w19_New_AB_Solution','testData = AsyncSequenceTester.Tester()' ..tostring(testData))
        local curSeq = testData:getCurSeq()
        --ct.log('abel_w19_New_AB_Solution','curSeq' ..tostring(curSeq))
        for i = 1, testData.testcount do
            panelMgr:LoadPrefab_A(testData.ResPathList[i], curSeq.type, testData,curSeq.cb)
        end
    end

    --加载成功后的回调
    local callback = function (testData, obj , ab)
        local testData = AsyncSequenceTester.Tester()
        local curSeq = testData:getCurSeq()
        testData.assertlist[#testData.assertlist] = obj
        --testData.assertlist[#testData.assertlist] = obj:useby(testData)
        --testData.bundlelist[#testData.bundlelist +1] = obj.bundle
        testData.loadCount = testData.loadCount + 1
        if testData.loadCount >= testData.testcount then
            local costTime = os.clock() - testData.startTime
            curSeq.excutetime = costTime
            local nextDelay = testData:getCurSeq()._nextTestDelay
            --卸载
            --local pos = #testData.bundlelist
            --while pos > 0 do
            --    if testData.bundlelist[pos] ~= nil then
            --        resMgr:UnloadAssetBundle(testData.bundlelist[pos].name, true)
            --        --UnityEngine.AssetBundle.Unload(testData.bundlelist[pos],true)
            --        table.remove(testData.bundlelist, pos)
            --        pos = pos -1
            --    end
            --end
            local timer = FrameTimer.New(function()
                testData:Nextfun()
                collectgarbage("collect")
                testData:excute()
            end, nextDelay,0)
            timer:Start()
        end
    end
    local logfun = function()
        local testData = AsyncSequenceTester.Tester()
        testData:printExcuteTime()
    end
    aTester.testSquence[1] = { fun = testLoadFunA, type = nil, _nextTestDelay = 30, cb = callback, prefun = aTester.resetData, msg = '1000个256大小的 Texture 异步加载的时间 =', excutetime = 0}
    --aTester.testSquence[2] = { fun = testLoadFunA, type = ct.getType(UnityEngine.Sprite), _nextTestDelay = 30, prefun = aTester.resetData, cb = callback, msg = '1000个256大小的 Sprite 异步加载的时间 = ',excutetime = 0}
    aTester.testSquence[3] = { fun = logfun, type = nil, _nextTestDelay = 30, msg = '统计时间 = ',excutetime = 0}

    --开始执行异步测试序列
    collectgarbage("collect")
    aTester:excute()
    --尺寸128的测试
    --[[
    测试结果
    pc
        [abel_w17_load_A_s160_n1000_time]1000个160大小的 Texture 异步加载的时间 =2.2260000000001
        [abel_w17_load_A_s160_n1000_time]1000个160大小的 Sprite 异步加载的时间 = 2.3319999999999
        *  性能差别比不大, 平均每帧可以加载 33.33/2.332 = 14.29 个
    设备
        [abel_w17_load_A_s160_n1000_time]1000个160大小的 Texture 异步加载的时间 =6.757779
        [abel_w17_load_A_s160_n1000_time]1000个160大小的 Sprite 异步加载的时间 = 6.006067
        *  设备上 Sprite 比 Texture 加载的时间还短
            * 这个结论与同步加载的结论一致？
        * 平均每帧可以加载 33.33/6.006067 = 5.555 个（texture 33.33/6.757779 = 4.932 个 ）
        * 比对同步加载
            [abel_w17_load_S_s160_n1000_time]1000个160大小的Texture同步加载的时间 = 2.265139
            [abel_w17_load_S_s160_n1000_time]1000个160大小的Sprite同步加载的时间 = 4.293647
            * Sprite异步加载总的耗时与同步加载差不多；texture 同步加载时间会少不少
            * 同步加载期间会导致程序卡顿
    --]]
end)

UnitTest.TestBlockEnd()-----------------------------------------------------------