---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xuyafang.
--- DateTime: 2018/12/5 10:15
---addLine 左右两侧的类型选择组合，包括左侧的选择和右侧的详细个数显示
AddLineTogglesMgr = class('AddLineTogglesMgr')
AddLineTogglesMgr.static.ChooseColor = Vector3.New(78, 111, 189)  --选中时显示的颜色
AddLineTogglesMgr.static.NomalColor = Vector3.New(230, 226, 205)  --未选中时显示的颜色

AddLineTogglesMgr.static.ToggleItemPath = "View/Items/AddLineChooseItems/AddLineToggleItem"  --左侧需要加载的预制
AddLineTogglesMgr.static.DetailItemPath = "View/Items/AddLineChooseItems/AddLineDetailItem"  --右侧滑动需要加载的预制
--位于哪边，左右两边具有不同意义
AddLineTogglesSideValue =
{
    Left = 0,
    Right = 1,
}
AddLineDetailItemState =
{
    Default = 0,
    ToBeInvented = 1,  --还未发明
    InventIng = 2,  --发明中
    HasInvented = 3,  --已经发明过了
    ResearchIng = 4,  --研究中
}
function AddLineTogglesMgr:initialize(viewRect, sideValue)
    self.viewRect = viewRect
    self.sideValue = sideValue

    self.typeToggleGroup = viewRect:Find("typeRoot"):GetComponent("ToggleGroup")
    self.typeContent = viewRect:Find("typeRoot/typeScroll/content")
    self.detailToggleGroup = viewRect:Find("detailRoot"):GetComponent("ToggleGroup")
    self.detailContent = viewRect:Find("detailRoot/detailScroll/content")

    self.detailPrefab = UnityEngine.Resources.Load(AddLineTogglesMgr.static.DetailItemPath)
    self.togglePrefab = UnityEngine.Resources.Load(AddLineTogglesMgr.static.ToggleItemPath)

    self.detailPrefabList = {}
    self.toggleItems = {}
    self.keyToggleItems = {}
    self.keyContentItems = {}
    --生成分组
    for i, typeItem in pairs(CompoundTypeConfig) do
        if (sideValue == AddLineTogglesSideValue.Left) and i < 2200 or (sideValue == AddLineTogglesSideValue.Right and i > 2200) then
            local go = UnityEngine.GameObject.Instantiate(self.togglePrefab)
            go.transform:SetParent(self.typeContent.transform)
            go.transform.localScale = Vector3.one
            local tempData = {name = typeItem[1].name, typeId = i, backFunc = function (typeId)
                self:_showDetails(typeId)
            end}
            local item = AddLineToggleItem:new(go.transform, tempData, self.typeToggleGroup)
            self.toggleItems[#self.toggleItems + 1] = item
            self.keyToggleItems[i] = item  --创建以typeId为key的表
        end
    end
end
--初始化
function AddLineTogglesMgr:initData(data)
    --设置默认打开的类别
    for i, item in pairs(self.toggleItems) do
        self.toggleItems[i]:showState(false)
    end
    self.toggleItems[1]:setToggleIsOn(true)

    --可能会有设置正在研究中等状态
end
--根据typeId 和 itemId 获取对应的item，并显示选中状态
function AddLineTogglesMgr:setToggleIsOnByType(itemId)
    local typeId = tonumber(string.sub(itemId, 1, 4))
    ct.log("cycle_w15_laboratory03", "------ typeId: "..typeId)

    if self.keyToggleItems[typeId] then
        self.keyToggleItems[typeId]:setToggleIsOn(true)
    end

    if self.keyContentItems[itemId] then
        self.keyContentItems[itemId]:setToggleIsOn(true)
    end
end

function AddLineTogglesMgr:_showDetails(typeId)
    self:_resetDetails()
    self.contentItems = {}

    --暂时是直接使用content下的子物体，多了的就移出content
    local data = CompoundTypeConfig[typeId]
    local count = #self.detailPrefabList - #data
    if count > 0 then
        for i = 1, count do
            self:_releaseObj(self.detailPrefabList[i - 1])
        end
    end  --将多余的预制回收隐藏

    for i, itemData in ipairs(data) do
        local go
        if self.detailPrefabList[i] then
            go = self.detailPrefabList[i]
        else
            go = UnityEngine.GameObject.Instantiate(self.detailPrefab)
            self.detailPrefabList[#self.detailPrefabList + 1] = go
        end
        go.transform:SetParent(self.detailContent.transform)
        go.transform.localScale = Vector3.one

        local tempData = {itemId = itemData.itemId, itemType = itemData.itemType, backFunc = function (itemId, rectPosition, enableShow)
            self:_setLineShow(itemId, typeId, rectPosition, enableShow)
        end}
        local item = AddLineDetailItem:new(go.transform, tempData, self.detailToggleGroup)
        self.contentItems[#self.contentItems + 1] = item
        self.keyContentItems[itemData.itemId] = item  --创建以itemId为key的详情表
    end

    for i, item in ipairs(self.contentItems) do
        self.contentItems[i]:showState(false)
    end
    self.contentItems[1]:setToggleIsOn(true)
end
--选择了某个item，显示线路
function AddLineTogglesMgr:_setLineShow(itemId, itemType, rectPosition, enableShow)
    --ctrl去处理，传的是分配表里的数据
    Event.Brocast("c_setCenterLine", itemId, itemType, rectPosition, enableShow)
    ct.log("cycle_w15_laboratory03", "选择了"..itemId)
end

--回收预制
function AddLineTogglesMgr:_releaseObj(obj)
    obj.transform:SetParent(self.detailToggleGroup.transform)
    obj.transform.localScale = Vector3.zero
    obj.transform.localPosition = Vector3.zero
end
--清空选中状态
function AddLineTogglesMgr:_resetDetails()
    if self.contentItems then
        for i, item in ipairs(self.contentItems) do
            item:cleanState()
        end
    end
end
