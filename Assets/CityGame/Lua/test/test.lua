---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by cyz_scry.
--- DateTime: 2018/8/21 11:05
---

if not CityGlobal.G_UNITTEST then return {} end

package.path = package.path .. ';./Assets/CityGame/Lua/test/?.lua'
package.path = package.path .. ';./Assets/CityGame/Lua/test/pbl/?.lua'
test = {}

require("Dbg")
local lu = require "Framework/pbl/luaunit"
require "LuaUtil"
require('test/performance/run')

require ("pbl_test")
require ("test/test_BaseOO")
require ("test/test_Mixins")
require("test/performance/luaPerformance")
require("examination")
require("metatable")



local pbl = pbl
local serpent = require("Framework/pbl/serpent")
local protoc = require "Framework/pbl/protoc"
protoc:addpath("./Assets/CityGame/Lua/pb")

function _G.test_pb()
    ----1、 获取协议id
    local msgId = pbl.enum("ascode.OpCode","login")
    ----2、 填充 protobuf 内部协议数据
    local lMsg = { account = "11"}
    ----3、 序列化成二进制数据
    local  pMsg = assert(pbl.encode("as.Login", lMsg))

    ----反序列化，取出数据
    local msg = assert(pbl.decode("as.Login",pMsg), "pbl.decode decode failed")

    logDebug("[test_pb] login.account: "..msg.account)

end

function _G.test_oo()
    local p0 = Person:new('Man01', 30)
    p0:speak()
    local p1 = AgedPerson:new('Billy the Kid', 13) -- this is equivalent to AgedPerson('Billy the Kid', 13) - the :new part is implicit
    local p2 = AgedPerson:new('Luke Skywalker', 21)
    p1:speak()
    p2:speak()
end

function _G.test_OO_Mixins()
    local bee = Bee() -- or Bee:new()
    local bat = Bat() -- or Bat:new()
    bee:fly()
    bat:fly()
end

local function check_load(chunk, name)
    local pbdata = protoc.new():compile(chunk, name)
    local ret, offset = pb.load(pbdata)
    if not ret then
        error("load error at "..offset..
                "\nproto: "..chunk..
                "\ndata: "..buffer(pbdata):tohex())
    end
end

function _G.test_pbl()
    local Login = { -- 我们定义一个addressbook里的 Person 消息
        account = "Alice"
    }

    -- 序列化成二进制数据
    local data = assert(pb.encode("as.Login", Login))

    -- 从二进制数据解析出实际消息
    local msg = { -- 我们定义一个addressbook里的 Person 消息

    }
    msg = assert(pb.decode("as.Login", data))

    -- 打印消息内容（使用了serpent开源库）
    --print(serpent.block(msg))

    check_load [[
      package ascode;
      enum Color {
         Red = 0;
         Green = 1;
         Blue = 2;
      }
      message TestEnum {
         optional Color color  = 1;
      } ]]
    local test =  pb.enum("ascode.Color", "Red")

    local val = pb.enum("ascode.OpCode", "login")

    --eq(pb.enum("ascode.OpCode", 0), "login")
    --eq(pb.enum("ascode.OpCode", "choseGameServer"), 1)
    --eq(pb.enum("ascode.OpCode", "getServerList"), 2)

    --print(serpent.block(msg))
    --
end
function _G.test_pbl()
    assert(protoc:load [[
    message Phone {
      optional string name        = 1;
      optional int64  phonenumber = 2;
    }
    message Person {
      optional string name     = 1;
      optional int32  age      = 2;
      optional string address  = 3;
      repeated Phone  contacts = 4;
    } ]])

    local data = {
        name = "ilse",
        age  = 18,
        contacts = {
            { name = "alice", phonenumber = 12312341234 },
            { name = "bob",   phonenumber = 45645674567 }
        }
    }

    local bytes = assert(pb.encode("Person", data))
    print(pbl.tohex(bytes))

    local data2 = assert(pb.decode("Person", bytes))
    print(require "Framework/pbl/serpent".block(data2))
end

function _G.test_pbl()
    --pbl_protoTest()
    --test_packed()
    --test_default()
    --test_extend()
    --test_type()
    --test_enum()
    --test_load()
    --test_slice()
    --test_buffer()
    --test_conv()
    --test_oneof()
    --test_map()
end


function test.runtest()
    lu.LuaUnit.run()
end

test.runtest()