---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/10/23/023 11:29
---

require "Common/define"
require "View/BuildingInfo/BuildingInfoToggleGroupMgr";
require('Framework/UI/UIPanel')

require "View/BuildingInfo/ItemCreatDeleteMgr"

local class = require 'Framework/class'
MunicipalCtrl = class('MunicipalCtrl',UIPanel)
UIPanel:ResgisterOpen(MunicipalCtrl) --Open the registration method.


--Constructor
function MunicipalCtrl:initialize()
    UIPanel.initialize(self,UIType.Normal,UIMode.HideOther,UICollider.None)
end

function MunicipalCtrl:bundleName()
    return "Assets/CityGame/Resources/View/MunicipalPanel.prefab";
end

function MunicipalCtrl:OnCreate(obj)
    UIPanel.OnCreate(self,obj);
end

local BuildMgr
local this
function MunicipalCtrl:Awake(go)
    this=self
    self.materialBehaviour = self.gameObject:GetComponent('LuaBehaviour');
    self.materialBehaviour:AddClick(MunicipalPanel.backBtn.gameObject,self.OnClick_backBtn,self);
    self.materialBehaviour:AddClick(MunicipalPanel.changeNameBtn.gameObject,self.OnClick_changeName,self);
    self.materialBehaviour:AddClick(MunicipalPanel.buildInfoBtn.gameObject,self.OnClick_buildInfo,self);
    self.materialBehaviour:AddClick(MunicipalPanel.stopIconRoot.gameObject,self.OnClick_prepareOpen,self);
        local data={}
        data.middleRootTran=MunicipalPanel.middleRootTran
        data.buildingType = BuildingType.Municipal
    BuildMgr=BuildingInfoToggleGroupMgr:new(MunicipalPanel.leftRootTran, MunicipalPanel.rightRootTran, self.materialBehaviour, data)
    MunicipalPanel.scrollCon=go.transform:Find("rightRoot/Advertisement/contentRoot/Scroll View/Viewport/Content")
end



function MunicipalCtrl:OnClick_buildInfo()
    Event.Brocast("c_openBuildingInfo",MunicipalPanel.lMsg.info)
end

function MunicipalCtrl:OnClick_prepareOpen(ins)
    Event.Brocast("c_beginBuildingInfo",MunicipalPanel.lMsg.info,ins.Refresh)
end

--Change name
function MunicipalCtrl:OnClick_changeName(ins)
    local data = {}
    data.titleInfo = "RENAME"
    data.tipInfo = "Modified every seven days"
    data.inputDialogPageServerType = InputDialogPageServerType.UpdateBuildingName
    data.btnCallBack = function(name)
        ---Temporary code, directly change the name
        ins:_updateName(name)
    end
    ct.OpenCtrl("InputDialogPageCtrl", data)
end
---Successful name change
function MunicipalCtrl:_updateName(name)
    MunicipalPanel.nameText.text = name
end

--return
function MunicipalCtrl:OnClick_backBtn(ins)
    UIPanel.ClosePage()

    if DataManager.GetMyOwnerID()==DataManager.GetDetailModelByID(MunicipalPanel.buildingId).buildingOwnerId then
        Event.Brocast("m_stopListenBuildingDetailInform",MunicipalPanel.buildingId)
    end

end

function  MunicipalCtrl:Hide()
    UIPanel.Hide(self)
end

function MunicipalCtrl:Close()
    UIPanel.Close(self)
end



function MunicipalCtrl:Refresh()
    this:changeData()
end


function MunicipalCtrl:changeData()
    if self.m_data then
        DataManager.OpenDetailModel(MunicipalModel,self.m_data.insId)
        DataManager.DetailModelRpcNoRet(self.m_data.insId, 'm_detailPublicFacility',self.m_data.insId)
    else
        DataManager.OpenDetailModel(MunicipalModel,MunicipalPanel.buildingId)
        DataManager.DetailModelRpcNoRet(MunicipalPanel.buildingId, 'm_detailPublicFacility',MunicipalPanel.buildingId)
    end
end

function MunicipalCtrl:c_receiveParkData(parkData)

    local model =DataManager.GetDetailModelByID(parkData.info.id)
    local lMsg=parkData
    MunicipalPanel.lMsg=lMsg

    Event.Brocast("c_GetBuildingInfo",MunicipalPanel.lMsg.info)
    Event.Brocast("c_onParkInfoValueChange",DataManager.GetMyBuildingBrands(),parkData.qty)

    if lMsg.info.state=="OPERATE" then
        MunicipalPanel.stopIconRoot.localScale=Vector3.zero
    else
        MunicipalPanel.stopIconRoot.localScale=Vector3.one
    end

    ---Is it possible to change the name
    if DataManager.GetMyOwnerID()~=model.buildingOwnerId then--others
    MunicipalPanel.changeNameBtn.localScale=Vector3.zero
    else--Self
    MunicipalPanel.changeNameBtn.localScale=Vector3.one
    end
    ---Test
    if MunicipalPanel.buildingId~=self.currentBuildingId then
    ---Clear data
    if self.pastManger then
    self:ClearData(self.pastManger)
    end
        ---Create external ads
        local creatData={model=model,buildingType=BuildingType.ProcessingFactory,lMsg=lMsg}
        model.manger:creat(ServerListCtrl.serverListBehaviour,creatData)
        ---Tag manager
        self.pastManger=model.manger
    end
    ---Mark buildingId
    self.currentBuildingId=parkData.info.id
    --Around new
    lMsg.buildingType=BuildingType.Municipal
    BuildMgr:updateInfo(lMsg)
    ---Refresh tickets
    Event.Brocast("c_TicketValueChange", model.buildingOwnerId,parkData.visitorCount)
    ---Refresh showItem
    if #model.SlotList>0 then
        Event.Brocast("c_ShowItemValueChange", model.SlotList[1].rentPreDay,#model.SlotList,model.SlotList[1].maxDayToRent)
    else
        Event.Brocast("c_ShowItemValueChange", 0,0,0)
    end
end

function MunicipalCtrl:ClearData(manger)
    DestroyListItem(manger.outAdvertisementItemList)
    DestroyListItem(manger.AdvertisementItemList)
    DestroyListItem(manger.serverMapAdvertisementItemList)
    DestroyListItem(manger.buildItemList)
    DestroyListItem(manger.goodsItemList)
    DestroyListItem(manger.addItemList)
    DestroyListItem(manger.addItemList)
    for i, v in pairs(manger.addItemInSList) do
        v=nil
    end
    manger.addItemInSList={}

    manger.AddItemID=0
end

function DestroyListItem(List)
    for i, item in pairs(List) do
       destroy(item)
    end
end