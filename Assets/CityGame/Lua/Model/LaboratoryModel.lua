---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xuyafang.
--- DateTime: 2018/11/27 17:10
---
LaboratoryModel = class('LaboratoryModel',ModelBase)
local pbl = pbl

function LaboratoryModel:initialize(insId)
    self.insId = insId
    self:_addListener()
end

--启动事件--
function LaboratoryModel:_addListener()
    --网络回调注册
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","detailLaboratory","gs.Laboratory",self.n_OnReceiveLaboratoryDetailInfo)
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","labExclusive","gs.LabExclusive",self.n_OnReceiveLabExclusive)
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","labAddLine","gs.LabAddLineACK",self.n_OnReceiveLabLineAdd)
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","labCancelLine","gs.LabCancelLine",self.n_OnReceiveDelLine)
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","labRoll","gs.LabRollACK",self.n_OnReceiveLineChange)
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","labLineChangeInform","gs.LabLineInform",self.n_OnReceivelabLineChangeInform)

    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","setSalary","gs.SetSalary",self.n_OnReceiveHouseSalaryChange)
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","startBusiness","gs.Id",self.n_OnReceiveOpenBusiness)
    ------本地的事件注册
    --Event.AddListener("m_ReqLaboratoryDetailInfo", self.m_ReqLaboratoryDetailInfo, self)
    --Event.AddListener("m_labSetting", self.m_labSetting, self)
    --Event.AddListener("m_ReqLabAddLine", self.m_ReqLabAddLine, self)
    --Event.AddListener("m_ReqLabDeleteLine", self.m_ReqLabDeleteLine, self)

end

---===================================================================================客户端请求===============================================================================
--获取建筑详情
function LaboratoryModel:m_ReqLaboratoryDetailInfo()
    DataManager.ModelSendNetMes("gscode.OpCode", "detailLaboratory","gs.Id",{ id = self.insId})
end
--关闭研究所详情推送
function LaboratoryModel:mReqCloseRetailStores()
    DataManager.ModelSendNetMes("gscode.OpCode","stopListenBuildingDetailInform","gs.Id",{id =  self.insId})
end
--设置研究是否他人可用
function LaboratoryModel:m_labSettings(exclusive)
    DataManager.ModelSendNetMes("gscode.OpCode", "labExclusive","gs.LabExclusive",
            { buildingId = self.insId ,exclusive = not exclusive})
end
--设置研究价格
function LaboratoryModel:m_labSetting( pricePreTime , sellTimes )
    DataManager.ModelSendNetMes("gscode.OpCode", "labSetting","gs.LabSetting",
            { buildingId = self.insId ,pricePreTime = pricePreTime, sellTimes = sellTimes})
end
--添加线
function LaboratoryModel:m_ReqLabAddLine( itemId, count )
    DataManager.ModelSendNetMes("gscode.OpCode", "labAddLine","gs.LabAddLine",
            { buildingId = self.insId,goodCategory = itemId,times = count })
end
--删除线
function LaboratoryModel:m_ReqLabDeleteLine(lineId)
    local lMsg = { buildingId = self.insId, lineId = lineId }
    DataManager.ModelSendNetMes("gscode.OpCode", "labCancelLine","gs.LabCancelLine",lMsg)
end
--开箱
function LaboratoryModel:m_ReqLabRoll(lineId)
    local lMsg = { buildingId = self.insId, lineId = lineId }
    DataManager.ModelSendNetMes("gscode.OpCode", "labRoll","gs.LabRoll",lMsg)
end
---===================================================================================回调===============================================================================
--研究所详情
function LaboratoryModel:n_OnReceiveLaboratoryDetailInfo(data)
    self.data = data
    self.data.probGood = self.data.probGood / 1000
    self.data.probEva = self.data.probEva / 1000

    data.totalLine = data.inProcess  --total 整合所有的生产线
    if data.totalLine == nil then
        data.totalLine = {}
    end
    --不需要显示其他人已经完成的线
    if data.completed ~= nil then
        for i, line in ipairs(data.completed) do
            if line.proposerId == DataManager.GetMyOwnerID() then
                table.insert(data.totalLine, line)
            end
        end
    end
    DataManager.ControllerRpcNoRet(self.insId,"LaboratoryCtrl", '_receiveLaboratoryDetailInfo', data)
end

--研究所设置出租
function LaboratoryModel:n_OnReceiveLabExclusive(LabExclusive)
    self:m_ReqLaboratoryDetailInfo(self.insId)
    self.data.exclusive = LabExclusive.exclusive
    Event.Brocast("SmallPop","设置成功",300)
    Event.Brocast("c_OnReceiveLabExclusive")
end

--添加研究发明线
function LaboratoryModel:n_OnReceiveLabLineAdd(msg)
    if self.data.totalLine == nil then
        self.data.totalLine = {}
    end
    table.insert(self.data.totalLine, msg.line)
    self:_removeOtherFinishLine(self.data.totalLine)
    ct.OpenCtrl("QueneCtrl",{name = "View/Laboratory/InventGoodQueneItem", data = self.data.totalLine ,insClass = InventGoodQueneItem})
end

--删除line
function LaboratoryModel:n_OnReceiveDelLine(lineData)
    --for i,line in ipairs(self.data.totalLine) do
    --    if line.id == lineData.lineId and DataManager.GetMyOwnerID() == line.proposerId then
    --        table.remove(self.data.totalLine,i)
    --    end
    --end

    --Laboratory.Line inProcessLine  重新计算队列
    self.data.totalLine = lineData.inProcessLine  --返回的数据是所欲line，包括已完成的line
    if self.data.totalLine == nil then
        self.data.totalLine = {}
    end
    self:_removeOtherFinishLine(self.data.totalLine)
    Event.Brocast("SmallPop",GetLanguage(28040016), ReminderType.Succeed)
    Event.Brocast("c_updateQuque",{data = self.data.totalLine, name = "View/Laboratory/InventGoodQueneItem"})
end
--剔除他人已经完成的线
function LaboratoryModel:_removeOtherFinishLine(lines)
    if lines == nil or #lines == 0 then
        return
    end
    for i, lineInfo in ipairs(lines) do
        local currentTime = TimeSynchronized.GetTheCurrentServerTime()
        local finishTime = lineInfo.beginProcessTs + lineInfo.times * 3600000
        if lineInfo.proposerId ~= DataManager.GetMyOwnerID() and currentTime > finishTime then
            table.remove(lines, i)  --
        end
    end
end

--开箱
function LaboratoryModel:n_OnReceiveLineChange(LabRollACK)
    local info = LabRollACK .itemId or  LabRollACK .evaPoint
    --DataManager.ControllerRpcNoRet(self.insId,"RollCtrl", '_evaResult', LabRollACK.labRollACK)
    Event.Brocast("c_InventResult", LabRollACK.labResult)

    local line
    for i, value in ipairs(self.data.totalLine) do
        if LabRollACK.lineId == value.id  then
            value.availableRoll = value.availableRoll - 1             --点击之后开启一个箱子
            value.usedRoll = value.usedRoll + 1
            line = value
            break
        end
    end
    self:n_OnReceivelabLineChangeInform({line=line},false)
end
--更新箱子
function LaboratoryModel:n_OnReceivelabLineChangeInform(lineData,isNotContine)
    local datas = {}
    for i, line in ipairs(self.data.totalLine) do
        if line.id == lineData.line.id  then
            local isFinished = lineData.line.times == (lineData.line.availableRoll + lineData.line.usedRoll)
            if lineData.line.proposerId ~= DataManager.GetMyOwnerID() and isFinished == true then
                table.remove(self.data.totalLine, i)  --别人的成果  --其实服务器不会发_(:з」∠)_但既然写了我就不改了
            else
                self.data.totalLine[i] = lineData.line
            end
            break
        end
    end
    for i, line in ipairs(self.data.totalLine) do
        local isFinished = line.times == (line.availableRoll + line.usedRoll)
        if line.availableRoll > 0 or isFinished == false then
            table.insert(datas, line)
        end
    end
    Event.Brocast("c_updateQuque",{data = datas,name = "View/Laboratory/InventGoodQueneItem"})
    if not isNotContine then
        Event.Brocast("c_creatRollItem",lineData.line)
    end
end



--员工工资改变
function LaboratoryModel:n_OnReceiveHouseSalaryChange(data)
    self.data.info.salary = data.Salary
    self.data.info.setSalaryTs = data.ts
    DataManager.ControllerRpcNoRet(self.insId,"LaboratoryCtrl", '_refreshSalary', self.data.info)
end
--开业成功，再次请求建筑详情
function LaboratoryModel:n_OnReceiveOpenBusiness(data)
    if data ~= nil and data.id == self.insId then
        self:m_ReqLaboratoryDetailInfo(self.insId)
        Event.Brocast("SmallPop", GetLanguage(24020018), 300)  --开业成功提示
    end
end
