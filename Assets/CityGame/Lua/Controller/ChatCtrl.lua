---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Tina.
--- DateTime: 2018/12/14 10:05
---

ChatCtrl = class('ChatCtrl', UIPage)
UIPage:ResgisterOpen(ChatCtrl)

function ChatCtrl:initialize()
    ct.log("tina_w9_friends", "ChatCtrl:initialize")
    UIPage.initialize(self, UIType.Normal, UIMode.NeedBack, UICollider.None)
end

function ChatCtrl:bundleName()
    ct.log("tina_w9_friends", "ChatCtrl:bundleName")
    return "ChatPanel"
end

function ChatCtrl:OnCreate(go)
    ct.log("tina_w9_friends", "ChatCtrl:OnCreate")
    --调用基类方法处理实例的数据
    UIPage.OnCreate(self, go)
end


function ChatCtrl:Awake(go)
    ct.log("tina_w9_friends", "ChatCtrl:Awake")

    --初始化管理器
    ChatCtrl.static.chatMgr = ChatMgr:new()

    --添加UI事件点击监听
    ChatCtrl.static.luaBehaviour = self.gameObject:GetComponent('LuaBehaviour')
    ChatCtrl.static.luaBehaviour:AddClick(ChatPanel.backBtn, function ()
        UIPage.ClosePage()
    end)

    ChatCtrl.static.luaBehaviour:AddClick(ChatPanel.backChatBtn, self.OnBackChat, self)
    ChatCtrl.static.luaBehaviour:AddClick(ChatPanel.expressionBtn, self.OnShowExpression, self)
    ChatCtrl.static.luaBehaviour:AddClick(ChatPanel.backExpressionBtn, self.OnBackExpression, self)
    ChatCtrl.static.luaBehaviour:AddClick(ChatPanel.sendBtn, self.OnSend, self)

    ChatPanel.worldToggle.onValueChanged:AddListener(function (isOn)
        self:_worldToggleValueChange(isOn)
    end)

    ChatPanel.friendsToggle.onValueChanged:AddListener(function (isOn)
        self:_friendsToggleValueChange(isOn)
    end)

    ChatPanel.strangersToggle.onValueChanged:AddListener(function (isOn)
        self:_strangersToggleValueChange(isOn)
    end)

    --滑动部分
        -- 显示表情Item
    ChatCtrl.static.chatMgr:_createNotice()
        -- 滑动复用部分
    self.worldSource = UnityEngine.UI.LoopScrollDataSource.New()  -- 世界聊天滑动
    self.worldSource.mProvideData = ChatCtrl.static.WorldProvideData
    self.worldSource.mClearData = ChatCtrl.static.WorldClearData

    self.friendsSource = UnityEngine.UI.LoopScrollDataSource.New()  -- 好友目录滑动
    self.friendsSource.mProvideData = ChatCtrl.static.FriendsProvideData
    self.friendsSource.mClearData = ChatCtrl.static.FriendsClearData
end

-- 刷新
function ChatCtrl:Refresh()
    ct.log("tina_w9_friends", "ChatCtrl:Refresh")
    self:_addListener()
end

function ChatCtrl:Close()

end

function ChatCtrl:_addListener()
    -- 监听Model层网络回调
    Event.AddListener("c_OnReceivePlayerInfo", self.c_OnReceivePlayerInfo, self)
    Event.AddListener("c_OnReceiveRoleCommunication", self.c_OnReceiveRoleCommunication, self)

    self:_refreshData()
end

function ChatCtrl:Hide()
    UIPage.Hide(self)
    self:_removeListener()
end

function ChatCtrl:_removeListener()
    Event.RemoveListener("c_OnReceivePlayerInfo", self.c_OnReceivePlayerInfo, self)
    Event.AddListener("c_OnReceiveRoleCommunication", self.c_OnReceiveRoleCommunication, self)
end

-- 获取界面数据
function ChatCtrl:_refreshData()
    ChatCtrl.friendInfo = {}

    local friendsBasicData = DataManager.GetMyFriends()
    if friendsBasicData[1] then
        local idTemp = {}
        for _, v in ipairs(friendsBasicData) do
            table.insert(idTemp, v.id)
        end
        Event.Brocast("m_QueryPlayerInfoChat", idTemp)
    end

    self:_refreshState()
end

-- 刷新界面的状态
function ChatCtrl:_refreshState()
    ChatPanel.backChatBtn:SetActive(false)
    ChatPanel.playerInfoRoot:SetActive(false)
    ChatPanel.expressionRoot:SetActive(false)


    if self.m_data.toggleId == 1 then  -- 打开世界分页
        ChatPanel.worldToggle.isOn = true
        --self:_worldToggleValueChange(true)
        self.channel = 0 -- 聊天频道
    elseif self.m_data.toggleId == 2 then  -- 打开好友分页
        ChatPanel.friendsToggle.isOn = true
        --self:_friendsToggleValueChange(true)
        self.channel = 1 -- 聊天频道
    elseif self.m_data.toggleId == 3 then  -- 打开陌生人分页
        ChatPanel.strangersToggle.isOn = true
        --self:_strangersToggleValueChange(true)
        self.channel = 3 -- 聊天频道
    end
end

function ChatCtrl:_worldToggleValueChange(isOn)
    ChatPanel.worldRoot:SetActive(isOn)
    ChatPanel.worldOpen:SetActive(isOn)
    ChatPanel.worldClose:SetActive(not isOn)
    ChatPanel.friendsRoot:SetActive(not  isOn)
    ChatPanel.friendsOpen:SetActive(not isOn)
    ChatPanel.friendsClose:SetActive(isOn)
    ChatPanel.strangersRoot:SetActive(not isOn)
    ChatPanel.strangersOpen:SetActive(not isOn)
    ChatPanel.strangersClose:SetActive(isOn)

    self.channel = 0 -- 世界频道
    ChatCtrl.static.chatMgr:SetRootScrollbar(1) -- ChatPanel.worldVerticalScrollbar

    local data = DataManager.GetMyChatInfo()
    ChatCtrl.static.worldInfo = {}
    local prefabInfo = {}
    local ownerId = ChatCtrl.static.chatMgr:GetOwnerId()
    for _, v in ipairs(data) do
        if v.channel == "WORLD" then
            table.insert(ChatCtrl.static.worldInfo, v)
            if ownerId == chatData.id then
                table.insert(prefabInfo, ChatCtrl.static.chatMgr.static.ChatRightItemPath)
            else
                table.insert(prefabInfo, ChatCtrl.static.chatMgr.static.ChatLeftItemPath)
            end
        end
    end

    ChatPanel.worldView:ActiveDiffItemLoop(self.worldSource, prefabInfo)
end

function ChatCtrl:_friendsToggleValueChange(isOn)
    ChatPanel.worldRoot:SetActive(not isOn)
    ChatPanel.worldOpen:SetActive(not isOn)
    ChatPanel.worldClose:SetActive(isOn)
    ChatPanel.friendsRoot:SetActive(isOn)
    ChatPanel.friendsOpen:SetActive(isOn)
    ChatPanel.friendsClose:SetActive(not isOn)
    ChatPanel.strangersRoot:SetActive(not isOn)
    ChatPanel.strangersOpen:SetActive(not isOn)
    ChatPanel.strangersClose:SetActive(isOn)

    self.channel = 1 -- 聊天频道
    ChatCtrl.static.chatMgr:SetRootScrollbar(2)
end

function ChatCtrl:_strangersToggleValueChange(isOn)
    ChatPanel.worldRoot:SetActive(not isOn)
    ChatPanel.worldOpen:SetActive(not isOn)
    ChatPanel.worldClose:SetActive(isOn)
    ChatPanel.friendsRoot:SetActive(not isOn)
    ChatPanel.friendsOpen:SetActive(not isOn)
    ChatPanel.friendsClose:SetActive(isOn)
    ChatPanel.strangersRoot:SetActive(isOn)
    ChatPanel.strangersOpen:SetActive(isOn)
    ChatPanel.strangersClose:SetActive(not isOn)

    self.channel = 3 -- 陌生人频道
end

function ChatCtrl:OnBackChat(go)
    ChatPanel.playerInfoRoot:SetActive(false)
    self:SetActive(false)
end

function ChatCtrl:OnShowExpression()
    ChatPanel.expressionRoot:SetActive(not ChatPanel.expressionRoot.activeSelf)
end

function ChatCtrl:OnBackExpression()
    ChatPanel.expressionRoot:SetActive(false)
end

function ChatCtrl:OnSend(go)
    local text = ChatPanel.chatInputField.text
    local chatStr = string.gsub(text, "^%s*(.-)%s*$", "%1")
    if string.len(chatStr) == 0 or chatStr == "" then
        Event.Brocast("SmallPop","Please enter the content.",80)
        return
    elseif string.len(chatStr) > 90 then
        Event.Brocast("SmallPop","More than 90 characters.",80)
        return
    end

    local data
    if go.channel == 0 then
        data = {msg = chatStr, channel = go.channel}
    else
        if not ChatCtrl.static.chatMgr:GetFriendsId() then
            return
        end
        data = {channelId = ChatCtrl.static.chatMgr:GetFriendsId(), msg = chatStr, channel = go.channel}
    end

    ChatPanel.chatInputField.text = ""
    Event.Brocast("m_RoleCommunication", data)
end

function ChatCtrl:_getSortDatas(data)
    local tempData = data
    table.sort(tempData, function (m, n)
        if m.b then
            return true
        else
            if n.b then
                return true
            else
                return false
            end
        end
    end)
    return tempData
end

-- 复用滑动回调函数注册
ChatCtrl.static.WorldProvideData = function(transform, idx)
    idx = idx + 1
    local data = ChatCtrl.static.worldInfo[idx]
    local ownerId = ChatCtrl.static.chatMgr:GetOwnerId()
    if ownerId == data.id then
        local item = ChatRightItem:new(idx, transform, data)
    else
        local item = ChatLeftItem:new(idx, transform, data)
    end

    if idx >= #ChatCtrl.static.worldInfo then
        ChatCtrl.static.chatMgr:StartScrollBottom()
    end
end

ChatCtrl.static.WorldClearData = function(transform)
end

ChatCtrl.static.FriendsProvideData = function(transform, idx)
    idx = idx + 1
    local item = ChatFriendsItem:new(idx, transform, false, ChatCtrl.friendInfo[idx])
end

ChatCtrl.static.FriendsClearData = function(transform)
end

-- 网络回调
function ChatCtrl:c_OnReceivePlayerInfo()
    ChatCtrl.friendInfo = self:_getSortDatas(DataManager.GetMyFriendsInfo())
    ChatPanel.friendsNum.text = tostring(#ChatCtrl.friendInfo)
    ChatPanel.friendsView:ActiveLoopScroll(self.friendsSource, #ChatCtrl.friendInfo)
end

function ChatCtrl:c_OnReceiveRoleCommunication(chatData)
    ChatCtrl.static.chatMgr:_createChatItem(chatData)
end