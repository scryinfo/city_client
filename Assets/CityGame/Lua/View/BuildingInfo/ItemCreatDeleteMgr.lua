---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/10/26/026 11:25
---
require 'View/BuildingInfo/AdvertisementItem'

require 'View/BuildingInfo/AddItem'
require'View/BuildingInfo/GoodsItem'
require'View/BuildingInfo/BuildingItem'

require'View/BuildingInfo/outAdvertisementItem'


local class = require 'Framework/class'
ItemCreatDeleteMgr = class('ItemCreatDeleteMgr')

ItemCreatDeleteMgr.advertisementItemPreb_Path="View/GoodsItem/AdvertisementItem"

ItemCreatDeleteMgr.addItemPreb_Path="View/GoodsItem/addItem"
ItemCreatDeleteMgr.goodsPreb_Path="View/GoodsItem/goodsItem"
ItemCreatDeleteMgr.buildingPreb_Path="View/GoodsItem/buildingItem"
ItemCreatDeleteMgr.outadvertisementItemPreb_Path="View/GoodsItem/outAdvertisementItem"
ItemCreatDeleteMgr.AddedItem_Path="View/GoodsItem/MapAdvertisementItem"



function ItemCreatDeleteMgr:initialize()


end
local idList={}
local typelist={}
local againtypeList={}
local metald=0
local adList={}

function ItemCreatDeleteMgr:begin()
    self.time=UnityEngine.Time.time+1

        UpdateBeat:Add(self._updateTime, self);
end
function ItemCreatDeleteMgr:Remove()
    UpdateBeat:Remove(self._updateTime,self)
end

function ItemCreatDeleteMgr:_updateTime()

    if UnityEngine.Time.time>self.time then
            for i, v in pairs(self.addItemInSList) do
                v:updateTime()
            end
        UpdateBeat:Remove(self._updateTime,self)

        self:begin()
    end
end

function ItemCreatDeleteMgr:creat(luabehaviour,creatData)
    if not  self.addedItemList then
        self.addedItemList={}
        self.selectItemList={}
        self.index=0
        self.AdvertisementDataList={}
        self.isFirst=false
        self.serverMapAdvertisementItemList={}
        self.outAdvertisementItemList={}
        self.AdvertisementItemList={}
        self.buildItemList={}
        self.goodsItemList={}
        self.addItemList={}
        self.addItemInSList={}
        self.AddItemID=0
    end
    self.transform=ManageAdvertisementPosPanel.addCon;

    self.behaviour = luabehaviour
    self.buildingData=creatData

    idList={}
    typelist={}
    metald=0
    adList={}
    againtypeList={}
    if creatData.lMsg then
        if creatData.lMsg.ad.ad then
            ---对广告进行筛选
            for i, v in pairs(creatData.lMsg.ad.ad) do
                ---已有类型
                for k, va in pairs(idList) do
                    if va==v.metaId then
                        typelist[v.metaId][v.id]=v
                        break
                    end
                end
                ---类型不同
                if v.metaId~=metald then
                    idList[v.metaId]=v.metaId
                    metald=v.metaId
                    if not typelist[v.metaId]then
                        typelist[v.metaId]={}
                    end
                    typelist[v.metaId][v.id]=v
                end
            end
            ---再分类
            for i, metaIdAd in pairs(typelist) do
                if not againtypeList[i] then
                    againtypeList[i]={}
                end
                for k, Ad in pairs(metaIdAd) do
                    if not Ad.slot then--建筑主人广告
                        if not againtypeList[i][creatData.model.buildingOwnerId] then
                            againtypeList[i][creatData.model.buildingOwnerId]={}
                        end
                        table.insert(againtypeList[i][creatData.model.buildingOwnerId],Ad)
                        metaIdAd[k]=nil
                    else--别人广告
                        if not againtypeList[i][ Ad.slot.renterId] then
                            againtypeList[i][Ad.slot.renterId]={}
                        end
                        table.insert(againtypeList[i][Ad.slot.renterId],Ad)
                        metaIdAd[k]=nil
                    end
                end
            end
        end
    end

    if creatData.buildingType == BuildingType.Municipal then---创建广告
    for metaId, persons in pairs(againtypeList) do
        for personId, ads in pairs(persons) do
            if personId==DataManager.GetMyOwnerID() then
                adList[metaId]=ads
            end
        end
    end
        self.adList=adList
    for metaId, persons in pairs(againtypeList) do
        for personId, ads in pairs(persons) do
            ads[1]["count"]=#ads
            ads[1].personId=personId
            self:_creatAdvertisementItem(ads[1])
        end
    end
    elseif creatData.buildingType == BuildingType.MunicipalManage then

        ---创建自已打的广告
        --if DataManager.GetMyOwnerID()==MunicipalModel.buildingOwnerId then--自已进入
        for metaId, persons in pairs(againtypeList) do
            for personId, ads in pairs(persons) do
                if personId==DataManager.GetMyOwnerID() then
                    adList[metaId]=ads
                end
            end
        end
        self.adList=adList
        for metaId, ads in pairs(adList) do
            ads[1]["count"]=#ads
            ads[1].ads=ads
            self:_creatserverMapAdvertisementItem(ads[1])
            --self:_creataddItem();
        end

    else---创建外部广告
    for metaId, persons in pairs(againtypeList) do
        for personId, ads in pairs(persons) do
            ads[1].personId=personId
            self:_creatoutItem(ads[1])
        end
    end
    end
end

---创建服务器映射广告
local ServerMapAdvertisementItemID=0
function ItemCreatDeleteMgr:_creatserverMapAdvertisementItem(prefabData)
    if( not self.serverMapAdvertisementINSList ) then
        self.serverMapAdvertisementINSList={}
    end

    local item=self:c_creatGoods(self.AddedItem_Path,self.transform)
    self.serverMapAdvertisementItemList[prefabData.metaId]=item
    ---给映射广告赋值数据
    local ins =serverMapAdvertisementItem:new(prefabData,item,self.behaviour,self,ServerMapAdvertisementItemID)
    self.serverMapAdvertisementINSList[prefabData.metaId]=ins
    ServerMapAdvertisementItemID=ServerMapAdvertisementItemID+1

end

---创建映射广告
local MapAdvertisementItemID=0
function ItemCreatDeleteMgr:_creatMapAdvertisementItem(prefabData)
    if(not self.MapAdvertisementItemList ) then
        self.MapAdvertisementItemList={}
    end

    local item=self:c_creatGoods(self.AddedItem_Path,self.transform)
    self.MapAdvertisementItemList[MapAdvertisementItemID]=item
    ---给映射广告赋值数据
    MapAdvertisementItem:new(prefabData,item,self.behaviour,self,MapAdvertisementItemID)
    MapAdvertisementItemID=MapAdvertisementItemID+1
end

---创建外部广告
local outAdvertisementItemID=1;
function ItemCreatDeleteMgr:_creatoutItem(prefabData)
    if(not self.outAdvertisementINSList ) then
        self.outAdvertisementINSList={}
    end
    ------创建预制
    local itemclone=self:c_creatGoods(self.outadvertisementItemPreb_Path,MunicipalPanel.scrollCon)

    self.outAdvertisementItemList[outAdvertisementItemID]=itemclone
    -----给预制赋值数据
    local Ins = outAdvertisementItem:new(prefabData,itemclone,self.behaviour,self,outAdvertisementItemID)
    if prefabData.personId==DataManager.GetMyOwnerID() then
        self.outAdvertisementINSList[prefabData.metaId]=Ins
    end
    outAdvertisementItemID=outAdvertisementItemID+1;
end


---创建广告
local AdvertisementItemID=1;
function ItemCreatDeleteMgr:_creatAdvertisementItem(prefabData)
    if(not self.AdvertisementINSList ) then
        self.AdvertisementINSList={}
    end
    ---创建预制
    local itemclone=self:c_creatGoods(self.advertisementItemPreb_Path,AdvertisementPosPanel.scrollcon)

    ---给预制赋值数据
    local ins =AdvertisementItem:new(prefabData,itemclone,self.behaviour,self,AdvertisementItemID)
    if prefabData.personId==DataManager.GetMyOwnerID() then
        self.AdvertisementINSList[prefabData.metaId]=ins
    end
    self.AdvertisementItemList[AdvertisementItemID]=itemclone
    if prefabData.personId==DataManager.GetDetailModelByID(MunicipalPanel.buildingId).buildingOwnerId then
        ins.ownerIma.localScale=Vector3.one
    end
    AdvertisementItemID=AdvertisementItemID+1;
end
---创建添加按钮

function ItemCreatDeleteMgr:_creataddItem(prefabData)

    ---创建预制
    local itemclone=self:c_creatGoods(self.addItemPreb_Path,ManageAdvertisementPosPanel.addCon)
    self.addItemList[self.AddItemID]=itemclone
    ---给预制赋值数据
    local ins =AddItem:new(prefabData,itemclone,self.behaviour,self,AddItemID)
    self.addItemInSList[self.AddItemID]=ins
    self.AddItemID=self.AddItemID+1;
    ----------------------------------------------------------------------------------------------------------
end

---创建商品广告
local goodsItemID=0
function ItemCreatDeleteMgr:_creatgoodsItem(goodsPrebData)

    ---创建预制
    local goods=self:c_creatGoods(self.goodsPreb_Path,ManageAdvertisementPosPanel.goodsCon)
    self.goodsItemList[goodsItemID]=goods
    --- ---给预制赋值数据
    GoodsItem:new(goodsPrebData,goods,self.behaviour,self,goodsItemID)
    goodsItemID=goodsItemID+1
end
---创建建筑广告
local buildItemID=0
function ItemCreatDeleteMgr:_creatbuildingItem(buildingPrebData)


    ---创建预制
    local buildings=self:c_creatGoods(self.buildingPreb_Path,ManageAdvertisementPosPanel.buildingCon)
    self.buildItemList[buildItemID]=buildings
    --- ---给预制赋值数据
    BuildingItem:new(buildingPrebData,buildings,self.behaviour,self,buildItemID)
    buildItemID=buildItemID+1
end


---生成预制
function ItemCreatDeleteMgr:c_creatGoods(path,parent)
    local prefab = UnityEngine.Resources.Load(path);
    local go = UnityEngine.GameObject.Instantiate(prefab);
    local rect = go.transform:GetComponent("RectTransform");
    go.transform:SetParent(parent);--.transform
    rect.transform.localScale = Vector3.one;
    rect.transform.localPosition=Vector3.zero
    return go
end


---删除物品
function ItemCreatDeleteMgr:_deleteGoods(ins)
    destroy(ins.ItemList[ins.id])
end





