---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xuyafang.
--- DateTime: 2018/10/25 10:44
---
ExchangeChooseWareHouseCtrl = class('ExchangeChooseWareHouseCtrl',UIPage)
UIPage:ResgisterOpen(ExchangeChooseWareHouseCtrl)

function ExchangeChooseWareHouseCtrl:initialize()
    UIPage.initialize(self, UIType.Normal, UIMode.HideOther, UICollider.None)
end

function ExchangeChooseWareHouseCtrl:bundleName()
    return "ExchangeChooseWareHouse"
end

function ExchangeChooseWareHouseCtrl:OnCreate(obj)
    UIPage.OnCreate(self, obj)
end

function ExchangeChooseWareHouseCtrl:Awake(go)
    self.luaBehaviour = go:GetComponent('LuaBehaviour');

    self.chooseWareSource = UnityEngine.UI.LoopScrollDataSource.New()
    self.chooseWareSource.mProvideData = ExchangeChooseWareHouseCtrl.static.ChooseWareProvideData
    self.chooseWareSource.mClearData = ExchangeChooseWareHouseCtrl.static.ChooseWareClearData
end

function ExchangeChooseWareHouseCtrl:Refresh()
    self:_initPanelData()
end

function ExchangeChooseWareHouseCtrl:Hide()
    UIPage.Hide(self)
    self.luaBehaviour:RemoveClick(ExchangeChooseWareHousePanel.backBtn.gameObject, self.OnClickBack, self)
end

function ExchangeChooseWareHouseCtrl:Close()
    --ExchangeDetailPanel.toggle01.onValueChanged:RemoveAllListeners()
end

function ExchangeChooseWareHouseCtrl:_initPanelData()
    self.luaBehaviour:AddClick(ExchangeChooseWareHousePanel.backBtn.gameObject, self.OnClickBack,self)

    --卖出时的数据
    --local wareHouseTemp = {}
    --wareHouseTemp[1] = {buildingType = "House", buildingName = "Buddy001", sizeType = "Medium", isSell = true, remainCount = 10, totalCount = 99, capacityCount = 15}
    --wareHouseTemp[2] = {buildingType = "House", buildingName = "Buddy002", sizeType = "Medium", isSell = true, remainCount = 1,  totalCount = 89, capacityCount = 15}
    --wareHouseTemp[3] = {buildingType = "House", buildingName = "Buddy003", sizeType = "Medium", isSell = true, remainCount = 74, totalCount = 78, capacityCount = 15}
    --wareHouseTemp[4] = {buildingType = "House", buildingName = "Buddy004", sizeType = "Medium", isSell = true, remainCount = 3,  totalCount = 12, capacityCount = 15}
    --wareHouseTemp[5] = {buildingType = "House", buildingName = "Buddy005", sizeType = "Medium", isSell = true, remainCount = 27, totalCount = 68, capacityCount = 15}
    --ExchangeChooseWareHouseCtrl.wareHouseDatas = self:_getSortDatas(wareHouseTemp, true)
    --买入时的数据
    --local wareHouseTemp = {}
    --wareHouseTemp[1] = {buildingType = "House",   buildingName = "Buddy001", sizeType = "Medium", isSell = false, remainCount = 10, totalCount = 99, capacityCount = 15}
    --wareHouseTemp[2] = {buildingType = "Factory", buildingName = "Buddy002", sizeType = "Medium", isSell = false, remainCount = 1,  totalCount = 89, capacityCount = 5}
    --wareHouseTemp[3] = {buildingType = "House",   buildingName = "Buddy003", sizeType = "Medium", isSell = false, remainCount = 74, totalCount = 78, capacityCount = 70}
    --wareHouseTemp[4] = {buildingType = "Factory", buildingName = "Buddy004", sizeType = "Medium", isSell = false, remainCount = 3,  totalCount = 12, capacityCount = 11}
    --wareHouseTemp[5] = {buildingType = "House",   buildingName = "Buddy005", sizeType = "Medium", isSell = false, remainCount = 27, totalCount = 68, capacityCount = 60}
    --ExchangeChooseWareHouseCtrl.wareHouseDatas = self:_getSortDatas(wareHouseTemp, false)
    --
    --ExchangeChooseWareHouseCtrl.wareHouseItems = {}
    --ExchangeChooseWareHousePanel.wareHouseScroll:ActiveLoopScroll(self.chooseWareSource, #ExchangeChooseWareHouseCtrl.wareHouseDatas)

    ---临时数据
    local wareHouseTemp = {}
    for i, itemData in ipairs(PlayerTempModel.buildingsInfo) do
        wareHouseTemp[#wareHouseTemp + 1] = itemData
        wareHouseTemp.buildingType = "House"
        wareHouseTemp.buildingName = "XY"
        wareHouseTemp.sizeType = "Small"
        wareHouseTemp.isSell = false
        wareHouseTemp.remainCount = 100
        wareHouseTemp.totalCount = 100
        wareHouseTemp.capacityCount = 100
    end
    ExchangeChooseWareHouseCtrl.wareHouseDatas = self:_getSortDatas(wareHouseTemp, false)

    ExchangeChooseWareHouseCtrl.wareHouseItems = {}
    ExchangeChooseWareHousePanel.wareHouseScroll:ActiveLoopScroll(self.chooseWareSource, #ExchangeChooseWareHouseCtrl.wareHouseDatas)
end

function ExchangeChooseWareHouseCtrl:OnClickBack()
    UIPage.ClosePage()
end

---滑动复用
ExchangeChooseWareHouseCtrl.static.ChooseWareProvideData = function(transform, idx)
    idx = idx + 1
    local chooseItem = ExchangeWareHouseItem:new(ExchangeChooseWareHouseCtrl.wareHouseDatas[idx], transform)
    ExchangeChooseWareHouseCtrl.wareHouseItems[idx] = chooseItem
end
ExchangeChooseWareHouseCtrl.static.ChooseWareClearData = function(transform)
end

---sort
function ExchangeChooseWareHouseCtrl:_getSortDatas(datas, isSell)
    local tempDatas = datas
    if isSell then
        table.sort(tempDatas, function (m, n) return m.remainCount > n.remainCount end)
    else
        table.sort(tempDatas, function (m, n) return m.capacityCount > n.capacityCount end)
    end
    return tempDatas
end