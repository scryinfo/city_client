---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by password.
--- DateTime: 2019/4/13 15:57
---推广公司model
DataCompanyModel = class("DataCompanyModel",ModelBase)
local pbl = pbl

function DataCompanyModel:initialize(insId)
    self.insId = insId
    self:OnCreate()
end

function DataCompanyModel:OnCreate()
    DataManager.RegisterErrorNetMsg()
    --网络回调
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","setSalary","gs.SetSalary",self.n_OnReceiveHouseSalaryChange)
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","startBusiness","gs.Id",self.n_OnReceiveOpenBusiness)
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","detailPromotionCompany","gs.PromotionCompany",self.n_OnPublicFacility) --建筑详情
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","getScienceItemSpeed","gs.ScienceItemSpeed",self.n_OnSurveySpeed) --调查速度
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","ftyLineAddInform","gs.FtyLineAddInform",self.n_OnAddSurveyLine) --添加调查线
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","ftyLineChangeInform","gs.LineInfo",self.n_OnSurveyLineUpdData) --调查线变化推送
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","ftyDelLine","gs.DelLine",self.n_OnSurveyLineFinish) --调查线线完成
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","delScienceLine","gs.DelLine",self.n_OnDelSurveyLine) --删除调查线
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","setScienceLineOrder","gs.SetLineOrder",self.n_OnTopSurveyLine) --置顶调查线
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","usePromotionPoint","gs.OpenScience",self.n_OnUserData) --使用点数
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","buySciencePoint","gs.BuySciencePoint",self.n_OnBuyData) --购买点数
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","getScienceStorageData","gs.ScienceStorageData",self.n_OnDataBase)--获取仓库数据
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","scienceShelfAdd","gs.ShelfAdd",self.n_OnAddShelf,self)--上架
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","scienceShelfSet","gs.ShelfAdd",self.n_OnSetShelf,self)--修改上架
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","scienceShelfDel","gs.ShelfDel",self.n_OnDelShelf,self)--下架
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","queryPromotionRecommendPrice","gs.GMRecommendPrice",self.n_OnRecommendPrice,self)--推荐定价

end

function DataCompanyModel:Close()
    --清空本地UI事件
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","detailPromotionCompany","gs.PromotionCompany",self.n_OnPublicFacility) --建筑详情
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","getScienceItemSpeed","gs.ScienceItemSpeed",self.n_OnSurveySpeed) --调查速度
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","ftyLineAddInform","gs.FtyLineAddInform",self.n_OnAddSurveyLine) --添加调查线
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","ftyLineChangeInform","gs.LineInfo",self.n_OnSurveyLineUpdData) --调查线变化推送
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","ftyDelLine","gs.DelLine",self.n_OnSurveyLineFinish) --调查线线完成
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","delScienceLine","gs.DelLine",self.n_OnDelSurveyLine) --删除调查线
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","setScienceLineOrder","gs.SetLineOrder",self.n_OnTopSurveyLine) --置顶调查线
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","usePromotionPoint","gs.OpenScience",self.n_OnUserData) --使用点数
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","buySciencePoint","gs.BuySciencePoint",self.n_OnBuyData) --购买点数
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","getScienceStorageData","gs.ScienceStorageData",self.n_OnDataBase)--获取仓库数据
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","scienceShelfAdd","gs.ShelfAdd",self.n_OnAddShelf,self)--上架
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","scienceShelfSet","gs.ShelfAdd",self.n_OnSetShelf,self)--修改上架
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","scienceShelfDel","gs.ShelfDel",self.n_OnDelShelf,self)--下架
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","queryPromotionRecommendPrice","gs.GMRecommendPrice",self.n_OnRecommendPrice,self)--推荐定价
end
--客户端请求--

--获取建筑详情
function DataCompanyModel:m_detailPublicFacility(buildingId)
    --DataManager.ModelSendNetMes("gscode.OpCode", "detailPublicFacility","gs.Id",{id = buildingId})
    DataManager.ModelSendNetMes("gscode.OpCode", "detailPromotionCompany","gs.Id",{id = buildingId})
end

--获取调查速度
function DataCompanyModel:m_getSurveySpeed(buildingId)
    DataManager.ModelSendNetMes("gscode.OpCode", "getScienceItemSpeed","gs.Id",{id = buildingId})
end

--添加调查线
function DataCompanyModel:m_ReqAddScienceLine(data)
    DataManager.ModelSendNetMes("gscode.OpCode", "addScienceLine","gs.AddLine",data)
end

--删除调查线
function DataCompanyModel:m_delSurveyLine(buildingId,lineId)
    DataManager.ModelSendNetMes("gscode.OpCode", "delScienceLine","gs.DelLine",{buildingId = buildingId,lineId = lineId})
end

--置顶调查线
function DataCompanyModel:m_topSurveyLine(buildingId,lineId)
    DataManager.ModelSendNetMes("gscode.OpCode", "setScienceLineOrder","gs.SetLineOrder",{buildingId = buildingId,lineId = lineId,lineOrder = 2})
end

--使用点数
function DataCompanyModel:m_userData(buildingId,typeId,num)
    DataManager.ModelSendNetMes("gscode.OpCode", "usePromotionPoint","gs.OpenScience",{buildingId = buildingId,itemId = typeId,num = num})
end

--购买点数
function DataCompanyModel:m_buyData(buildingId,typeId,num,price,ownerId)
    DataManager.ModelSendNetMes("gscode.OpCode", "buySciencePoint","gs.BuySciencePoint",
            {buildingId = buildingId,item = {key = {id = typeId},n = num},price = price,buyerId = ownerId,})
end

--获取仓库数据
function DataCompanyModel:m_getDataBase(buildingId)
    DataManager.ModelSendNetMes("gscode.OpCode", "getScienceStorageData","gs.Id",{id = buildingId})
end

--上架
function DataCompanyModel:m_addShelf(buildingId,typeId,num,price,autoRepOn)
    DataManager.ModelSendNetMes("gscode.OpCode", "scienceShelfAdd","gs.ShelfAdd",
            {buildingId = buildingId,item = {key = {id = typeId},n = num},price = price,autoRepOn = autoRepOn})
end

--修改上架
function DataCompanyModel:m_setShelf(buildingId,typeId,num,price,autoRepOn)
    DataManager.ModelSendNetMes("gscode.OpCode", "scienceShelfSet","gs.ShelfSet",
            {buildingId = buildingId,item = {key = {id = typeId},n = num},price = price,autoRepOn = autoRepOn})
end

--下架
function DataCompanyModel:m_delShelf(buildingId,typeId,num)
    DataManager.ModelSendNetMes("gscode.OpCode", "scienceShelfDel","gs.ShelfDel",
            {buildingId = buildingId,item = {key = {id = typeId},n = num}})
end

--推荐定价
function DataCompanyModel:m_recommendPrice(buildingId,playerId)
    DataManager.ModelSendNetMes("gscode.OpCode", "queryPromotionRecommendPrice","gs.QueryBuildingInfo",
            {buildingId = buildingId,playerId = playerId})
end

--添加推广
function DataCompanyModel:m_AddPromote(buildingId,time,goodId)
   local playerId = DataManager.GetMyPersonalHomepageInfo()
   local currentTime = TimeSynchronized.GetTheCurrentServerTime()
    local lMsg = {}
    if goodId == 1300 or goodId ==1400 then
        lMsg = {sellerBuildingId = buildingId,buyerPlayerId = playerId.id,companyName = playerId.companyName,promDuration = time*3600000,promStartTs = currentTime,buildingType = goodId}
    else
        lMsg = {sellerBuildingId = buildingId,buyerPlayerId = playerId.id,companyName = playerId.companyName,promDuration = time*3600000,promStartTs = currentTime,productionType = goodId}
    end
    DataManager.ModelSendNetMes("gscode.OpCode", "adAddNewPromoOrder","gs.AdAddNewPromoOrder",lMsg)
end

--删除推广
function DataCompanyModel:m_RemovePromote(buildingId,promotionId)
    DataManager.ModelSendNetMes("gscode.OpCode", "adRemovePromoOrder","gs.AdRemovePromoOrder",{buildingId = buildingId,promotionId = promotionId})
end

--推广设置
function DataCompanyModel:m_PromotionSetting(buildingId , takeOnNewOrder , price , time)
    if price then
        price = GetServerPriceNumber(price)
    end
    if time then
        time = time*3600*1000
    end
    local lMsg = {sellerBuildingId = buildingId,pricePerHour = price,remainTime = time,takeOnNewOrder = takeOnNewOrder}
    DataManager.ModelSendNetMes("gscode.OpCode", "adjustPromoSellingSetting","gs.AdjustPromoSellingSetting",lMsg)
end

--推广列表
function DataCompanyModel:m_QueryPromote(buildingId,isSeller)
    local player = DataManager.GetMyPersonalHomepageInfo()
    local lMsg = {isSeller = isSeller , playerId = player.id , sellerBuildingId = buildingId}
    DataManager.ModelSendNetMes("gscode.OpCode", "adQueryPromotion","gs.AdQueryPromotion",lMsg)
end

--推广能力列表
function DataCompanyModel:m_queryPromoCurAbilitys(buildingId,typeIds)
    DataManager.ModelSendNetMes("gscode.OpCode", "adQueryPromoCurAbilitys","gs.AdQueryPromoCurAbilitys",{sellerBuildingId = buildingId,typeIds= typeIds})
end

--获取推广能力列表
function DataCompanyModel:m_queryPromotionItemInfo(buildingId,typeIds)
    local playerId = DataManager.GetMyOwnerID()
    DataManager.ModelSendNetMes("gscode.OpCode", "queryPromotionItemInfo","gs.QueryPromotionItemInfo",{playerId = playerId,buildingId = buildingId,typeIds= typeIds})
end

--推广历史曲线图
function DataCompanyModel:m_PromoAbilityHistory(buildingId,typeIds)
    local currentTime = TimeSynchronized.GetTheCurrentTime()    --服务器当前时间(毫秒)
    local ts = getFormatUnixTime(currentTime/1000)

    currentTime = currentTime - 24*3600000          --提前24小时
    local lMsg = {sellerBuildingId = buildingId,startTs = currentTime, typeIds = {typeIds}, recordsCount = 24 }

    DataManager.ModelSendNetMes("gscode.OpCode", "adGetPromoAbilityHistory","gs.AdGetPromoAbilityHistory",lMsg)
end

--签约曲线
function DataCompanyModel:_reqLiftCurve(buildingId)
    local msgId = pbl.enum("sscode.OpCode","queryBuildingLift")
    local lMsg = { id = buildingId }
    local pMsg = assert(pbl.encode("ss.Id", lMsg))
    CityEngineLua.Bundle:newAndSendMsgExt(msgId, pMsg, CityEngineLua._tradeNetworkInterface1)
end

--签约
function DataCompanyModel:m_GetAllMyFlowSign(buildingId)
    DataManager.ModelSendNetMes("gscode.OpCode", "adGetAllMyFlowSign","gs.GetAllMyFlowSign",{buildingId = buildingId})
end

--推荐价格
function DataCompanyModel:m_promotionGuidePrice(buildingId,playerId)
    DataManager.ModelSendNetMes("gscode.OpCode", "promotionGuidePrice","gs.PromotionMsg",{buildingId = buildingId , playerId = playerId})
end

--服务器回调
function DataCompanyModel:n_OnPublicFacility(info)
    DataManager.ControllerRpcNoRet(self.insId,"DataCompanyCtrl", '_receivePromoteCompanyDetailInfo',info)
end

--调查速度回调
function DataCompanyModel:n_OnSurveySpeed(info)
    Event.Brocast("c_SurveySpeed",info)
end

--添加调查线
function DataCompanyModel:n_OnAddSurveyLine(info)
    Event.Brocast("c_AddSurveyLien",info)
end

--调查线变化推送
function DataCompanyModel:n_OnSurveyLineUpdData(info)
    Event.Brocast("part_SurveyLineUpData",info)
end

--调查线完成
function DataCompanyModel:n_OnSurveyLineFinish(info)
   Event.Brocast("part_SurveyLineFinish",info)
   self:m_detailPublicFacility(info.buildingId)
end

--删除调查线
function DataCompanyModel:n_OnDelSurveyLine(info)
    self:m_detailPublicFacility(info.buildingId)
end

--置顶调查线
function DataCompanyModel:n_OnTopSurveyLine(info)
    self:m_detailPublicFacility(info.buildingId)
end

--使用点数回调
function DataCompanyModel:n_OnUserData(info)
    self:m_detailPublicFacility(info.buildingId)
    Event.Brocast("part_UserData",info)
    local data = {}
    data.num = info.num
    data.pointNum = info.pointNum
    ct.OpenCtrl("GetCountCtrl",data)
end

--购买点数回调
function DataCompanyModel:n_OnBuyData(info)
    self:m_detailPublicFacility(info.buildingId)
    Event.Brocast("c_BuyCount",info)
    if info.buyerId == DataManager.GetMyOwnerID() then
        local data = {}
        data.num = info.item.n
        data.pointNum = info.typePointAllNum
        ct.OpenCtrl("GetCountCtrl",data)
    end
end

--获取仓库数据回调
function DataCompanyModel:n_OnDataBase(info)
    Event.Brocast("c_DataBase",info)
end

--上架
function DataCompanyModel:n_OnAddShelf(info)
    Event.Brocast("c_AddShelf",info)
end

--修改上架
function DataCompanyModel:n_OnSetShelf(info)
    Event.Brocast("c_SetShelf",info)
end

--下架
function DataCompanyModel:n_OnDelShelf(info)
    Event.Brocast("c_DelShelf",info)
end

--推荐定价
function DataCompanyModel:n_OnRecommendPrice(info)
    Event.Brocast("c_RecommendPrice",info)
end

--删除推广回调
function DataCompanyModel:n_OnRemovePromo(info)
    DataCompanyModel:m_detailPublicFacility(info.buildingId)
    local newData = {}
    --newData = ct.deepCopy(self.data)
    newData = self.data
    if true then

    end
    if self.data and info.PromoTsChanged then
        for i, v in pairs(self.data) do
            for k, z in pairs(info.PromoTsChanged) do
                if v.promotionId == z.promotionId then
                    newData[i].createTs = z.promStartTs
                    newData[i].queneTime = z.promStartTs
                    newData[i].promStartTs = z.promStartTs
                end
            end
        end
    end
    for i, v in pairs(self.data) do
        if v.promotionId == info.promotionId then
            table.remove(newData,i)
        end
    end
    if next(newData) == nil then
        newData = nil
    end
    Event.Brocast("c_updateQuque",{name = "View/GoodsItem/QueueItem",data =newData,insClass = PromoteQueueItem})
end

--推广设置回调
function DataCompanyModel:n_OnPromotionSetting(info)
    DataCompanyModel:m_detailPublicFacility(info.sellerBuildingId)
    Event.Brocast("c_CloseSetOpenUp")
end

--员工工资改变
function DataCompanyModel:n_OnReceiveHouseSalaryChange(data)
    DataManager.ControllerRpcNoRet(self.insId,"DataCompanyCtrl", '_refreshSalary', data)
end
--开业成功，再次请求建筑详情
function DataCompanyModel:n_OnReceiveOpenBusiness(data)
    if data ~= nil and data.id == self.insId then
        self:m_detailPublicFacility(self.insId)
        Event.Brocast("SmallPop", GetLanguage(24020018), ReminderType.Succeed)  --开业成功提示
    end
end