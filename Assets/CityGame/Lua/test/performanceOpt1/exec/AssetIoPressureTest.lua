---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by cyz_scry.
--- DateTime: 2018/11/13 16:52
---
UnitTest.TestBlockStart()-------------------------------------------------------

--基本测试数据准备{
--目前的测试是1000个160*160贴图的资源IO测试
local sprite_type = CityLuaUtil.getSpriteType() --Sprite类型
local testcount = 1000  --资源加载数量
local ResPathList = {}  --资源路径
for i = 1, testcount do
    ResPathList[i] = 'TempIcon/A'..i
end

--基本测试数据准备}

--异步方式加载、卸载的内存测试,
--[[
    测试说明：
    1、 运行时只会使用这种方式加载
    2、 由于是异步的需要使用timer来延迟卸载
    3、 由于是异步的，所以只能用于测试资源加载的内存销毁情况，而不能测试资源加载的IO时延，
        IO时延测试放在后续同步加载的测试分组 abel_w17_load_unload_s160_time 中
--]]

--异步加载测试
local testLoadFun = function(inBundlelist, inAssertlist)
    for i = 1, testcount do
        panelMgr:LoadPrefab_A(ResPathList[i], nil, nil,function(self, obj ,ab)
            inBundlelist[#inBundlelist +1] = ab
            inAssertlist[#inAssertlist] = obj
        end)
    end
end

UnitTest.Exec("abel_w17_load_A_unload_force_s160_mem", "abel_w17_load_unload_s160_mem",  function ()
    local bundlelist ={}        --存放bundle的表
    local assetlist ={}
    -- unloadAllLoadedObjects 方式卸载测试
    local TestUnLoadFun_force = function(reslist )
        ct.log('abel_w17_load_A_unload_force_s160_mem','[testUnLoadFun] #reslist = '..#reslist)
        for k,v in pairs(reslist ) do
            UnityEngine.AssetBundle.Unload(v,true)
            v = nil
        end
        --如果 unloadAllLoadedObjects 为true，那么 bundle 和 asset 都可以卸载掉
    end

    local timer0 = FrameTimer.New(function()
        collectgarbage("collect")
        ct.log('abel_w17_load_A_unload_force_s160_mem','[abel_w17_load_A_unload_force_s160_mem] testLoadFun')
        testLoadFun(bundlelist, assetlist)
        local timer = FrameTimer.New(function()
            ct.log('abel_w17_load_AS_unload_No_force_s160_mem','[abel_w17_load_AS_unload_No_force_s160_mem] TestUnLoadFun_force')
            TestUnLoadFun_force(bundlelist)
            bundlelist ={}
            collectgarbage("collect")
        end, 90, 0)
        timer:Start()
    end, 10, 0)
    timer0:Start()
end)

UnitTest.Exec("abel_w17_load_AS_unload_No_force_s160_mem", "abel_w17_load_AS_unload_No_force_s160_mem",  function ()
    local bundlelist ={}        --存放bundle的表
    local assetlist ={}     --存放asset的表
    -- 非unloadAllLoadedObjects 方式卸载测试
    local TestUnLoadFun_No_Force = function(reslist )
        ct.log('abel_w17_load_AS_unload_No_force_s160_mem','[TestUnLoadFun_No_Force] #reslist = '..#reslist)
        for k,v in pairs(reslist ) do
            UnityEngine.AssetBundle.Unload(v,false)
            v = nil
        end
        for k,v in pairs(assetlist) do
            UnityEngine.Resources.UnloadAsset(v)
            GameObject.DestroyImmediate(v, true)
            v = nil
        end
        assetlist = nil
    end

    local timer0 = FrameTimer.New(function()
        collectgarbage("collect")
        ct.log('abel_w17_load_AS_unload_No_force_s160_mem','[abel_w17_load_AS_unload_No_force_s160_mem] testLoadFun')
        testLoadFun(bundlelist, assetlist)
        local timer = FrameTimer.New(function()
            ct.log('abel_w17_load_AS_unload_No_force_s160_mem','[abel_w17_load_AS_unload_No_force_s160_mem] TestUnLoadFun_No_Force')
            TestUnLoadFun_No_Force(bundlelist)
            bundlelist ={}
            collectgarbage("collect")
        end, 90, 0)
        timer:Start()
    end, 10, 0)
    timer0:Start()

    --测试结果
    --如果 unloadAllLoadedObjects 为true，那么 bundle 和 asset 都可以卸载掉
    --如果 unloadAllLoadedObjects 为false，那么 bundle 可以卸载，但是加载到内存的 asset 不能被清理掉
    --那么究竟是哪儿还在引用这些 asset ？
    --[[
    原因找到：
        原来是因为 panelMgr:LoadPrefab_A(ResPathList[i], ptype, nil,function(self, obj ,ab)
        ptype 为 Sprite ,传入这个类型，实际上相当于先 load 了 asset ，然后创建了引用该资源的 Sprite
        也就是说，  GameObject.DestroyImmediate(v, true) 实际上只销毁了 Sprite ，并没有销毁 asset
    --]]
end)

--同步方式加载、卸载的内存测试, 运行时不会使用这种方式加载，但是，这个测试可以用来明确加载不同尺寸的贴图的速度
--[[
    需要提供自定义的加载接口，要满足：
    1、 符合我们项目资源和包的命名约定
            1、 bundle名字为：
                1、 相对路径（相对 view 目录，开头没有'/'）中'/'转为'_'
                2、 扩展名为' .unity3d'
            2、 资源名文件名，不带路径和扩展名
    2、 加载bundle
    3、加载对应资源
    * 注意
        * 2、3步需要扩展一个单独的接口， 类似 panelMgr:LoadPrefab_S
        * 这个测试需要比对尺寸128和160的加载时间
--]]
UnitTest.Exec("abel_w17_load_S_unload_force_time", "abel_w17_load_S_unload_force_time",  function ()
    --异步加载测试
    local testLoadFun_S = function(reslist)
        ct.log('abel_w17_load_S_unload_force_time','[testLoadFun_S] #reslist = '..#reslist)
        for i = 1, testcount do
            --注意这里返回的值包括两个数据： asset, bundle
            reslist[#reslist+1] = panelMgr:LoadPrefab_S(ResPathList[i], nil)
        end
    end

    --尺寸128的测试
    UnitTest.PerformanceTest("abel_w17_load_S_unload_force_time","[同步加载1000个尺寸为128的执行时间]", function()
        testLoadFun_S(reslist)
    end)

    --尺寸160的测试

end)

--加载和实例化
local testLoadAndInsFun = function(pblist, inslist)
    for i = 1, testcount do
        pblist[i] = UnityEngine.Resources.Load(ResPathList[i],type)
        inslist[i] = UnityEngine.GameObject.Instantiate(pblist[i])
    end
end

--卸载
local testUnLoadAndDestoryInsFun = function(pblist, inslist)
    for i = 1, testcount do
        destroy(inslist[i])
        UnityEngine.Resources.UnloadAsset(pblist[i])
    end
end



UnitTest.Exec("abel_w17_load_s128_n1000_S_IoTime", "abel_w17_load_s128_n1000_S_IoTime",  function ()

    --load IO执行时间
    local bundlelist = {}
    local assetlist = {}
    collectgarbage("collect")
    UnitTest.PerformanceTest("abel_w17_load_s128_n1000_S_IoTime","[同步加载1000个尺寸为128的执行时间]", function()
        testLoadFun(bundlelist,assetlist)
    end)
    --[[
    --测试unload IO操作时间
    testLoadFun(reslist)
    collectgarbage("collect")
    UnitTest.PerformanceTest("abel_w17_Unload_s128_n1000_S_IoTime","[同步加载1000个尺寸为128的执行时间]", function()
        testUnLoadFun(reslist)
    end)
    --IO执行时间
    collectgarbage("collect")
    UnitTest.PerformanceTest("abel_w17_load_Instantiate_s128_n1000","[同步加载并实例化1000个尺寸为128的执行时间]", function()
        local prefablist = {}
        local inslist = {}
        testLoadAndInsFun(prefablist, inslist)
    end)
    --IO执行时间
    testLoadAndInsFun(prefablist, inslist)
    collectgarbage("collect")
    UnitTest.PerformanceTest("abel_w17_unload_Desotyr_s128_n1000","[同步卸载并销毁1000个尺寸为128的实例的执行时间]", function()
        testUnLoadAndDestoryInsFun(prefablist, inslist)
    end)
    --]]
end)



--同步加载prefab资源对比测试
UnitTest.Exec("abel_w17_load_s128_n400_Sync", "abel_w17_load_s128_n400_Sync",  function ()
    --测试数据准备{
    local testcount = 10
    local ResPathList = {}
    for i = 1, testcount do
        ResPathList[i] = 'View/TempIcon/A'..i
    end
    --测试数据准备}
    local exectime1 = UnitTest.PerformanceTest("abel_w17_load_s128_n400_Sync","[同步加载400个尺寸为128的 Icon: Resource.Load]", function()
        local prefab = UnityEngine.Resources.Load( 'View/TempIcon/Image');

        for i = 1, testcount do
            --加载 prefab 资源
            local resLoad = UnityEngine.Resources.Load(ResPathList[i])
            local go = UnityEngine.GameObject.Instantiate(resLoad)
            --go.transform:GetComponent("Image").sprite = resLoad
            local xxx = 0
        end
    end)

    local exectime1 = UnitTest.PerformanceTest("abel_w17_load_s128_n400_Sync","[同步加载400个尺寸为128的 Icon: AssetBundle.Load]", function()

    end)

    ct.OpenCtrl('TestSliderCtrl',ResPathList)
end)

--异步加载prefab资源
UnitTest.Exec("abel_w17_load_s128_n400_ASync", "abel_w17_load_s128_n400_ASync",  function ()
    UnitTest.PerformanceTest("abel_w17_load_s128_n400_ASync","[异步加载400个尺寸为128的 Icon: LoadPrefab]", function()

    end)
end)
--卸载资源测试 AssetBundle.Unload、 UnloadUnusedAssets
UnitTest.Exec("abel_w17_unload_s128_n400", "abel_w17_unload_s128_n400",  function ()
    UnitTest.PerformanceTest("abel_w17_unload_s128_n400","[异步加载400个尺寸为128的 Icon LoadPrefab]", function()

    end)
end)

--测试 Instantiate 及对应 destory 的性能开销
UnitTest.Exec("abel_w17_Instantiate_destory_s128_n400", "abel_w17_Instantiate_destory_s128_n400",  function ()
    UnitTest.PerformanceTest("abel_w17_Instantiate_destory_s128_n400","[Instantiate 及对应 destory 的性能开销]", function()

    end)
end)

--分散打包资源的加载及销毁测试
--每帧创建和销毁100个128尺寸的Icon
UnitTest.Exec("abel_w17_Icon_load_s128_n100_memory", "abel_w17_Icon_load_s128_n100_memory",  function ()
    UnitTest.PerformanceTest("abel_w17_Icon_load_s128_n100_memory","[分散打包资源的加载及销毁测试 100个128尺寸]", function()

    end)
end)

--每帧创建和销毁50个128尺寸的Icon
UnitTest.Exec("abel_w17_Icon_load_s128_n50_memory", "abel_w17_Icon_load_s128_n50_memory",  function ()
    UnitTest.PerformanceTest("abel_w17_Icon_load_s128_n50_memory","[分散打包资源的加载及销毁测试 50个128尺寸]", function()

    end)
end)

--每帧创建和销毁100个256尺寸的Icon
UnitTest.Exec("abel_w17_Icon_load_s256_n100_memory", "abel_w17_Icon_load_s256_n100_memory",  function ()
    UnitTest.PerformanceTest("abel_w17_Icon_load_s256_n100_memory","[分散打包资源的加载及销毁测试 100个128尺寸]", function()

    end)
end)
--每帧创建和销毁50个256尺寸的Icon
UnitTest.Exec("abel_w17_Icon_load_s256_n50_memory", "abel_w17_Icon_load_s128_n50_memory",  function ()
    UnitTest.PerformanceTest("abel_w17_Icon_load_s256_n50_memory","[分散打包资源的加载及销毁测试 50个128尺寸]", function()

    end)
end)

--每帧创建和销毁100个1024尺寸的Icon
UnitTest.Exec("abel_w17_Icon_load_s1024_n100_memory", "abel_w17_Icon_load_s1024_n100_memory",  function ()
    UnitTest.PerformanceTest("abel_w17_Icon_load_s1024_n100_memory","[分散打包资源的加载及销毁测试 100个1024尺寸]", function()

    end)
end)
--每帧创建和销毁50个1024尺寸的Icon
UnitTest.Exec("abel_w17_Icon_load_s1024_n50_memory", "abel_w17_Icon_load_s1024_n50_memory",  function ()
    UnitTest.PerformanceTest("abel_w17_Icon_load_s1024_n50_memory","[分散打包资源的加载及销毁测试 50个1024尺寸]", function()

    end)
end)

--每帧创建和销毁100个2048尺寸的Icon
UnitTest.Exec("abel_w17_Icon_load_s2048_n100_memory", "abel_w17_Icon_load_s2048_n100_memory",  function ()
    UnitTest.PerformanceTest("abel_w17_Icon_load_s2048_n100_memory","[分散打包资源的加载及销毁测试 100个2048尺寸]", function()

    end)
end)
--每帧创建和销毁50个2048尺寸的Icon
UnitTest.Exec("abel_w17_Icon_load_s2048_n50_memory", "abel_w17_Icon_load_s2048_n50_memory",  function ()
    UnitTest.PerformanceTest("abel_w17_Icon_load_s2048_n50_memory","[分散打包资源的加载及销毁测试 50个1024尺寸]", function()

    end)
end)

UnitTest.TestBlockEnd()-----------------------------------------------------------