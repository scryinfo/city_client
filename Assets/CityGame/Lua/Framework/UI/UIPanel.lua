---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by cyz_scry.
--- DateTime: 2018/9/27 10:09
---

require('Framework/UI/UIRoot')
local UIRoot = UIRoot
--[[
UIType = {
    Normal =1 ,
    Fixed =2 ,
    PopUp =3 ,
    None =4 ,      --独立的窗口
}

UIMode =
{
    DoNothing =1,
    HideOther =2,     -- 闭其他界面
    NeedBack =3,      -- 点击返回按钮关闭当前,不关闭其他界面(需要调整好层级关系)
    NoNeedBack =4,    -- 关闭TopBar,关闭其他界面,不加入backSequence队列
}

UICollider =
{
    None =1,      -- 显示该界面不包含碰撞背景
    Normal=2,    --碰撞透明背景
    WithBg=3,    -- 碰撞非透明背景
}
--]]
UIPanel = class('UIPanel')
UIPanel.static.m_allPages={}            --界面GameObject管理
UIPanel.static.m_currentPageNodes={}    --界面顺序管理（old）
UIPanel.static.m_instancePageNodes={}   --界面实例顺序管理（new）
UIPanel.static.m_BubblePageNodes={}     --气泡界面实例顺序管理（new）
UIPanel.static.m_FixedPageNodes={}      --固定界面实例顺序管理（new）



--API顺序
--Awake -> Active -> Refresh  -> Hide

function UIPanel:initialize()
    self:initialize(self,UIType.Normal,UIMode.DoNothing,UICollider.Normal)
end
--初始化
function UIPanel:initialize(type, mod, col)
    self.mode = mod
    self.collider = col
    self.type = type
    self.id = -1
    self.uiPath = ""
    self.gameObject = nil
    self.transform = nil
    self.isAsyncUI = false
    self.isActived = false
    self.m_data = nil
    self.data = nil
    self.delegateAsyncLoadUI = nil
    self.offset = Vector2.New(0, 0)
end


--子类需重写
--主要职责
--1.注册点击事件
--2.初始化子组件
function UIPanel:Awake(obj)
    self.gameObject = obj;
end

--子类需重写
--主要职责
--1.确认打开对应Model
function UIPanel:Refresh()
    ct.log("system","请使用UIPanel派生类自己的Refresh方法，尽量不要调用基类的 Refresh 方法")
end

--子类需重写
--主要职责
--1.显示界面【继承父类即可，亦可自己重写过度动画】
--2.初始化无网络数据
--3.注册监听事件
function UIPanel:Active()
    self.gameObject:SetActive(true);
    self.isActived = true;
end

--子类需重写
--主要职责
--1.隐藏界面【继承父类即可，亦可自己重写过度动画】
--2.注销监听事件
function UIPanel:Hide()
    self.gameObject:SetActive(false)
    self.isActived = false
end

--子类需重写
--1.清空数据
--2.从堆栈中清除界面
--3.销毁界面GameObject【继承父类即可】
function UIPanel:Close()
    destroy(self.gameObject);
end

function UIPanel:CheckIfNeedBackInner()
    if self.type == UIType.Fixed or self.type == UIType.PopUp or self.type == UIType.None then
        return false
    elseif self.mode == UIMode.NoNeedBack or self.mode == UIMode.DoNothing then
        return false
    end
    return true
end

--检查界面是否打开--TODO：修改
function UIPanel:isActive()
    local ret = self.gameObject ~= nil and self.gameObject.activeSelf
    return ret or self.isActived
end

--检查界面是否需要返回--TODO：修改
function UIPanel:CheckIfNeedBack(page)
    return page ~= nil and page:CheckIfNeedBackInner();
end

--打开页面【不修改】
function  UIPanel:ShowPageByClass(inClass,pageData)
    --pageName = inClass.bundleName()
    pageName = inClass.name
    callback = inClass.OnCreate
    if pageName == "" then
        ct.log("system","[UI] show page error with :" , pageName , " maybe nil instance.");
        return
    end
    if UIPanel.static.m_allPages == nil then
        UIPanel.static.m_allPages = {}
    end

    local pageInstance = nil;
    if UIPanel.static.m_allPages[pageName] ~= nil then
        pageInstance = UIPanel.static.m_allPages[pageName]
    else
        pageInstance = inClass:new()
        UIPanel.static.m_allPages[pageName] = pageInstance
    end
    pageInstance:PopNode(pageInstance,inClass,pageData)
    self:ShowPageInstance(pageInstance, pageData)
    return pageInstance
end

--将节点压栈,只在打开界面的时候执行
function UIPanel:PopNode(page,inClass,pageData)
    --判空
    if UIPanel.static.m_instancePageNodes == nil then
        UIPanel.static.m_instancePageNodes = {};
        if page == nil then
            ct.log("system","page popup is nil.")
            return
        end
    end
    --将界面压入栈内
    local pageNodes = UIPanel.static.m_instancePageNodes
    if pageData ~= nil and  pageData.insId ~= nil and inClass ~= nil then
        local tempPageNode  = {}
        tempPageNode.page = page
        tempPageNode.pageName = inClass
        tempPageNode.pageType = page.type
        tempPageNode.pageData = pageData
        table.insert(pageNodes,tempPageNode)
    end
end


--将参数写入self.m_data 【不修改】
function  UIPanel:ShowPageInstance(pageInstance,pageData)
    if pageData ~= nil then
        pageInstance.m_data = pageData;
    end
    --//TODO:异步处理
    --if pageInstance.isAsync then
    --    pageInstance:Show(pageInstance.OnCreate)
    --else
        pageInstance:Show(pageInstance.bundleName(), pageInstance.OnCreate);
    --end
end

--打开页面实例，调用DoShow【不修改】
function UIPanel:Show(path, callback)
    if self.gameObject == nil then
        panelMgr:CreatePanel(path, callback, self);
    else
        self:DoShow()
    end
end

--界面创建时调用【不修改】
function UIPanel:OnCreate(go)
    if self.gameObject == nil then
        go.layer = LayerMask.NameToLayer("UI");
        UnityEngine.GameObject.AddComponent(go, LuaHelper.GetType("LuaFramework.LuaBehaviour"))
        self.gameObject = go;
        assert(go, "system","[UIPanel.Show] "," 没有找到资源： ",uiPath)
        if go == nil then
            ct.log("system","[UIPanel.Show]", "资源加载失败: "..uiPath)
        end
        self:AnchorUIGameObject(go)
        self:Awake(go)
        self.isAsyncUI = false
    end
    self:DoShow()
end

--设置界面锚点【不修改】
function UIPanel:AnchorUIGameObject(ui)
    if UIRoot.Instance() == nil or ui == nil then return end
    self.gameObject = ui
    self.transform = ui.transform

    local rect = self.transform:GetComponent("RectTransform");
    if rect then
        rect:DOAnchorPosX(self.offset.x, 0)
        rect:DOAnchorPosY(self.offset.y, 0)
    end

    local anchorPos = Vector3.zero
    local sizeDel = Vector3.zero
    local scale  = Vector3.one

    local rect = ui:GetComponent("RectTransform")
    if rect ~= nil then
        anchorPos = rect.anchoredPosition
        sizeDel= rect.sizeDelta
        scale = rect.localScale
    else
        anchorPos = rect.anchoredPosition.localPosition
        scale = rect.localScale.localScale
    end

    if self.type == UIType.Fixed then
        ui.transform:SetParent(UIRoot.getFixedRoot())
    elseif self.type == UIType.Normal then
        ui.transform:SetParent(UIRoot.getNormalRoot())
    elseif self.type == UIType.PopUp then
        ui.transform:SetParent(UIRoot.getPopupRoot())
    end


    if ui:GetComponent("RectTransform") ~= nil then
        rect.anchoredPosition = anchorPos
        rect.sizeDelta = sizeDel
        rect.localScale = scale
    else
        ui.transform.localPosition = anchorPos
        ui.transform.localScale = scale
    end
end

--设置UI位置【不修改】
function UIPanel:setPosition(x,y)
    self.offset.x = x
    self.offset.y = y
    if self.transform then
        local rect = self.transform:GetComponent("RectTransform");
        if rect then
            rect:DOAnchorPosX(self.offset.x, 0)
            rect:DOAnchorPosY(self.offset.y, 0)
        end
    end
end

--DoShow，页面调用打开时调用--TODO：修改
function UIPanel:DoShow()
    self:PopNode(self)
    self:Active()
    self:Refresh()
end

--关闭m_instancePageNodes最顶层的页面
function UIPanel:ClosePopNode()
    local pageNodes = UIPanel.static.m_instancePageNodes
    pageNodes[#pageNodes].page:Hide()
    table.remove(pageNodes, #pageNodes)
end

--关闭窗口
--Normal及PopUp使用
--关闭当前最顶窗口（无论是Normal还是PopUp）
function UIPanel:ClosePage()
    local pageNodes = UIPanel.static.m_instancePageNodes
    --判空
    if pageNodes == nil or #pageNodes <= 1 then return;    end
    --关闭窗口
    UIPanel:ClosePopNode()
    --打开旧界面
    local NodeCount = #pageNodes
    local Node = nil
    while( NodeCount > 0 ) do
        Node = pageNodes[NodeCount]
        UIPanel:ShowPageInstance(Node.page,Node.pageData)
        --如果是已经打开的界面
        if (Node.pageType == UIType.PopUp and Node.page.isActived == true) or Node.pageType == UIType.Normal then
            break
        end
        NodeCount = NodeCount - 1
    end
end

--关闭所有窗口（到主窗口）
--Normal及PopUp使用
--关闭当前最顶窗口（无论是Normal还是PopUp）
function UIPanel:CloseAllPage()
    local pageNodes = UIPanel.static.m_instancePageNodes
    --注：不能回退到没有主界面，所以最小为1
    while( #pageNodes > 1 ) do
        UIPanel:ClosePopNode()
    end
    local Node = pageNodes[#pageNodes]
    UIPanel:ShowPageInstance(Node.page,Node.pageData)
end

--回退到指定窗口   注：不能回退到没有主界面
function UIPanel:BackToPage(backtoPageName,instanceID)
    local pageNodes = UIPanel.static.m_instancePageNodes
    --注：不能回退到没有主界面，所以最小为1
    local Node = pageNodes[#pageNodes]
    while( #pageNodes > 1 ) do
        if Node.pageName == backtoPageName then
            if instanceID == nil or (instanceID ~= nil and Node.pageData ~= nil and Node.pageData.insId ~= nil and instanceID == Node.pageData.insId) then
                UIPanel:ShowPageInstance(Node.page,Node.pageData)
                break
            end
        end
        UIPanel:ClosePopNode()
    end
end

--通过Ctrl名字关闭窗口实例
function UIPanel:ClosePageByName(pageName)
    if UIPanel.static.m_allPages ~= nil and UIPanel.static.m_allPages[pageName] then
        UIPanel:ClosePage(UIPanel.static.m_allPages[pageName])
    else
        ct.log("system",pageName , " havnt show yet!");
    end
end

--清空栈中所有的UI实例，销毁其对应perfab资源
--切换场景时调用，暂时用不到
function  UIPanel:ClearAllPages()
    --清空当前page
    UIPanel.static.m_instancePageNodes = nil
    UIPanel.static.m_instancePageNodes = {};

    --销毁栈中所有UI资源
    for k,v in pairs(UIPanel.static.m_allPages) do
        v:Close();
    end
    UIPanel.static.m_allPages = nil
    UIPanel.static.m_allPages = {}
end

--注册 Controller 的打开的类方法，因为打开方法是在该Controller实例化之前，所以在每个 Controller 类声明后调用就可以
--【不修改】
function UIPanel:ResgisterOpen(inClass)
    Event.AddListener('c_OnOpen'..inClass.name, function (data)
        UIPanel:ShowPageByClass(inClass,data)
    end);
end


































