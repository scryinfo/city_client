---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Fisher.
--- DateTime: 2019/4/19 10:34
---Shelf details popup
ShelfBoxCtrl = class('ShelfBoxCtrl',UIPanel)
UIPanel:ResgisterOpen(ShelfBoxCtrl)

local isShow = false
local isShowPrice = false
local Math_Floor = math.floor
local ToNumber = tonumber
--Luxury class
local oneLevel = Vector3.New(105,174,238)
local twoLevel = Vector3.New(156,136,228)
local threeLevel = Vector3.New(243,185,45)
function ShelfBoxCtrl:initialize()
    UIPanel.initialize(self,UIType.PopUp,UIMode.DoNothing,UICollider.Normal)
end

function ShelfBoxCtrl:bundleName()
    return "Assets/CityGame/Resources/View/ShelfBoxPanel.prefab"
end

function ShelfBoxCtrl:OnCreate(obj)
    UIPanel.OnCreate(self,obj)
end

function ShelfBoxCtrl:Awake(go)
    self.gameObject = go
    self:_getComponent(go)
    self.luaBehaviour = self.gameObject:GetComponent('LuaBehaviour')
    self.luaBehaviour:AddClick(self.bgBtn.gameObject,self._clickCloseBtn,self)
    --self.luaBehaviour:AddClick(self.closeBtn.gameObject,self._clickCloseBtn,self)
    self.luaBehaviour:AddClick(self.tipBtn.gameObject,self._clickTipBtn,self)
    self.luaBehaviour:AddClick(self.addShelfBtn.gameObject,self._clickAddShelfBtn,self)
    self.luaBehaviour:AddClick(self.downShelfBtn.gameObject,self._clickDownShelfBtn,self)
    self.luaBehaviour:AddClick(self.confirmBtn.gameObject,self._clickConfirmBtn,self)
    self.luaBehaviour:AddClick(self.tipPriceBtn.gameObject,self._clickTipPriceBtn,self)
    self.luaBehaviour:AddClick(self.tipPriceBg.gameObject,self._clickTipPriceBgBtn,self)

    self.automaticSwitch.onValueChanged:AddListener(function()
        self:ToggleUndateText()
    end)
    self.numberSlider.onValueChanged:AddListener(function()
        self:UpdateInputText()
    end)
    self.numberInput.onEndEdit:AddListener(function()
        self:UpdateSlidingValue()
    end)
    --self.priceInput.onValueChanged:AddListener(function()
    --    self:InputUpdateText()
    --end)
end

function ShelfBoxCtrl:Refresh()
    self:_language()
    self:initializeUiInfoData()
end

function ShelfBoxCtrl:Hide()
    UIPanel.Hide(self)
    isShow = false
    isShowPrice = false
end
-------------------------------------------------------------Get components-------------------------------------------------------------------------------
function ShelfBoxCtrl:_getComponent(go)
    --bgBtn
    self.bgBtn = go.transform:Find("bgBtn")
    --top
    --self.closeBtn = go.transform:Find("contentRoot/top/closeBtn")
    self.topName = go.transform:Find("contentRoot/top/topName"):GetComponent("Text")
    --content  goodsInfo
    self.iconbg = go.transform:Find("contentRoot/content/goodsInfo/iconbg")
    self.iconImg = go.transform:Find("contentRoot/content/goodsInfo/iconbg/iconImg"):GetComponent("Image")
    self.nameText = go.transform:Find("contentRoot/content/goodsInfo/iconbg/nameBg/nameText"):GetComponent("Text")

    self.scoreBg = go.transform:Find("contentRoot/content/goodsInfo/scoreBg")
    self.brand = go.transform:Find("contentRoot/content/goodsInfo/scoreBg/brandBg")
    self.brandName = go.transform:Find("contentRoot/content/goodsInfo/scoreBg/brandBg/brandName"):GetComponent("Text")
    self.brandNameText = go.transform:Find("contentRoot/content/goodsInfo/scoreBg/brandBg/brandName/brandNameText"):GetComponent("Text")
    --If it is raw material, close the product attribute display, otherwise open
    --self.popularityText = go.transform:Find("contentRoot/content/goodsInfo/scoreBg/popularity/popularity"):GetComponent("Text")
    self.popularityValue = go.transform:Find("contentRoot/content/goodsInfo/scoreBg/popularity/popularityValue"):GetComponent("Text")
    --self.qualityText = go.transform:Find("contentRoot/content/goodsInfo/scoreBg/quality/quality"):GetComponent("Text")
    self.qualityValue = go.transform:Find("contentRoot/content/goodsInfo/scoreBg/quality/qualityValue"):GetComponent("Text")
    self.levelBg = go.transform:Find("contentRoot/content/goodsInfo/levelBg")
    self.levelImg = go.transform:Find("contentRoot/content/goodsInfo/levelBg/levelImg"):GetComponent("Image")
    --self.levelText = go.transform:Find("contentRoot/content/goodsInfo/levelBg/levelImg/level"):GetComponent("Text")
    self.levelValue = go.transform:Find("contentRoot/content/goodsInfo/levelBg/levelImg/levelText"):GetComponent("Text")

    self.number = go.transform:Find("contentRoot/content/goodsInfo/number")
    self.warehouse = go.transform:Find("contentRoot/content/goodsInfo/number/warehouseNumber")
    self.shelf = go.transform:Find("contentRoot/content/goodsInfo/number/shelfNumber")
    self.warehouseNumberText = go.transform:Find("contentRoot/content/goodsInfo/number/warehouseNumber/warehouseNumberText"):GetComponent("Text")
    --self.warehouseNumberTipText = go.transform:Find("contentRoot/content/goodsInfo/number/warehouseNumber/numberTipText"):GetComponent("Text")
    self.shelfNumberText = go.transform:Find("contentRoot/content/goodsInfo/number/shelfNumber/shelfNumberText"):GetComponent("Text")
    --self.shelfNumberTipText = go.transform:Find("contentRoot/content/goodsInfo/number/shelfNumber/numberTipText"):GetComponent("Text")
    --detailsInfo
    self.totalNumber = go.transform:Find("contentRoot/content/detailsInfo/totalNumber"):GetComponent("Text")
    self.totalNumberText = go.transform:Find("contentRoot/content/detailsInfo/totalNumber/bg/totalNumberText"):GetComponent("Text")
    self.numberInput = go.transform:Find("contentRoot/content/detailsInfo/numberInput"):GetComponent("InputField")
    self.numberTip = go.transform:Find("contentRoot/content/detailsInfo/numberInput/numberTip"):GetComponent("Text")
    self.numberSlider = go.transform:Find("contentRoot/content/detailsInfo/numberSlider"):GetComponent("Slider")
    --self.numberText = go.transform:Find("contentRoot/content/detailsInfo/numberSlider/HandleSlideArea/Handle/numberBg/numberText"):GetComponent("Text")
    self.tipBtn = go.transform:Find("contentRoot/content/detailsInfo/tipBtn")
    self.tipText = go.transform:Find("contentRoot/content/detailsInfo/tipText"):GetComponent("Text")
    self.tipBg = go.transform:Find("contentRoot/content/detailsInfo/tipBtn/tipBg")
    self.tipContentText = go.transform:Find("contentRoot/content/detailsInfo/tipBtn/tipBg/Text"):GetComponent("Text")
    self.automaticSwitch = go.transform:Find("contentRoot/content/detailsInfo/automaticSwitch"):GetComponent("Toggle")
    self.btnImage = go.transform:Find("contentRoot/content/detailsInfo/automaticSwitch/btnImage")
    self.priceTip = go.transform:Find("contentRoot/content/detailsInfo/price"):GetComponent("Text")
    self.priceInput = go.transform:Find("contentRoot/content/detailsInfo/priceInput"):GetComponent("InputField")
    self.advicePrice = go.transform:Find("contentRoot/content/detailsInfo/tipPriceBg/tip")
    self.advicePriceText = go.transform:Find("contentRoot/content/detailsInfo/tipPriceBg/priceText"):GetComponent("Text")
    self.CompetitivenessText = go.transform:Find("contentRoot/content/detailsInfo/Text"):GetComponent("Text")
    self.tipPriceBtn = go.transform:Find("contentRoot/content/detailsInfo/tipPriceBg/tipBtn")
    self.tipPriceBg = go.transform:Find("contentRoot/content/detailsInfo/tipPriceBg/tipBgBtn")
    self.tipPriceText = go.transform:Find("contentRoot/content/detailsInfo/tipPriceBg/tipBgBtn/tipText"):GetComponent("Text")
    self.adviceTipText = go.transform:Find("contentRoot/content/detailsInfo/adviceTip/adviceTipText"):GetComponent("Text")
    self.competitivenessSlider = go.transform:Find("contentRoot/content/detailsInfo/competitivenessSlider"):GetComponent("Slider")

    --self.tipPriceDetailsBtn = go.transform:Find("contentRoot/content/detailsInfo/tipPriceBg/tipPriceDetailsBtn")
    --bottom
    self.downShelfBtn = go.transform:Find("contentRoot/bottom/downShelfBtn")
    self.downShelfBtnText = go.transform:Find("contentRoot/bottom/downShelfBtn/text"):GetComponent("Text")
    self.addShelfBtn = go.transform:Find("contentRoot/bottom/addShelfBtn")
    self.addShelfText = go.transform:Find("contentRoot/bottom/addShelfBtn/text"):GetComponent("Text")
    self.confirmBtn = go.transform:Find("contentRoot/bottom/confirmBtn")

end
--------------------------------------------------------------------------initialization--------------------------------------------------------------------------
---Initialize UI data
function ShelfBoxCtrl:initializeUiInfoData()
    local function callbacks(guidePrice)
        self.guidePrice = guidePrice   --Recommended price
    end
    Event.Brocast("getShelfGuidePrice",self.m_data.itemId,callbacks)
    local materialKey,goodsKey = 21,22
    if Math_Floor(self.m_data.itemId / 100000) == materialKey then
        self:materialOrGoods(self.m_data.itemId)
        LoadSprite(Material[self.m_data.itemId].img,self.iconImg,false)
    elseif Math_Floor(self.m_data.itemId / 100000) == goodsKey then
        self:materialOrGoods(self.m_data.itemId)
        LoadSprite(Good[self.m_data.itemId].img,self.iconImg,false)
        --If it is a commodity, determine the raw material grade
        if Good[self.m_data.itemId].luxury == 1 then
            self.levelImg.color = getColorByVector3(oneLevel)
            self.levelValue.text = GetLanguage(25020028)
        elseif Good[self.m_data.itemId].luxury == 2 then
            self.levelImg.color = getColorByVector3(twoLevel)
            self.levelValue.text = GetLanguage(25020029)
        elseif Good[self.m_data.itemId].luxury == 3 then
            self.levelImg.color = getColorByVector3(threeLevel)
            self.levelValue.text = GetLanguage(25020030)
        end
        if not self.m_data.dataInfo.k then
            self.brandNameText.text = self.m_data.dataInfo.key.brandName
            self.popularityValue.text = self.m_data.dataInfo.key.brandScore
            self.qualityValue.text = self.m_data.dataInfo.key.qualityScore
        elseif not self.m_data.dataInfo.key then
            self.brandNameText.text = self.m_data.dataInfo.k.brandName
            self.popularityValue.text = self.m_data.dataInfo.k.brandScore
            self.qualityValue.text = self.m_data.dataInfo.k.qualityScore
        end
    end
    local function callback(warehouseNumber)
        --Cache a value, used when modifying the quantity
        self.warehouseNumber = warehouseNumber
        self.warehouseNumberText.text = "×"..warehouseNumber
    end
    local function callback1(shelfNumber)
        self.shelfNumberText.text = "×"..shelfNumber
    end
    if not self.m_data.dataInfo.key then
        Event.Brocast("getItemIdCount",self.m_data.itemId,self.m_data.dataInfo.k.producerId,callback)
        Event.Brocast("getShelfItemIdCount",self.m_data.itemId,self.m_data.dataInfo.k.producerId,callback1)
    else
        Event.Brocast("getItemIdCount",self.m_data.itemId,self.m_data.dataInfo.key.producerId,callback)
        Event.Brocast("getShelfItemIdCount",self.m_data.itemId,self.m_data.dataInfo.key.producerId,callback1)
    end
    if not self.m_data.stateType then
        --When the shelf is open
        self.downShelfBtn.transform.localScale = Vector3.one
        self.confirmBtn.transform.localScale = Vector3.one
        self.addShelfBtn.transform.localScale = Vector3.zero
        self.automaticSwitch.isOn = self.m_data.dataInfo.autoReplenish
        self.numberSlider.maxValue = self.m_data.dataInfo.n
        self.numberSlider.minValue = 1
        self.numberSlider.value = self.m_data.dataInfo.n
        self.numberInput.text = self.m_data.dataInfo.n
        self.numberInput.characterLimit = #tostring(self.m_data.dataInfo.n) + 1
        self.priceInput.text = GetClientPriceString(self.m_data.dataInfo.price)
        --self.advicePriceText.text =
        if self.automaticSwitch.isOn == true then
            self.numberSlider.transform.localScale = Vector3.zero
            self.totalNumber.transform.localScale = Vector3.one
            self.totalNumberText.text = self.m_data.dataInfo.n
            self.warehouseNumberText.text = "×"..0
            self.shelfNumberText.text = "×"..self.m_data.dataInfo.n
        else
            self.numberSlider.transform.localScale = Vector3.one
            self.totalNumber.transform.localScale = Vector3.zero
            self.shelfNumberText.text = "×"..self.m_data.dataInfo.n
            self.numberSlider.maxValue = self.m_data.dataInfo.n + self.warehouseNumber
        end
    else
        --When it is opened when it is on the shelf
        self.automaticSwitch.isOn = false
        self.numberSlider.transform.localScale = Vector3.one
        self.totalNumber.transform.localScale = Vector3.zero
        self.downShelfBtn.transform.localScale = Vector3.zero
        self.confirmBtn.transform.localScale = Vector3.zero
        self.addShelfBtn.transform.localScale = Vector3.one
        self.numberSlider.maxValue = self.m_data.dataInfo.n
        self.numberSlider.minValue = 1
        self.numberSlider.value = 1
        self.numberInput.text = "1"
        self.numberInput.characterLimit = #tostring(self.m_data.dataInfo.n) + 1
        if self.m_data.buildingType == BuildingType.MaterialFactory then
            local tempPrice = ct.CalculationMaterialSuggestPrice(self.guidePrice / 10000,self.m_data.itemId)
            self.priceInput.text = GetClientPriceString(tempPrice)
            local temp = ct.CalculationMaterialCompetitivePower(self.guidePrice, tonumber(self.priceInput.text) * 10000, self.m_data.itemId)
            if temp >= functions.maxCompetitive then
                self.advicePriceText.text = ">"..temp
            elseif temp <= functions.minCompetitive then
                self.advicePriceText.text = "<"..temp
            else
                self.advicePriceText.text = string.format("%0.1f", temp)
            end
        elseif self.m_data.buildingType == BuildingType.ProcessingFactory then
            local tempPrice = ct.CalculationProcessingSuggestPrice(self.guidePrice / 10000,self.m_data.itemId)
            self.priceInput.text = GetClientPriceString(tempPrice)
            local temp = ct.CalculationFactoryCompetitivePower(self.guidePrice, tonumber(self.priceInput.text) * 10000, self.m_data.itemId)
            if temp >= functions.maxCompetitive then
                self.advicePriceText.text = ">"..temp
            elseif temp <= functions.minCompetitive then
                self.advicePriceText.text = "<"..temp
            else
                self.advicePriceText.text = string.format("%0.1f", temp)
            end
        elseif self.m_data.buildingType == BuildingType.RetailShop then
            local tempPrice = ct.CalculationRetailSuggestPrice(self.guidePrice / 10000,self.m_data.itemId)
            self.priceInput.text = GetClientPriceString(tempPrice)
            local temp = ct.CalculationSupermarketCompetitivePower(self.guidePrice, tonumber(self.priceInput.text) * 10000, self.m_data.itemId)
            if temp >= functions.maxCompetitive then
                self.advicePriceText.text = ">"..temp
            elseif temp <= functions.minCompetitive then
                self.advicePriceText.text = "<"..temp
            else
                self.advicePriceText.text = string.format("%0.1f", temp)
            end
        end
    end
    self.nameText.text = GetLanguage(self.m_data.itemId)
    self.tipBg.transform.localScale = Vector3.zero
    self.tipPriceBg.transform.localScale = Vector3.zero

    self:_awakeSliderInput()
end
function ShelfBoxCtrl:_awakeSliderInput()
    self.priceInput.onValueChanged:AddListener(function (str)
        if str == "" or self.guidePrice == nil then
            return
        end
        local finalStr = ct.getCorrectPrice(str)
        if finalStr ~= str then
            self.priceInput.text = finalStr  --Limit user decimal input
            return
        end
        local temp
        if self.m_data.buildingType == BuildingType.MaterialFactory then
            temp = ct.CalculationMaterialCompetitivePower(self.guidePrice, tonumber(str) * 10000, self.m_data.itemId)
        elseif self.m_data.buildingType == BuildingType.ProcessingFactory then
            temp = ct.CalculationFactoryCompetitivePower(self.guidePrice, tonumber(str) * 10000, self.m_data.itemId)
        elseif self.m_data.buildingType == BuildingType.RetailShop then
            temp = ct.CalculationSupermarketCompetitivePower(self.guidePrice, tonumber(str) * 10000, self.m_data.itemId)
        end
        if temp >= functions.maxCompetitive then
            self.advicePriceText.text = ">"..temp
        elseif temp <= functions.minCompetitive then
            self.advicePriceText.text = "<"..temp
        else
            self.advicePriceText.text = string.format("%0.1f", temp)
        end
        ShelfBoxCtrl.sliderCanChange = false
        self.competitivenessSlider.value = temp
    end)
    --
    EventTriggerMgr.Get(self.competitivenessSlider.gameObject).onSelect = function()
        ShelfBoxCtrl.sliderCanChange = true
    end
    EventTriggerMgr.Get(self.competitivenessSlider.gameObject).onUpdateSelected = function()
        ShelfBoxCtrl.sliderCanChange = true
    end
    self.competitivenessSlider.onValueChanged:AddListener(function (value)
        if self.guidePrice == nil or ShelfBoxCtrl.sliderCanChange ~= true then
            return
        end
        local price
        if self.m_data.buildingType == BuildingType.MaterialFactory then
            price = ct.CalculationMateriaPrice(self.guidePrice, value,self.m_data.itemId)
        elseif self.m_data.buildingType == BuildingType.ProcessingFactory then
            price = ct.CalculationProcessingPrice(self.guidePrice, value,self.m_data.itemId)
        elseif self.m_data.buildingType == BuildingType.RetailShop then
            price = ct.CalculationRetailPrice(self.guidePrice, value,self.m_data.itemId)
        end
        self.priceInput.text = GetClientPriceString(price)
    end)
end
--Set up multiple languages
function ShelfBoxCtrl:_language()
    self.topName.text = GetLanguage(28040035)
    --self.popularityText.text = GetLanguage(25020006)
    --self.qualityText.text = GetLanguage(25020005)
    --self.levelText.text = GetLanguage(25020007)
    self.numberTip.text = GetLanguage(28040019)
    self.totalNumber.text = GetLanguage(28040019)
    self.tipText.text = GetLanguage(25060004)
    self.tipContentText.text = GetLanguage(25020027)
    self.priceTip.text = GetLanguage(25060003)
    self.CompetitivenessText.text = GetLanguage(43010001)
    --self.warehouseNumberTipText.text = GetLanguage(25020038)
    --self.shelfNumberTipText.text = GetLanguage(25020037)
    self.addShelfText.text = GetLanguage(25020035)
    self.brandName.text = GetLanguage(25020040)
    self.downShelfBtnText.text = "全部下架 >"
    self.adviceTipText.text = "Recommend:<color=#f4ad07>"..50 .."</color>"
    --self.advicePrice.text = "参考价格:"
end
--------------------------------------------------------------------------Click function--------------------------------------------------------------------------
--close
function ShelfBoxCtrl:_clickCloseBtn()
    PlayMusEff(1002)
    UIPanel.ClosePage()
end
--Open and close prompt
function ShelfBoxCtrl:_clickTipBtn(ins)
    PlayMusEff(1002)
    ins:openTipText(not isShow)
end
--Click on the shelf
function ShelfBoxCtrl:_clickAddShelfBtn(ins)
    if ins:WhetherValidShelfOp(ins) == true then
        local data = {}
        data.itemId = ins.m_data.itemId
        data.producerId = ins.m_data.dataInfo.key.producerId
        data.qty = ins.m_data.dataInfo.key.qty
        data.number = ins.numberSlider.value
        data.price = GetServerPriceNumber(ToNumber(ins.priceInput.text))
        data.switch = ins.automaticSwitch.isOn
        Event.Brocast("addShelf",data)
    end
end
--Click off shelf
function ShelfBoxCtrl:_clickDownShelfBtn(ins)
    PlayMusEff(1002)
    --If it is automatic replenishment
    if ins.m_data.dataInfo.autoReplenish == true then
        Event.Brocast("SmallPop",GetLanguage(25030018), 300)
        return
    end
    local datas = { ReminderType = ReminderType.Warning,ReminderSelectType = ReminderSelectType.Select,
                    content = GetLanguage(25060017),func = function()
            local data = {}
            data.itemId = ins.m_data.itemId
            data.number = ins.m_data.dataInfo.n
            data.producerId = ins.m_data.dataInfo.k.producerId
            data.qty = ins.m_data.dataInfo.k.qty
            Event.Brocast("downShelf",data)
        end }
    ct.OpenCtrl('NewReminderCtrl',datas)
end
--Click to confirm (modify quantity, modify price, modify automatic replenishment)
function ShelfBoxCtrl:_clickConfirmBtn(ins)
    local data = {}
    data.itemId = ins.m_data.itemId
    if not ins.m_data.dataInfo.k then
        data.producerId = ins.m_data.dataInfo.key.producerId
        data.qty = ins.m_data.dataInfo.key.qty
    else
        data.producerId = ins.m_data.dataInfo.k.producerId
        data.qty = ins.m_data.dataInfo.k.qty
    end
    data.number = ins.numberSlider.value
    data.price = GetServerPriceNumber(ToNumber(ins.priceInput.text))
    data.switch = ins.automaticSwitch.isOn
    if data.number == ins.m_data.dataInfo.n and data.price == ins.m_data.dataInfo.price and data.switch == ins.m_data.dataInfo.autoReplenish then
        UIPanel.ClosePage()
        return
    end
    --Whether the current automatic replenishment is true
    if data.switch == true then
        data.number = ins.numberSlider.maxValue
    end
    Event.Brocast("modifyShelfInfo",data)
end
--Click to open the competitiveness tips
function ShelfBoxCtrl:_clickTipPriceBtn(ins)
    ins:openTipPriceText(not isShowPrice)
end
--Click on competitiveness tips bg
function ShelfBoxCtrl:_clickTipPriceBgBtn(ins)
    ins:openTipPriceText(not isShowPrice)
end
-----------------------------------------------------------------------------------------------------------------------------------------------------------
--Initial UI display, raw materials or commodities
function ShelfBoxCtrl:materialOrGoods(itemId)
    local materialKey,goodsKey = 21,22
    if Math_Floor(itemId / 100000) == materialKey then
        self.scoreBg.transform.localScale = Vector3.zero
        self.levelBg.transform.localScale = Vector3.zero
        self.number.transform.localPosition = Vector3.New(103,-20,0)
    elseif Math_Floor(itemId / 100000) == goodsKey then
        self.scoreBg.transform.localScale = Vector3.one
        self.levelBg.transform.localScale = Vector3.one
        self.number.transform.localPosition = Vector3.New(103,-104,0)
    end
end
--Set prompt switch
function ShelfBoxCtrl:openTipText(isBool)
    if isBool then
        self.tipBg.transform.localScale = Vector3.one
    else
        self.tipBg.transform.localScale = Vector3.zero
    end
    isShow = isBool
end
--Set the competitiveness prompt switch
function ShelfBoxCtrl:openTipPriceText(isBool)
    if isBool then
        self.tipPriceBg.transform.localScale = Vector3.one
        if self.m_data.buildingType == BuildingType.MaterialFactory then
            self.tipPriceText.text = GetLanguage(43020001)..GetLanguage(43020002)
        elseif self.m_data.buildingType == BuildingType.ProcessingFactory then
            self.tipPriceText.text = GetLanguage(43030001)..GetLanguage(43030002)
        elseif self.m_data.buildingType == BuildingType.RetailShop then
            self.tipPriceText.text = GetLanguage(43040001)..GetLanguage(43040002)
        end
    else
        self.tipPriceBg.transform.localScale = Vector3.zero
        self.tipPriceText.text = ""
    end
    isShowPrice = isBool
end
--Auto replenishment button
function ShelfBoxCtrl:ToggleUndateText()
    if self.automaticSwitch.isOn == true then
        self.btnImage.localPosition = Vector2.New(45,0)
        self.numberInput.transform.localScale = Vector3.zero
        self.numberSlider.transform.localScale = Vector3.zero
        self.totalNumber.transform.localScale = Vector3.one
        self.numberSlider.value = self.numberSlider.maxValue
        self.totalNumberText.text = self.numberSlider.maxValue
    else
        self.numberInput.transform.localScale = Vector3.one
        self.numberSlider.transform.localScale = Vector3.one
        self.totalNumber.transform.localScale = Vector3.zero
        if self.m_data.dataInfo.n == 0 then
            self.numberSlider.minValue = 0
            self.numberSlider.value = 0
        else
            self.numberSlider.minValue = 1
            self.numberSlider.value = 1
        end
        self.btnImage.localPosition = Vector2.New(-45,0)
    end
end
--Number sliding update input box
function ShelfBoxCtrl:UpdateInputText()
    self.numberInput.text = self.numberSlider.value
end
--The number input box ends to update the slider
function ShelfBoxCtrl:UpdateSlidingValue()
    if self.numberInput.text == "" or ToNumber(self.numberInput.text) <= 0 then
        self.numberInput.text = 1
        self.numberSlider.value = 1
        return
    end
    if ToNumber(self.numberInput.text) > self.numberSlider.maxValue then
        self.numberInput.text = self.numberSlider.maxValue
        self.numberSlider.value = ToNumber(self.numberInput.text)
        return
    end
    self.numberSlider.value = ToNumber(self.numberInput.text)
end
--Price input box
function ShelfBoxCtrl:InputUpdateText()
    if self.priceInput.text == nil or self.priceInput.text == "" or tonumber(self.priceInput.text) == nil then
        return
    else
        if self.m_data.buildingType == BuildingType.MaterialFactory then
            self.advicePriceText.text = ct.CalculationMaterialCompetitivePower(self.guidePrice,tonumber(self.priceInput.text) * 10000,self.m_data.itemId)
        elseif self.m_data.buildingType == BuildingType.ProcessingFactory then
            self.advicePriceText.text = ct.CalculationFactoryCompetitivePower(self.averagePrice,tonumber(self.priceInput.text) * 10000,self.m_data.itemId,self.score,self.averageScore)
        elseif self.m_data.buildingType == BuildingType.RetailShop then
            self.advicePriceText.text = ct.CalculationSupermarketCompetitivePower(self.averagePrice,tonumber(self.priceInput.text) * 10000,self.m_data.itemId,
                    self.playerGoodsScore,self.playerBuildingScore,self.averageScore,self.averageBuildingScore)
        end
    end
end
--Check if the operation is successful when you put it on the shelf
function ShelfBoxCtrl:WhetherValidShelfOp(ins)
    if GetServerPriceNumber(ins.priceInput.text) == 0 or ins.priceInput.text == "" then
        Event.Brocast("SmallPop", GetLanguage(25030023), 300)
        return false
    end
    if ins.numberSlider.value == 0 then
        Event.Brocast("SmallPop", GetLanguage(25030024), 300)
        return false
    end
    return true
end