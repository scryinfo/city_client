---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xuyafang.
--- DateTime: 2018/9/19 10:17
---Manage information on the building homepage toggle mgr
BuildingInfoToggleGroupMgr = class('BuildingInfoToggleGroupMgr')

BuildingInfoToggleGroupMgr.static.ITEM_MOVE_TIME = 0.5  --item animation time

BuildingInfoToggleGroupMgr.static.LEFT_POS = Vector2.New(0, 50)
BuildingInfoToggleGroupMgr.static.RIGHT_POS = Vector2.New(0, 50)
BuildingInfoToggleGroupMgr.static.MIDDLE_POS=Vector2.New(0,50)

BuildingInfoToggleGroupMgr.static.HOUSE_OCC_PATH = "View/BuildingMainPageInfoItem/HouseOccupancyRateItem"  --Prefabricated path of residential occupancy

BuildingInfoToggleGroupMgr.static.Material_lINECHART_PATH = "View/BuildingMainPageInfoItem/LineChartRateItem" --Line chart prefabrication
BuildingInfoToggleGroupMgr.static.Material_WAREHOUSE_PATH = "View/BuildingMainPageInfoItem/WarehouseRateItem" --warehouse
BuildingInfoToggleGroupMgr.static.Material_SHELF_PATH = "View/BuildingMainPageInfoItem/ShelfRateItem"  --Shelf
BuildingInfoToggleGroupMgr.static.Material_PRODUCTION_OTHER = "View/BuildingMainPageInfoItem/HomeOtherPlayerLineItem"  --Other players production line
BuildingInfoToggleGroupMgr.static.Material_PRODUCTIONLINE = "View/BuildingMainPageInfoItem/ProductionLineItem" --production line
BuildingInfoToggleGroupMgr.static.Material_SHELF_OTHER = "View/BuildingMainPageInfoItem/HomeOtherPlayerShelfItem"  --Other players

BuildingInfoToggleGroupMgr.static.Staff_PATH = "View/BuildingMainPageInfoItem/StaffRateItem"  --Construction employees

BuildingInfoToggleGroupMgr.static.Municipal_Advertisement_Path="View/BuildingMainPageInfoItem/AdvertisementShowItem"--Advertising display
BuildingInfoToggleGroupMgr.static.Municipal_LineChart_Path = "View/BuildingMainPageInfoItem/AdLineChartItem"  --Advertising line chart
BuildingInfoToggleGroupMgr.static.Municipal_ParkInfo_Path="View/BuildingMainPageInfoItem/ParkInfoItem"--Park Information
BuildingInfoToggleGroupMgr.static.Municipal_Ticket_Path="View/BuildingMainPageInfoItem/TicketItem"--Ticket information
BuildingInfoToggleGroupMgr.static.Laboratory_Path = "View/BuildingMainPageInfoItem/LabBuildingInfoResearchItem"  --Research line
BuildingInfoToggleGroupMgr.static.BuildingBrand_Path = "View/BuildingMainPageInfoItem/BuildingBrandItem"  --Brand quality


--initialization
--The last parameter is the parent object of brand quality, optional
function BuildingInfoToggleGroupMgr:initialize(leftRect, rightRect, mainPanelLuaBehaviour, buildingData, topBrandRect)
    self.mainPanelLuaBehaviour = mainPanelLuaBehaviour
    self.leftRect = leftRect
    self.rightRect = rightRect
    self.topBrandRect = topBrandRect
    self.toggleData = buildingData
    self.leftData = {}
    self.rightData = {}
    self.middleData={}

    if buildingData.buildingType == BuildingType.House then
        self:_creatHouseInfo()
    elseif buildingData.buildingType == BuildingType.MaterialFactory then
        self:_creatMaterialInfo()
    elseif buildingData.buildingType == BuildingType.Municipal then
        self:_creatMunicipalInfo()
    elseif buildingData.buildingType == BuildingType.ProcessingFactory then
        self:_creatProcessingInfo()
    elseif buildingData.buildingType == BuildingType.Laboratory then
        self:_creatResearchLineInfo()
    elseif buildingData.buildingType == BuildingType.RetailShop then
        self:_creatRetailShop()
    end

    --Adjust the item position after creation
    self:_sortItems(1, 1)
    --self:_sortRightItems()
end
--Refresh data
function BuildingInfoToggleGroupMgr:updateInfo(buildingData)
    self.toggleData = buildingData
    if buildingData.buildingType == BuildingType.House then
        self:_creatHouseInfo()
    elseif buildingData.buildingType == BuildingType.MaterialFactory then
        self:_creatMaterialInfo()
    elseif buildingData.buildingType == BuildingType.Municipal then
        self:_creatMunicipalInfo()
    elseif buildingData.buildingType == BuildingType.ProcessingFactory then
        self:_creatProcessingInfo()
    elseif buildingData.buildingType == BuildingType.Laboratory then
        self:_creatResearchLineInfo()
    elseif buildingData.buildingType == BuildingType.RetailShop then
        self:_creatRetailShop()
    end
    self:_sortItems(1, 1)
end

--Clear lua instance
function BuildingInfoToggleGroupMgr:cleanItems()
    for i, item in ipairs(self.leftData) do
        item = nil
    end
    for i, item in ipairs(self.rightData) do
        item = nil
    end
    for i, item in ipairs(self.middleData) do
        item = nil
    end
    self.brandItem = nil
end

--Every time you open an item, you must refresh the position
function BuildingInfoToggleGroupMgr:_clickItemFunc(toggleData)
    local leftIndex, rightIndex = nil
    if toggleData.pos == BuildingInfoTogglePos.Left then
        leftIndex = toggleData.index
    elseif toggleData.pos == BuildingInfoTogglePos.Right then
        rightIndex = toggleData.index
    end
    self:_sortItems(leftIndex,rightIndex)
end

--Create views through prefabs
function BuildingInfoToggleGroupMgr:_creatItemObj(path, parent)
    local prefab = UnityEngine.Resources.Load(path)
    local go = UnityEngine.GameObject.Instantiate(prefab)
    local rect = go.transform:GetComponent("RectTransform")
    go.transform:SetParent(parent.transform)
    go.transform.localScale = Vector3.one
    rect.anchoredPosition = Vector3.zero

    return rect
end

--Refresh item location information
function BuildingInfoToggleGroupMgr:_sortItems(leftOpenIndex, rightOpenIndex)

    if leftOpenIndex ~= nil and leftOpenIndex > 0 then
        local leftPos = BuildingInfoToggleGroupMgr.static.LEFT_POS
        for key, toggleItem in pairs(self.leftData) do
            if toggleItem:getToggleIndex() == leftOpenIndex then
                leftPos = toggleItem:openToggleItem(leftPos)
            else
                leftPos = toggleItem:closeToggleItem(leftPos)
            end
        end
    end

    if rightOpenIndex ~= nil and rightOpenIndex > 0 then
        local rightPos = BuildingInfoToggleGroupMgr.static.RIGHT_POS
        for key, toggleItem in pairs(self.rightData) do
            if toggleItem:getToggleIndex() == rightOpenIndex then
                rightPos = toggleItem:openToggleItem(rightPos)
            else
                rightPos = toggleItem:closeToggleItem(rightPos)
            end
        end
    end
end

--Arrange the information on the right, you only need to arrange it once, and it is always open
function BuildingInfoToggleGroupMgr:_sortRightItems()
    local rightPos = BuildingInfoToggleGroupMgr.static.RIGHT_POS
    for key, toggleItem in pairs(self.rightData) do
        rightPos = toggleItem:openToggleItem(rightPos)
    end
end

local num=1  local temp=nil
function BuildingInfoToggleGroupMgr:_middleItem(toggleData)

    --for i, item in pairs(self.middleData) do
    --    if(item:getToggleIndex()==toggleData.index)then
    --
    --        if item==temp then
    --            if num%2==1 then
    --                item:openToggleItem()
    --                num=num+1
    --            else
    --                item:closeToggleItem()
    --                num=num+1
    --            end
    --        else
    --            num=1
    --            item:openToggleItem()
    --            num=num+1
    --            temp=item
    --        end
    --    end
    --end
end


---Create the home page left and right information, load turnover, staff, occupancy on the left, and rental on the right
--Please add in order
function BuildingInfoToggleGroupMgr:_creatHouseInfo()
    ---Line chart left 1
    local lineToggleData = { pos = BuildingInfoTogglePos.Left, index = 1}  --ToggleMgr
    self.leftData[1] = self:_createLineChart(lineToggleData)

    ---Employee Left 2
    local staffToggleData = { pos = BuildingInfoTogglePos.Left, index = 2}
    self.leftData[2] = self:_createStaff(staffToggleData)

    ---Occupancy rate right 1
    local occToggleData = { pos = BuildingInfoTogglePos.Right, index = 1}
    self.rightData[1] = self:_creatOccupancy(occToggleData)

    ---Brand quality
    self.brandItem = self:_createBrand(self.toggleData)
end

--Create the left and right information of the raw material factory homepage
function BuildingInfoToggleGroupMgr:_creatMaterialInfo()
    --Turnover line chart Item Left 1
    --Line chart left 1
    local lineToggleData = { pos = BuildingInfoTogglePos.Left, index = 1}  --ToggleMgr
    self.leftData[1] = self:_createLineChart(lineToggleData)

    if self.toggleData.isOther then
        --Other players enter
        if self.otherShelfRateItem then
            self.otherShelfView.gameObject:SetActive(true)
        end
        --Buy shelf
        local otherShelfToggleData = { pos = BuildingInfoTogglePos.Right, index = 1}
        self.rightData[1] = self:creatOtherPlayerShelf(otherShelfToggleData)

        --If the information is there, hide the production line
        if self.productionRateItem then
            self.productionView.gameObject:SetActive(false)
        end
        --Employee
        if self.staffViewRect then
            self.staffViewRect.gameObject:SetActive(false)
        end
        --warehouse
        if self.warehouseRateItem then
            self.warehouseView.gameObject:SetActive(false)
        end
        --Shelf
        if self.shelfRateItem then
            self.shelfView.gameObject:SetActive(false)
        end
        --production line
        if self.productionRateItem then
            self.productionView.gameObject:SetActive(false)
        end
    else
        --If these pieces of information are present, the production line is displayed
        if self.otherShelfRateItem then
            self.otherShelfView.gameObject:SetActive(false)
        else
        end
        --Employee
        if self.staffViewRect then
            self.staffViewRect.gameObject:SetActive(true)
        end
        --warehouse
        if self.warehouseRateItem then
            self.warehouseView.gameObject:SetActive(true)
        end
        --Shelf
        if self.shelfRateItem then
            self.shelfView.gameObject:SetActive(true)
        end
        --production line
        if self.productionRateItem then
            self.productionView.gameObject:SetActive(true)
        end
        --Employee Left 2
        local staffToggleData = { pos = BuildingInfoTogglePos.Left, index = 2}  --ToggleMgr
        self.leftData[2] = self:_createStaff(staffToggleData)

        --Warehouse Item Left 3
        local warehouseToggleData = {pos = BuildingInfoTogglePos.Left, index = 3}   --ToggleMgr
        self.leftData[3] = self:creatRefreshWarehouse(warehouseToggleData)

        --Shelf right 1
        local shelfToggleData = { pos = BuildingInfoTogglePos.Right, index = 1}  --ToggleMgr
        self.rightData[1] = self:creatRefreshShelf(shelfToggleData)

        --production line--Left 4
        local productionToggleData = { pos = BuildingInfoTogglePos.Left, index = 4}
        self.leftData[4] = self:creatRefreshProductionLine(productionToggleData)
    end
end
--Create information about the homepage of the processing plant
function BuildingInfoToggleGroupMgr:_creatProcessingInfo()
    --Turnover line chart Item  --Left 1
    local lineToggleData = { pos = BuildingInfoTogglePos.Left, index = 1}  --ToggleMgr
    self.leftData[1] = self:_createLineChart(lineToggleData)

    if self.toggleData.isOther then
        --Other players enter
        if self.otherShelfRateItem then
            self.otherShelfView.gameObject:SetActive(true)
        end
        --Buy shelf
        local otherShelfToggleData = { pos = BuildingInfoTogglePos.Right, index = 1}
        self.rightData[1] = self:creatOtherPlayerShelf(otherShelfToggleData)
        --If the information is there, hide the production line
        if self.productionRateItem then
            self.productionView.gameObject:SetActive(false)
        end
        --Employee
        if self.staffViewRect then
            self.staffViewRect.gameObject:SetActive(false)
        end
        --warehouse
        if self.warehouseRateItem then
            self.warehouseView.gameObject:SetActive(false)
        end
        --Shelf
        if self.shelfRateItem then
            self.shelfView.gameObject:SetActive(false)
        end
        --production line
        if self.productionRateItem then
            self.productionView.gameObject:SetActive(false)
        end

    else
        --If the information is there, it will be displayed  production line
        if self.otherShelfRateItem then
            self.otherShelfView.gameObject:SetActive(false)
        else
        end
        --Employee
        if self.staffViewRect then
            self.staffViewRect.gameObject:SetActive(true)
        end
        --warehouse
        if self.warehouseRateItem then
            self.warehouseView.gameObject:SetActive(true)
        end
        --Shelf
        if self.shelfRateItem then
            self.shelfView.gameObject:SetActive(true)
        end
        --production line
        if self.productionRateItem then
            self.productionView.gameObject:SetActive(true)
        end

        --Employee Left 2
        local staffToggleData = { pos = BuildingInfoTogglePos.Left, index = 2}  --ToggleMgr
        self.leftData[2] = self:_createStaff(staffToggleData)

        --warehouseItem Left 3
        local warehouseToggleData = {pos = BuildingInfoTogglePos.Left, index = 3}   --ToggleMgr
        self.leftData[3] = self:creatRefreshWarehouse(warehouseToggleData)

        --Shelf Right 1
        local shelfToggleData = { pos = BuildingInfoTogglePos.Right, index = 1}  --ToggleMgr
        self.rightData[1] = self:creatRefreshShelf(shelfToggleData)

        --production line --Left 4
        local productionToggleData = { pos = BuildingInfoTogglePos.Left, index = 4}
        self.leftData[4] = self:creatRefreshProductionLine(productionToggleData)
    end
end
--Create retail store information
function BuildingInfoToggleGroupMgr:_creatRetailShop()
    --Turnover line chart Item Left 1
    local lineLeftData = { pos = BuildingInfoTogglePos.Left, index = 1}  --ToggleMgr
    self.leftData[1] = self:_createLineChart(lineLeftData)

    ----Turnover line chartItem Right 1
    --local adLineChartData = self:_creatItemObj(BuildingInfoToggleGroupMgr.static.Municipal_LineChart_Path, self.rightRect)
    --adLineChartData.gameObject.name = "AdLineChartItem"
    --local LineChartToggleData = { pos = BuildingInfoTogglePos.Right, index = 1}  --ToggleMgr
    --local AdLineChartItem = AdLineChartItem:new(nil, self._clickItemFunc, adLineChartData, self.mainPanelLuaBehaviour, LineChartToggleData, self)
    --self.rightData[1] = AdLineChartItem

    if self.toggleData.isOther then
        --Others enter
        --
        ----Shelf left 2
        --local shelfToggleData = { pos = BuildingInfoTogglePos.Left, index = 2}  --ToggleMgr
        --self.leftData[2] = self:creatRefreshShelf(shelfToggleData)
        --Buy shelf
        local otherShelfToggleData = { pos = BuildingInfoTogglePos.Right, index = 1}
        self.rightData[1] = self:creatOtherPlayerShelf(otherShelfToggleData)
    else
        --Employee Left 2
        local staffToggleData = { pos = BuildingInfoTogglePos.Left, index = 2}  --ToggleMgr
        self.leftData[2] = self:_createStaff(staffToggleData)

        --Warehouse left 3
        local warehouseToggleData = {pos = BuildingInfoTogglePos.Left, index = 3}   --ToggleMgr
        self.leftData[3] = self:creatRefreshWarehouse(warehouseToggleData)

        --Shelf left 4
        --local shelfToggleData = { pos = BuildingInfoTogglePos.Left, index = 4}  --ToggleMgr
        --self.leftData[4] = self:creatRefreshShelf(shelfToggleData)

        --Shelf left 4
        local shelfToggleData = { pos = BuildingInfoTogglePos.Right, index = 1}
        self.rightData[1] = self:creatOtherPlayerShelf(shelfToggleData)
        ---Advertising display-right 1
        --local advertisementViewRect = self:_creatItemObj(BuildingInfoToggleGroupMgr.Municipal_Advertisement_Path, self.rightRect)
        --advertisementViewRect.gameObject.name = "Advertisement"
        --local ToggleData = { pos = BuildingInfoTogglePos.Right, index = 2}
        --local AdvertisementShowItem = AdvertisementShowItem:new(nil, self._clickItemFunc, advertisementViewRect, self.mainPanelLuaBehaviour, ToggleData, self)
        --self.rightData[2] = AdvertisementShowItem
    end
end
--Create information about municipal facilities
function BuildingInfoToggleGroupMgr:_creatMunicipalInfo()
    --Divided into left and right items, if it is left, the second parameter returned by creatItemObj is currentLeftPos, otherwise it is currentRightPos
    --If it is the first one, it must be open. The last parameter passed by the creatItemObj method is TOTAL_H, otherwise it is TOP_H

    ---Line chart left 1
    local lineToggleData = { pos = BuildingInfoTogglePos.Left, index = 1}  --ToggleMgr
    self.leftData[1] = self:_createLineChart(lineToggleData)


    if not self.staffViewRect then
        ---Tickets --Left 3
        local ticketView
        ticketView = self:_creatItemObj(BuildingInfoToggleGroupMgr.static.Municipal_Ticket_Path, self.leftRect)
        ticketView.gameObject.name = "TicketItem"
        local ticketToggleData = { pos = BuildingInfoTogglePos.Left, index = 3}  --Toggle Mgr
        local TicketItem = TicketItem:new(nil, self._clickItemFunc, ticketView, self.mainPanelLuaBehaviour, ticketToggleData, self)
        self.leftData[3] = TicketItem

        ---Advertising display-right 1
        local advertisementViewRect
        advertisementViewRect = self:_creatItemObj(BuildingInfoToggleGroupMgr.Municipal_Advertisement_Path, self.rightRect)
        advertisementViewRect.gameObject.name="Advertisement"
        local ToggleData = { pos = BuildingInfoTogglePos.Right, index = 1}
        local AdvertisementShowItem =AdvertisementShowItem:new(nil, self._clickItemFunc, advertisementViewRect, self.mainPanelLuaBehaviour, ToggleData, self)
        self.rightData[1] = AdvertisementShowItem

        ---Personal Park Information-Middle 1
        local ParkInfoRect
        ParkInfoRect=self:_creatItemObj(BuildingInfoToggleGroupMgr.Municipal_ParkInfo_Path,self.toggleData.middleRootTran )
        ParkInfoRect.gameObject.name="ParkInfo"
        local newData={func=self._middleItem}
        local ParkInfoData={pos=BuildingInfoTogglePos.Middle,index=1}
        local ParkInfoItem=ParkInfoItem:new(newData,self._clickItemFunc,ParkInfoRect,self.mainPanelLuaBehaviour,ParkInfoData,self)
        self.middleData[1]=ParkInfoItem
        ParkInfoItem:closeToggleItem(BuildingInfoToggleGroupMgr.static.MIDDLE_POS)

    end
    ---Employee Left 2
    local staffToggleData = { pos = BuildingInfoTogglePos.Left, index = 2}  --Toggle Mgr
    self.leftData[2] = self:_createStaff(staffToggleData)
end
---graduate School
function BuildingInfoToggleGroupMgr:_creatResearchLineInfo()
    ---Employee Left 1
    local staffToggleData = { pos = BuildingInfoTogglePos.Left, index = 1}
    self.leftData[1] = self:_createStaff(staffToggleData)
    -----Warehouse left 2
    --if self.warehouseLuaItem == nil then
    --    local warehouseView
    --    warehouseView = self:_creatItemObj(BuildingInfoToggleGroupMgr.static.Material_WAREHOUSE_PATH, self.leftRect)
    --    warehouseView.gameObject.name = "WarehouseRateItem"
    --    local warehouseToggleData = { pos = BuildingInfoTogglePos.Left, index = 2}  --Toggle Mgr
    --    self.warehouseLuaItem = WarehouseRateItem:new(self.toggleData, self._clickItemFunc, warehouseView, self.mainPanelLuaBehaviour, warehouseToggleData, self)
    --    self.leftData[2] = self.warehouseLuaItem
    --end

    local warehouseToggleData = {pos = BuildingInfoTogglePos.Left, index = 2}   --Toggle Mgr
    self.leftData[2] = self:creatRefreshWarehouse(warehouseToggleData)

    ---Research Line-Right 1
    local researchLineToggleData = { pos = BuildingInfoTogglePos.Right, index = 1}
    self.rightData[1] = self:_creatResearchLine(researchLineToggleData)
end

---General part
--line chart
function BuildingInfoToggleGroupMgr:_createLineChart(lineToggleData)
    if not self.lineViewRect then
        if lineToggleData.pos == BuildingInfoTogglePos.Left then
            self.lineViewRect = self:_creatItemObj(BuildingInfoToggleGroupMgr.static.Material_lINECHART_PATH, self.leftRect)
        else
            self.lineViewRect = self:_creatItemObj(BuildingInfoToggleGroupMgr.static.Material_lINECHART_PATH, self.rightRect)
        end
        self.lineViewRect.gameObject.name = "LineChart"
    end

    local lineLuaItem = LineChartRateItem:new(nil, self._clickItemFunc, self.lineViewRect, self.mainPanelLuaBehaviour, lineToggleData, self)
    return lineLuaItem
end
--Employee
function BuildingInfoToggleGroupMgr:_createStaff(staffToggleData)
    if not self.staffViewRect then
        if staffToggleData.pos == BuildingInfoTogglePos.Left then
            self.staffViewRect = self:_creatItemObj(BuildingInfoToggleGroupMgr.static.Staff_PATH, self.leftRect)
        --else
            --self.staffViewRect = self:_creatItemObj(BuildingInfoToggleGroupMgr.static.Staff_PATH, self.rightRect)  --If it appears on the right, you need to load other prefabs
        end
        self.staffViewRect.gameObject.name = "Staff"
    end

    local staffData = {}
    if not self.toggleData.info then  --Match buildings that are not connected to the server
        staffData.buildingId = 1
        staffData.buildingTypeId = 1
        staffData.satisfaction = 30
        staffData.dayWage = 10
        staffData.totalStaffCount = 20
        staffData.noDomicileCount = 0
        staffData.isOther = self.toggleData.isOther  --Determine if you or someone else has opened the interface
        local staffLuaItem = StaffRateItem:new(staffData, self._clickItemFunc, self.staffViewRect, self.mainPanelLuaBehaviour, staffToggleData, self)
        return staffLuaItem
    else
        if self.toggleData.isOther then
            staffData.isOther = true
        else
            staffData.isOther = false
        end
        staffData.buildingId = self.toggleData.info.id
        staffData.buildingTypeId = self.toggleData.info.mId
        staffData.satisfaction = self.toggleData.info.happy
        staffData.dayWage = self.toggleData.info.salary / 100 * PlayerBuildingBaseData[staffData.buildingTypeId].salary
        staffData.totalStaffCount = PlayerBuildingBaseData[staffData.buildingTypeId].maxWorkerNum
        staffData.noDomicileCount = 0
        staffData.isOther = self.toggleData.isOther  --Determine if you or someone else has opened the interface
        staffData.buildingState = self.toggleData.info.state  --Determine whether it is in an open state
        local staffLuaItem = StaffRateItem:new(staffData, self._clickItemFunc, self.staffViewRect, self.mainPanelLuaBehaviour, staffToggleData, self)
        return staffLuaItem
    end
end
--Brand quality
function BuildingInfoToggleGroupMgr:_createBrand(detailData)
    if self.brandItem ~= nil then
        local data = {}
        data.brand = detailData.brand or 100
        data.qty = detailData.qty or 100
        self.brandItem:updateInfo(data)
    else
        if self.brandItemViewRect == nil then
            if self.topBrandRect == nil then
                return
            end
            self.brandItemViewRect = self:_creatItemObj(BuildingInfoToggleGroupMgr.static.BuildingBrand_Path, self.topBrandRect)
            self.brandItemViewRect.gameObject.name = "BuildingBrand"
        end

        local data = {}
        data.brand = detailData.brand or 100
        data.qty = detailData.qty or 100
        self.brandItem = BuildingBrandItem:new(data, self.brandItemViewRect)
    end
    return self.brandItem
end

---Residential part
--Occupancy rate
function BuildingInfoToggleGroupMgr:_creatOccupancy(occToggleData)
    if self.occupancyLuaItem ~= nil then
        local occData = {}
        occData.qty = self.toggleData.qty
        occData.buildingId = self.toggleData.info.id
        occData.buildingTypeId = self.toggleData.info.mId
        occData.totalCount = PlayerBuildingBaseData[occData.buildingTypeId].npc
        occData.renter = self.toggleData.renter
        occData.isOther = self.toggleData.isOther
        occData.rent = self.toggleData.rent
        self.occupancyLuaItem:updateInfo(occData)
    else

    end

    if not self.occupancyViewRect then
        if occToggleData.pos == BuildingInfoTogglePos.Left then
            --self.occupancyViewRect = self:_creatItemObj(BuildingInfoToggleGroupMgr.static.HOUSE_OCC_PATH, self.leftRect)
        else
            self.occupancyViewRect = self:_creatItemObj(BuildingInfoToggleGroupMgr.static.HOUSE_OCC_PATH, self.rightRect)
        end
        self.occupancyViewRect.gameObject.name = "Occ"
    end

    local occData = {}
    occData.qty = self.toggleData.qty
    occData.buildingId = self.toggleData.info.id
    occData.buildingTypeId = self.toggleData.info.mId
    occData.totalCount = PlayerBuildingBaseData[occData.buildingTypeId].npc
    occData.renter = self.toggleData.renter
    occData.isOther = self.toggleData.isOther

    occData.rent = self.toggleData.rent
    --occData.effectiveDate = os.date("%Y/%m/%d %H:%M", os.time() + 86400)

    self.occupancyLuaItem = OccupancyRateItem:new(occData, self._clickItemFunc, self.occupancyViewRect, self.mainPanelLuaBehaviour, occToggleData, self)
    return self.occupancyLuaItem
end
---Research section
--Research line
function BuildingInfoToggleGroupMgr:_creatResearchLine(researchLineToggleData)
    --If it already exists, refresh the data directly, otherwise regenerate
    if self.labLineItem then
        local data = {}
        --data.insId = self.toggleData.insId
        --data.buildingTypeId = self.toggleData.mId
        data.lines = self.toggleData.orderLineData
        data.isOther = self.toggleData.isOther
        self.labLineItem:updateInfo(data)
    else
        if not self.researchLineViewRect then
            self.researchLineViewRect = self:_creatItemObj(BuildingInfoToggleGroupMgr.static.Laboratory_Path, self.rightRect)
            self.researchLineViewRect.gameObject.name = "ResearchLine"
        end

        local data = {}
        data.isOther = self.toggleData.isOther
        data.insId = self.toggleData.insId
        data.buildingTypeId = self.toggleData.mId
        data.lines = self.toggleData.orderLineData
        self.labLineItem = LabBuildingLineItem:new(data, self.researchLineViewRect, self.mainPanelLuaBehaviour, researchLineToggleData, self)
    end
    return self.labLineItem
end
--Building own warehouse
function BuildingInfoToggleGroupMgr:creatRefreshWarehouse(warehouseToggleData)
    --If it already exists, refresh the data directly, otherwise regenerate
    if self.warehouseRateItem then
        self.warehouseRateItem:updateInfo(self.toggleData)
    else
        if not self.warehouseView then
            self.warehouseView = self:_creatItemObj(BuildingInfoToggleGroupMgr.static.Material_WAREHOUSE_PATH, self.leftRect)
            self.warehouseView.gameObject.name = "WarehouseRateItem"
        end
        self.warehouseRateItem = WarehouseRateItem:new(self.toggleData, self._clickItemFunc, self.warehouseView, self.mainPanelLuaBehaviour, warehouseToggleData, self)
    end
    return self.warehouseRateItem
end
--Building comes with shelves
function BuildingInfoToggleGroupMgr:creatRefreshShelf(shelfToggleData)
    --If it already exists, refresh the data directly, otherwise regenerate
    if self.shelfRateItem then
        self.shelfRateItem:updateInfo(self.toggleData)
    else
        if not self.shelfView then
            self.shelfView = self:_creatItemObj(BuildingInfoToggleGroupMgr.static.Material_SHELF_PATH, self.rightRect)
            self.shelfView.gameObject.name = "ShelfRateItem"
        end
        self.shelfRateItem = ShelfRateItem:new(self.toggleData, self._clickItemFunc, self.shelfView, self.mainPanelLuaBehaviour, shelfToggleData, self)
    end
    return self.shelfRateItem
end
--production line
function BuildingInfoToggleGroupMgr:creatRefreshProductionLine(productionToggleData)
    --If it already exists, refresh the data directly, otherwise regenerate
    if self.productionRateItem then
        self.productionRateItem:updateInfo(self.toggleData)
    else
        if not self.productionView then
            self.productionView = self:_creatItemObj(BuildingInfoToggleGroupMgr.static.Material_PRODUCTIONLINE, self.leftRect)
            self.productionView.gameObject.name = "ProductionLineItem";
        end
        self.productionRateItem = HomeProductionLineItem:new(self.toggleData, self._clickItemFunc, self.productionView, self.mainPanelLuaBehaviour, productionToggleData, self)
    end
    return self.productionRateItem
end
--Other players buy shelves
function BuildingInfoToggleGroupMgr:creatOtherPlayerShelf(otherShelfToggleData)
    if self.otherShelfRateItem then
        self.otherShelfRateItem:updateInfo(self.toggleData)
    else
        if not self.otherShelfView then
            self.otherShelfView = self:_creatItemObj(BuildingInfoToggleGroupMgr.static.Material_SHELF_OTHER, self.rightRect)
            self.otherShelfView.gameObject.name = "HomeOtherPlayerShelfItem"
        end
        self.otherShelfRateItem = HomeOtherPlayerShelfItem:new(self.toggleData, self._clickItemFunc, self.otherShelfView, self.mainPanelLuaBehaviour, otherShelfToggleData, self)
    end
    return self.otherShelfRateItem
end