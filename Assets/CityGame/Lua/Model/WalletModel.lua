---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Fisher.
--- DateTime: 2019/6/19 11:41
---
WalletModel = class("WalletModel",ModelBase)

local pbl = pbl
function WalletModel:initialize(insId)
    self.insId = insId
    self:OnCreate()
end

function WalletModel:OnCreate()
    --Local events
    Event.AddListener("ReqCreateWallet",self.ReqCreateWallet,self)
    Event.AddListener("ReqCreateOrder",self.ReqCreateOrder,self)
    Event.AddListener("ReqDisChargeOrder",self.ReqDisChargeOrder,self)
    Event.AddListener("ReqDisCharge",self.ReqDisCharge,self)
    Event.AddListener("ReqValidationPhoneCode",self.ReqValidationPhoneCode,self)
    Event.AddListener("ReqDetails",self.ReqDetails,self)

    --Network incident
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","ct_createUser","ccapi.ct_createUser",self.ReceiveCreateWallet,self)
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","ct_RechargeRequestReq","ccapi.ct_RechargeRequestRes",self.ReqTopUpSucceed,self)
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","ct_DisPaySmVefifyReq","ccapi.ct_DisPaySmVefifyReq",self.ReqValidationPhoneCodeSuccees,self)
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","ct_GetTradingRecords","ccapi.ct_GetTradingRecords",self.GetTradingRecords,self)
end

function WalletModel:Close()
    --Local events
    Event.RemoveListener("ReqCreateWallet",self.ReqCreateWallet,self)
    Event.RemoveListener("ReqCreateOrder",self.ReqCreateOrder,self)
    Event.RemoveListener("ReqDisChargeOrder",self.ReqDisChargeOrder,self)
    Event.RemoveListener("ReqDisCharge",self.ReqDisCharge,self)
    Event.RemoveListener("ReqValidationPhoneCode",self.ReqValidationPhoneCode,self)
    Event.RemoveListener("ReqDetails",self.ReqDetails,self)

    --Network incident
    DataManager.ModelRemoveNetMsg(nil,"gscode.OpCode","ct_createUser","ccapi.ct_createUser",self.ReceiveCreateWallet,self)
    DataManager.ModelRemoveNetMsg(nil,"gscode.OpCode","ct_RechargeRequestReq","ccapi.ct_RechargeRequestRes",self.ReqTopUpSucceed,self)
    DataManager.ModelRemoveNetMsg(nil,"gscode.OpCode","ct_DisPaySmVefifyReq","ccapi.ct_DisPaySmVefifyReq",self.ReqValidationPhoneCodeSuccees,self)
    DataManager.ModelRemoveNetMsg(nil,"gscode.OpCode","ct_GetTradingRecords","ccapi.ct_GetTradingRecords",self.GetTradingRecords,self)
end

---Client request----
--Create a wallet
function WalletModel:ReqCreateWallet(userId,userName,pubKey)
    local msgId = pbl.enum("gscode.OpCode","ct_createUser")
    local lMsg ={PlayerId = userId,CreateUserReq={ReqHeader={Version = 1,ReqId = tostring(msgId),},CityUserId = userId,CityUserName = userName,PubKey=City.signer_ct.ToHexString(pubKey),PayPassword=''}}
    local pMsg = assert(pbl.encode("ccapi.ct_createUser", lMsg))
    local msgRet = assert(pbl.decode("ccapi.ct_createUser",pMsg), "pbl.decode decode failed")
    CityEngineLua.Bundle:newAndSendMsg(msgId, pMsg)
end
--Generate recharge orders
function WalletModel:ReqCreateOrder(userId,Amount,passWard)
    self.passWard = passWard
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","ct_GenerateOrderReq","ccapi.ct_GenerateOrderReq",self.ReceiveCreateOrder,self)
    self.Amount = tostring(Amount)
    local msgId = pbl.enum("gscode.OpCode","ct_GenerateOrderReq")
    local lMsg ={PlayerId = userId,ReqHeader = {Version = 1,ReqId = tostring(msgId),}}
    local pMsg = assert(pbl.encode("ccapi.ct_GenerateOrderReq", lMsg))
    --local msgRet = assert(pbl.decode("ccapi.ct_GenerateOrderReq",pMsg), "pbl.decode decode failed")
    CityEngineLua.Bundle:newAndSendMsg(msgId, pMsg)
end
--Generate withdrawal order
function WalletModel:ReqDisChargeOrder(userId,passWard)
    self.passWard = passWard
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","ct_GenerateOrderReq","ccapi.ct_GenerateOrderReq",self.ReceiveDisChargeOrder,self)
    local msgId = pbl.enum("gscode.OpCode","ct_GenerateOrderReq")
    local lMsg ={PlayerId = userId,ReqHeader = {Version = 1,ReqId = tostring(msgId),}}
    local pMsg = assert(pbl.encode("ccapi.ct_GenerateOrderReq", lMsg))
    local msgRet = assert(pbl.decode("ccapi.ct_GenerateOrderReq",pMsg), "pbl.decode decode failed")
    CityEngineLua.Bundle:newAndSendMsg(msgId, pMsg)
end
--Recharge
function WalletModel:ReqTopUp(userId,PurchaseId,PubKey,Amount,Ts,Signature)
    local msgId = pbl.enum("gscode.OpCode","ct_RechargeRequestReq")
    local lMsg ={PlayerId = userId,RechargeRequestReq={ReqHeader={Version = 1,ReqId = tostring(msgId),},PurchaseId = PurchaseId,PubKey=PubKey,Amount=Amount,ExpireTime=9,Ts=Ts,Signature = Signature}}
    local pMsg = assert(pbl.encode("ccapi.ct_RechargeRequestReq", lMsg))
    --local msgRet = assert(pbl.decode("ccapi.ct_RechargeRequestReq",pMsg), "pbl.decode decode failed")
    CityEngineLua.Bundle:newAndSendMsg(msgId, pMsg)
end
--Withdraw
function WalletModel:ReqDisCharge(userId,PurchaseId,PubKey,EthAddr,Amount,Ts,Signature)
    local msgId = pbl.enum("gscode.OpCode","ct_DisChargeReq")
    local lMsg ={PlayerId = userId,DisChargeReq = {ReqHeader = {Version = 1,ReqId = tostring(msgId),},PurchaseId = PurchaseId,PubKey = PubKey,EthAddr = EthAddr,Amount = Amount,ExpireTime = 9,Ts = Ts,Signature = Signature}}
    local pMsg = assert(pbl.encode("ccapi.ct_DisChargeReq", lMsg))
    local msgRet = assert(pbl.decode("ccapi.ct_DisChargeReq",pMsg), "pbl.decode decode failed")
    CityEngineLua.Bundle:newAndSendMsg(msgId, pMsg)
end
--Verify phone verification code
function WalletModel:ReqValidationPhoneCode(userId,authCode)
    local msgId = pbl.enum("gscode.OpCode","ct_DisPaySmVefifyReq")
    local lMsg ={PlayerId = userId,authCode = authCode}
    local pMsg = assert(pbl.encode("ccapi.ct_DisPaySmVefifyReq", lMsg))
    local msgRet = assert(pbl.decode("ccapi.ct_DisPaySmVefifyReq",pMsg), "pbl.decode decode failed")
    CityEngineLua.Bundle:newAndSendMsg(msgId, pMsg)
end

--order details
function WalletModel:ReqDetails(userId)
    local currentTime = TimeSynchronized.GetTheCurrentServerTime()  --ms
    local endTime = TimeSynchronized.GetTheCurrentServerTime()  --ms
    local ts = getFormatUnixTime(currentTime/1000)
    if tonumber(ts.second) ~= 0 then
        currentTime = currentTime - tonumber(ts.second)*1000
    end
    if tonumber(ts.minute) ~= 0 then
        currentTime = currentTime - tonumber(ts.minute)*60000
    end
    if tonumber(ts.hour) ~= 0 then
        currentTime = currentTime - tonumber(ts.hour)*3600000
    end
    if tonumber(ts.day) ~= 0 then
        currentTime = currentTime - tonumber(ts.hour)*86400000
    end
    local startTime = currentTime
    local msgId = pbl.enum("gscode.OpCode","ct_GetTradingRecords")
    local lMsg ={playerId = userId,range_StartTime = startTime,range_EndTime = endTime}
    local pMsg = assert(pbl.encode("ccapi.ct_GetTradingRecords", lMsg))
    local msgRet = assert(pbl.decode("ccapi.ct_GetTradingRecords",pMsg), "pbl.decode decode failed")
    CityEngineLua.Bundle:newAndSendMsg(msgId, pMsg)
end

---Server callback---
--Create a wallet
function WalletModel:ReceiveCreateWallet(data)
    if data ~= nil then
        Event.Brocast("createWalletSucceed",data)
    end
end
--Generate recharge orders
function WalletModel:ReceiveCreateOrder(data)
    DataManager.ModelRemoveNetMsg(nil,"gscode.OpCode","ct_GenerateOrderReq","ccapi.ct_GenerateOrderReq",self.ReceiveCreateOrder,self)
    if data ~= nil then
        local serverNowTime = TimeSynchronized.GetTheCurrentServerTime()
        local privateKeyStr = ct.GetPrivateKeyLocal(self.passWard)
        local sm = City.signer_ct.New()
        local pubkey = sm.GetPublicKeyFromPrivateKey(privateKeyStr)
        local pubkeyStr = sm.ToHexString(pubkey)
        sm:pushSting(data.PurchaseId)
        sm:pushSting(self.Amount)
        --Sent temporarily
        local second = math.ceil(serverNowTime)
        sm:pushLong(second)
        --Generate a signature (used to verify whether key data has been tampered with)
        local sig = sm:sign(privateKeyStr);
        self:ReqTopUp(data.PlayerId,data.PurchaseId,pubkeyStr,self.Amount,second,sm.ToHexString(sig))
    end
end
--Generate withdrawal order
function WalletModel:ReceiveDisChargeOrder(data)
    DataManager.ModelRemoveNetMsg(nil,"gscode.OpCode","ct_GenerateOrderReq","ccapi.ct_GenerateOrderReq",self.ReceiveDisChargeOrder,self)
    if data ~= nil then
        Event.Brocast("reqDisChargeOrderSucceed",data,self.passWard)
    end
end
--Recharge successful
function WalletModel:ReqTopUpSucceed(data)
    if data ~= nil then
        Event.Brocast("reqTopUpSucceed",data)
    end
end
--Verify phone verification code and pass
function WalletModel:ReqValidationPhoneCodeSuccees(data)
    if data ~= nil then
        Event.Brocast("ValidationPhoneCode",data)
    end
end

--Transaction Details
function WalletModel:GetTradingRecords(info)
    Event.Brocast("TradingRecords",info)
end
------------------------------------------------------------------------Analysis-----------------------------------------------------------------------------
--Analyze payment password and private key
function WalletModel:parsing()
    local passWordPath = CityLuaUtil.getAssetsPath().."/Lua/pb/passWard.data"
    local passWordStr = ct.file_readString(passWordPath)
    local privateKeyNewEncrypted = ct.GetPrivateKeyLocal(passWordStr)
    return privateKeyNewEncrypted
end