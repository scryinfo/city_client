---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Tina.
--- DateTime: 2018/12/14 17:16
---

SocialityManager = class('SocialityManager')

function SocialityManager:initialize()
    self.path = CityLuaUtil.getAssetsPath().."/client.data"
    self.m_friends = {}
    self.m_chatInfo = {}
    self.m_chatByType = {{}, {}, {}}
    self.m_friendsApply = {}
    self.m_blacklist = {}
    self.mySaveRoleCom = { id = DataManager.GetMyOwnerID(), readCommunication = {}, unreadCommunication = {}}
    self:ReadFriendsChat()
end

function SocialityManager:SetMyFriends(friendsData)
    if friendsData.id then
        self.m_friends[friendsData.id] = friendsData.b
    end
end

function SocialityManager:GetMyFriends()
    local friendsIdTemp = {}
    for i, v in pairs(self.m_friends) do
        if v ~= nil then
            friendsIdTemp[i] = v
        end
    end
    return friendsIdTemp
end

function SocialityManager:SetMyChatInfo(chatData)
    table.insert(self.m_chatInfo, chatData)
    if chatData.channel == "WORLD" then
        table.insert(self.m_chatByType[1], chatData)
    elseif chatData.channel == "FRIEND" then
        local dataId
        if DataManager.GetMyOwnerID() == chatData.id then
            dataId = chatData.channelId
        else
            dataId = chatData.id
        end
        if not self.m_chatByType[2][dataId] then
            self.m_chatByType[2][dataId] = {}
        end
        if not self.m_chatByType[2][dataId].chatInfo then
            self.m_chatByType[2][dataId].chatInfo = {}
        end
        if DataManager.GetMyOwnerID() ~= chatData.id then
            if self.m_chatByType[2][dataId].unreadNum then
                self.m_chatByType[2][dataId].unreadNum = self.m_chatByType[2][dataId].unreadNum + 1
            else
                self.m_chatByType[2][dataId].unreadNum = 1
            end
        end
        if not self.m_chatByType[2][dataId].unreadChatInfo then
            self.m_chatByType[2][dataId].unreadChatInfo = {}
        end
        table.insert(self.m_chatByType[2][dataId].unreadChatInfo, chatData)
        table.insert(self.m_chatByType[2][dataId].chatInfo, chatData)
        table.insert(self.mySaveRoleCom.readCommunication, chatData)
        self:SaveFriendsChat()
    elseif chatData.channel == "UNKNOWN" then
        local dataId
        if DataManager.GetMyOwnerID() == chatData.id then
            dataId = chatData.channelId
        else
            dataId = chatData.id
        end
        if not self.m_chatByType[3][dataId] then
            self.m_chatByType[3][dataId] = {}
        end
        if not self.m_chatByType[3][dataId].chatInfo then
            self.m_chatByType[3][dataId].chatInfo = {}
        end
        if DataManager.GetMyOwnerID() ~= chatData.id then
            if self.m_chatByType[3][dataId].unreadNum then
                self.m_chatByType[3][dataId].unreadNum = self.m_chatByType[3][dataId].unreadNum + 1
            else
                self.m_chatByType[3][dataId].unreadNum = 1
            end
        end
        table.insert(self.m_chatByType[3][dataId].chatInfo, chatData)
    end
end

function SocialityManager:SetMyReadChatInfo(index, id)
    if self.m_chatByType[index][id] then
        self.m_chatByType[index][id].unreadNum = 0
        if index == 2 then
            self.m_chatByType[2][id].unreadChatInfo = {}
        end
    end
    if index == 2 then
        if self.unread and self.unread[id] and self.unread[id][1] then
            self.unread[id] = nil
        end
        self:SaveFriendsChat()
    end
end

--1 获取世界消息 2 获取好友消息 3 获取陌生人消息
function SocialityManager:GetMyChatInfo(index)
    return self.m_chatByType[index]
end

--全部信息
function SocialityManager:GetMyAllChatInfo()
    return self.m_chatInfo
end

--获取自己好友申请信息
function SocialityManager:GetMyFriendsApply()
    return self.m_friendsApply
end

--刷新自己好友申请信息
--参数： tempData==>  RequestFriend
--如果需要删除好友申请，ByteBool={ id = "XXXXXXXX",name = nil }
function SocialityManager:SetMyFriendsApply(tempData)
    if tempData.id and tempData.name then
        table.insert(self.m_friendsApply, tempData)
    elseif tempData.itemId and not tempData.id then
        table.remove(self.m_friendsApply, tempData.itemId)
    end
end

--获取自己黑名单
function SocialityManager:GetMyBlacklist()
    return self.m_blacklist
end

--刷新自己黑名单
--参数： tempData==>  Bytes
--如果需要删除黑名单，tempData={ id = "XXXXXXXX",name = nil }
function SocialityManager:SetMyBlacklist(tempData)
    if tempData.id and tempData.name then
        table.insert(self.m_blacklist, tempData)
    elseif tempData.id and not tempData.name then
        for i, v in ipairs(self.m_blacklist) do
            if v.id == tempData.id then
                table.remove(self.m_blacklist, i)
                break
            end
        end
    end
end

-- 保存聊天记录
function SocialityManager:SaveFriendsChat()
    local tempUnreadCommunication = {}
    if self.unread then
        for _, a in pairs(self.unread) do
            for _, c in ipairs(a) do
                table.insert(tempUnreadCommunication, c)
            end
        end
    end
    for _, n in pairs(self.m_chatByType[2]) do
        if n.unreadChatInfo then
            for _, b in ipairs(n.unreadChatInfo) do
                table.insert(tempUnreadCommunication, b)
            end
        end
    end
    self.mySaveRoleCom.unreadCommunication = tempUnreadCommunication
    if self.saveRoleCom then
        if self.idIndex then
            self.saveRoleCom.allRoleCom[self.idIndex] = self.mySaveRoleCom
        else
            table.insert(self.saveRoleCom.allRoleCom, self.mySaveRoleCom)
            self.idIndex = #self.saveRoleCom.allRoleCom
        end
    else
        self.saveRoleCom = {allRoleCom = {self.mySaveRoleCom}}
        self.idIndex = 1
    end
    local pMsg = assert(pbl.encode("client.AllRoleCommunication", self.saveRoleCom))
    ct.file_saveString(self.path,pMsg)
end

-- 上线时读取，聊天记录
function SocialityManager:ReadFriendsChat()
    local str = ct.file_readString(self.path)
    if str ~= nil then
        self.saveRoleCom = assert(pbl.decode("client.AllRoleCommunication", str), "pbl.decode decode failed")
        for i, v in ipairs(self.saveRoleCom.allRoleCom) do
            if v.id == DataManager.GetMyOwnerID() then
                self.idIndex = i
                self.mySaveRoleCom = v
                if v.unreadCommunication then
                    for _, m in ipairs(v.unreadCommunication) do
                        local dataId = m.id
                        if not self.unread then
                            self.unread = {}
                        end
                        if not self.unread[dataId] then
                            self.unread[dataId] = {}
                        end
                        table.insert(self.unread[dataId], m)
                    end
                end
                break
            end
        end
    end
    --local cRoleCommunication = msg.allRoleCom[1].cRoleCommunication[1].readCommunication[1].name
end

-- 查找上次未读信息
function SocialityManager:GetUnread()
    return self.unread
end