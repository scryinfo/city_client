---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by password.
--- DateTime: 2019/4/13 15:57
---Promotion companymodel
DataCompanyModel = class("DataCompanyModel",ModelBase)
local pbl = pbl

function DataCompanyModel:initialize(insId)
    self.insId = insId
    self:OnCreate()
end

function DataCompanyModel:OnCreate()
    DataManager.RegisterErrorNetMsg()
    --Online registration
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","setSalary","gs.SetSalary",self.n_OnReceiveHouseSalaryChange)
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","startBusiness","gs.Id",self.n_OnReceiveOpenBusiness)
    --DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","detailPublicFacility","gs.PublicFacility",self.n_OnPublicFacility) --Building details
    --DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","adAddNewPromoOrder","gs.AdAddNewPromoOrder",self.n_OnAddPromote) --Add promotion
    --DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","adQueryPromotion","gs.AdQueryPromotion",self.n_OnQueryPromotion) -- Promotion list
    --DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","adQueryPromoCurAbilitys","gs.AdQueryPromoCurAbilitys",self.n_OnAdQueryPromoCurAbilitys) -- Promotion ability list
    --DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","queryPromotionItemInfo","gs.PromotionItemInfo",self.n_OnPromotionItemInfo) -- Get a list of promotion capabilities
    --DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","adjustPromoSellingSetting","gs.AdjustPromoSellingSetting",self.n_OnPromotionSetting) -- Promotion settings
    --DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","adRemovePromoOrder","gs.AdRemovePromoOrder",self.n_OnRemovePromo) -- delete promotion
    --DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","adGetPromoAbilityHistory","gs.AdGetPromoAbilityHistory",self.n_OnPromoAbilityHistory) -- Promotion history curve
    --DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","adGetAllMyFlowSign","gs.GetAllMyFlowSign",self.n_OnGetAllMyFlowSign) -- Get all your own contracts
    --DataManager.ModelRegisterNetMsg(nil,"sscode.OpCode","queryBuildingLift","ss.BuildingLift",self.n_OnGetLiftCurve,self) -- Get all your own signing curves
    --DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","promotionGuidePrice","gs.PromotionMsg",self.n_OnGuidePrice,self) -- Recommended pricing

    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","detailPromotionCompany","gs.PromotionCompany",self.n_OnPublicFacility) --Building details
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","getScienceItemSpeed","gs.ScienceItemSpeed",self.n_OnSurveySpeed) --Investigation speed
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","ftyLineAddInform","gs.FtyLineAddInform",self.n_OnAddSurveyLine) --Add survey line
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","ftyLineChangeInform","gs.LineInfo",self.n_OnSurveyLineUpdData) --Survey line change push
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","ftyDelLine","gs.DelLine",self.n_OnSurveyLineFinish) --The survey line is completed
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","delScienceLine","gs.DelLine",self.n_OnDelSurveyLine) --Delete the survey line
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","setScienceLineOrder","gs.SetLineOrder",self.n_OnTopSurveyLine) --Top survey line
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","usePromotionPoint","gs.OpenScience",self.n_OnUserData) --Use points
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","buySciencePoint","gs.BuySciencePoint",self.n_OnBuyData) --Purchase points
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","getScienceStorageData","gs.ScienceStorageData",self.n_OnDataBase)---Get warehouse data
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","scienceShelfAdd","gs.ShelfAdd",self.n_OnAddShelf,self)--shelf
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","scienceShelfSet","gs.ShelfAdd",self.n_OnSetShelf,self)--Edit shelves
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","scienceShelfDel","gs.ShelfDel",self.n_OnDelShelf,self)--Off shelf
    DataManager.ModelRegisterNetMsg(self.insId,"gscode.OpCode","queryPromotionRecommendPrice","gs.GMRecommendPrice",self.n_OnRecommendPrice,self)--推荐定价

end

function DataCompanyModel:Close()
    --Clear local UI events
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","detailPromotionCompany","gs.PromotionCompany",self.n_OnPublicFacility) 
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","getScienceItemSpeed","gs.ScienceItemSpeed",self.n_OnSurveySpeed)
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","ftyLineAddInform","gs.FtyLineAddInform",self.n_OnAddSurveyLine) 
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","ftyLineChangeInform","gs.LineInfo",self.n_OnSurveyLineUpdData) 
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","ftyDelLine","gs.DelLine",self.n_OnSurveyLineFinish) 
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","delScienceLine","gs.DelLine",self.n_OnDelSurveyLine) 
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","setScienceLineOrder","gs.SetLineOrder",self.n_OnTopSurveyLine) 
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","usePromotionPoint","gs.OpenScience",self.n_OnUserData) 
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","buySciencePoint","gs.BuySciencePoint",self.n_OnBuyData) 
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","getScienceStorageData","gs.ScienceStorageData",self.n_OnDataBase)
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","scienceShelfAdd","gs.ShelfAdd",self.n_OnAddShelf,self)
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","scienceShelfSet","gs.ShelfAdd",self.n_OnSetShelf,self)
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","scienceShelfDel","gs.ShelfDel",self.n_OnDelShelf,self)
    DataManager.ModelRemoveNetMsg(self.insId,"gscode.OpCode","queryPromotionRecommendPrice","gs.GMRecommendPrice",self.n_OnRecommendPrice,self)
end
--Client request--

--Get building details
function DataCompanyModel:m_detailPublicFacility(buildingId)
    --DataManager.ModelSendNetMes("gscode.OpCode", "detailPublicFacility","gs.Id",{id = buildingId})
    DataManager.ModelSendNetMes("gscode.OpCode", "detailPromotionCompany","gs.Id",{id = buildingId})
end

--Get survey speed
function DataCompanyModel:m_getSurveySpeed(buildingId)
    DataManager.ModelSendNetMes("gscode.OpCode", "getScienceItemSpeed","gs.Id",{id = buildingId})
end

--Add survey line
function DataCompanyModel:m_ReqAddScienceLine(data)
    DataManager.ModelSendNetMes("gscode.OpCode", "addScienceLine","gs.AddLine",data)
end

--Delete survey line
function DataCompanyModel:m_delSurveyLine(buildingId,lineId)
    DataManager.ModelSendNetMes("gscode.OpCode", "delScienceLine","gs.DelLine",{buildingId = buildingId,lineId = lineId})
end

--Top Survey Line
function DataCompanyModel:m_topSurveyLine(buildingId,lineId)
    DataManager.ModelSendNetMes("gscode.OpCode", "setScienceLineOrder","gs.SetLineOrder",{buildingId = buildingId,lineId = lineId,lineOrder = 2})
end

--Use points
function DataCompanyModel:m_userData(buildingId,typeId,num)
    DataManager.ModelSendNetMes("gscode.OpCode", "usePromotionPoint","gs.OpenScience",{buildingId = buildingId,itemId = typeId,num = num})
end

--Purchase points
function DataCompanyModel:m_buyData(buildingId,typeId,num,price,ownerId)
    DataManager.ModelSendNetMes("gscode.OpCode", "buySciencePoint","gs.BuySciencePoint",
            {buildingId = buildingId,item = {key = {id = typeId},n = num},price = price,buyerId = ownerId,})
end

--Get warehouse data
function DataCompanyModel:m_getDataBase(buildingId)
    DataManager.ModelSendNetMes("gscode.OpCode", "getScienceStorageData","gs.Id",{id = buildingId})
end

--Put on shelf
function DataCompanyModel:m_addShelf(buildingId,typeId,num,price,autoRepOn)
    DataManager.ModelSendNetMes("gscode.OpCode", "scienceShelfAdd","gs.ShelfAdd",
            {buildingId = buildingId,item = {key = {id = typeId},n = num},price = price,autoRepOn = autoRepOn})
end

--Edit shelves
function DataCompanyModel:m_setShelf(buildingId,typeId,num,price,autoRepOn)
    DataManager.ModelSendNetMes("gscode.OpCode", "scienceShelfSet","gs.ShelfSet",
            {buildingId = buildingId,item = {key = {id = typeId},n = num},price = price,autoRepOn = autoRepOn})
end

--Off shelf
function DataCompanyModel:m_delShelf(buildingId,typeId,num)
    DataManager.ModelSendNetMes("gscode.OpCode", "scienceShelfDel","gs.ShelfDel",
            {buildingId = buildingId,item = {key = {id = typeId},n = num}})
end

--Recommended pricing
function DataCompanyModel:m_recommendPrice(buildingId,playerId)
    DataManager.ModelSendNetMes("gscode.OpCode", "queryPromotionRecommendPrice","gs.QueryBuildingInfo",
            {buildingId = buildingId,playerId = playerId})
end

--Add promotion
function DataCompanyModel:m_AddPromote(buildingId,time,goodId)
   local playerId = DataManager.GetMyPersonalHomepageInfo()
   local currentTime = TimeSynchronized.GetTheCurrentServerTime()
    local lMsg = {}
    if goodId == 1300 or goodId ==1400 then
        lMsg = {sellerBuildingId = buildingId,buyerPlayerId = playerId.id,companyName = playerId.companyName,promDuration = time*3600000,promStartTs = currentTime,buildingType = goodId}
    else
        lMsg = {sellerBuildingId = buildingId,buyerPlayerId = playerId.id,companyName = playerId.companyName,promDuration = time*3600000,promStartTs = currentTime,productionType = goodId}
    end
    DataManager.ModelSendNetMes("gscode.OpCode", "adAddNewPromoOrder","gs.AdAddNewPromoOrder",lMsg)
end

--Delete promotion
function DataCompanyModel:m_RemovePromote(buildingId,promotionId)
    DataManager.ModelSendNetMes("gscode.OpCode", "adRemovePromoOrder","gs.AdRemovePromoOrder",{buildingId = buildingId,promotionId = promotionId})
end

--Promotion settings
function DataCompanyModel:m_PromotionSetting(buildingId , takeOnNewOrder , price , time)
    if price then
        price = GetServerPriceNumber(price)
    end
    if time then
        time = time*3600*1000
    end
    local lMsg = {sellerBuildingId = buildingId,pricePerHour = price,remainTime = time,takeOnNewOrder = takeOnNewOrder}
    DataManager.ModelSendNetMes("gscode.OpCode", "adjustPromoSellingSetting","gs.AdjustPromoSellingSetting",lMsg)
end

--Promotion list
function DataCompanyModel:m_QueryPromote(buildingId,isSeller)
    local player = DataManager.GetMyPersonalHomepageInfo()
    local lMsg = {isSeller = isSeller , playerId = player.id , sellerBuildingId = buildingId}
    DataManager.ModelSendNetMes("gscode.OpCode", "adQueryPromotion","gs.AdQueryPromotion",lMsg)
end

--Promotion ability list
function DataCompanyModel:m_queryPromoCurAbilitys(buildingId,typeIds)
    DataManager.ModelSendNetMes("gscode.OpCode", "adQueryPromoCurAbilitys","gs.AdQueryPromoCurAbilitys",{sellerBuildingId = buildingId,typeIds= typeIds})
end

--Get a list of promotional capabilities
function DataCompanyModel:m_queryPromotionItemInfo(buildingId,typeIds)
    local playerId = DataManager.GetMyOwnerID()
    DataManager.ModelSendNetMes("gscode.OpCode", "queryPromotionItemInfo","gs.QueryPromotionItemInfo",{playerId = playerId,buildingId = buildingId,typeIds= typeIds})
end

--Promotion history curve
function DataCompanyModel:m_PromoAbilityHistory(buildingId,typeIds)
    local currentTime = TimeSynchronized.GetTheCurrentTime()    --服务器当前时间(毫秒)
    local ts = getFormatUnixTime(currentTime/1000)

    currentTime = currentTime - 24*3600000          --提前24小时
    local lMsg = {sellerBuildingId = buildingId,startTs = currentTime, typeIds = {typeIds}, recordsCount = 24 }

    DataManager.ModelSendNetMes("gscode.OpCode", "adGetPromoAbilityHistory","gs.AdGetPromoAbilityHistory",lMsg)
end

--Signing curve
function DataCompanyModel:_reqLiftCurve(buildingId)
    local msgId = pbl.enum("sscode.OpCode","queryBuildingLift")
    local lMsg = { id = buildingId }
    local pMsg = assert(pbl.encode("ss.Id", lMsg))
    CityEngineLua.Bundle:newAndSendMsgExt(msgId, pMsg, CityEngineLua._tradeNetworkInterface1)
end

--Sign up
function DataCompanyModel:m_GetAllMyFlowSign(buildingId)
    DataManager.ModelSendNetMes("gscode.OpCode", "adGetAllMyFlowSign","gs.GetAllMyFlowSign",{buildingId = buildingId})
end

--Recommended price
function DataCompanyModel:m_promotionGuidePrice(buildingId,playerId)
    DataManager.ModelSendNetMes("gscode.OpCode", "promotionGuidePrice","gs.PromotionMsg",{buildingId = buildingId , playerId = playerId})
end

--Server callback
function DataCompanyModel:n_OnPublicFacility(info)
    DataManager.ControllerRpcNoRet(self.insId,"DataCompanyCtrl", '_receivePromoteCompanyDetailInfo',info)
end

-- Investigation speed callback
function DataCompanyModel:n_OnSurveySpeed(info)
    Event.Brocast("c_SurveySpeed",info)
end

--Add survey line
function DataCompanyModel:n_OnAddSurveyLine(info)
    Event.Brocast("c_AddSurveyLien",info)
end

--Change of survey line
function DataCompanyModel:n_OnSurveyLineUpdData(info)
    Event.Brocast("part_SurveyLineUpData",info)
end

--The survey line is completed
function DataCompanyModel:n_OnSurveyLineFinish(info)
   Event.Brocast("part_SurveyLineFinish",info)
   self:m_detailPublicFacility(info.buildingId)
end

--Delete survey line
function DataCompanyModel:n_OnDelSurveyLine(info)
    self:m_detailPublicFacility(info.buildingId)
end

--Top Survey Line
function DataCompanyModel:n_OnTopSurveyLine(info)
    self:m_detailPublicFacility(info.buildingId)
end

--Use credit callback
function DataCompanyModel:n_OnUserData(info)
    self:m_detailPublicFacility(info.buildingId)
    Event.Brocast("part_UserData",info)
    local data = {}
    data.num = info.num
    data.pointNum = info.pointNum
    ct.OpenCtrl("GetCountCtrl",data)
end

-- Purchase points callback
function DataCompanyModel:n_OnBuyData(info)
    self:m_detailPublicFacility(info.buildingId)
    Event.Brocast("c_BuyCount",info)
    if info.buyerId == DataManager.GetMyOwnerID() then
        local data = {}
        data.num = info.item.n
        data.pointNum = info.typePointAllNum
        ct.OpenCtrl("GetCountCtrl",data)
    end
end

--Get warehouse data callback
function DataCompanyModel:n_OnDataBase(info)
    Event.Brocast("c_DataBase",info)
end

--Put on shelf
function DataCompanyModel:n_OnAddShelf(info)
    Event.Brocast("c_AddShelf",info)
end

--Edit shelves
function DataCompanyModel:n_OnSetShelf(info)
    Event.Brocast("c_SetShelf",info)
end

--Off shelf
function DataCompanyModel:n_OnDelShelf(info)
    Event.Brocast("c_DelShelf",info)
end

--Recommended pricing
function DataCompanyModel:n_OnRecommendPrice(info)
    Event.Brocast("c_RecommendPrice",info)
end

--Add promotion callback
function DataCompanyModel:n_OnAddPromote(info)
    DataCompanyModel:m_detailPublicFacility(info.sellerBuildingId)
    if info.buildingType == 1300 or info.buildingType == 1400 then
        Event.Brocast("c_ClosePromoteBuildingExtension")
    else
        Event.Brocast("c_ClosePromoteGoodsExtension")
    end
end

--Delete promotion callback
function DataCompanyModel:n_OnRemovePromo(info)
    DataCompanyModel:m_detailPublicFacility(info.buildingId)
    local newData = {}
    --newData = ct.deepCopy(self.data)
    newData = self.data
    if true then

    end
    if self.data and info.PromoTsChanged then
        for i, v in pairs(self.data) do
            for k, z in pairs(info.PromoTsChanged) do
                if v.promotionId == z.promotionId then
                    newData[i].createTs = z.promStartTs
                    newData[i].queneTime = z.promStartTs
                    newData[i].promStartTs = z.promStartTs
                end
            end
        end
    end
    for i, v in pairs(self.data) do
        if v.promotionId == info.promotionId then
            table.remove(newData,i)
        end
    end
    if next(newData) == nil then
        newData = nil
    end
    Event.Brocast("c_updateQuque",{name = "View/GoodsItem/QueueItem",data =newData,insClass = PromoteQueueItem})
end

--Promotion setting callback
function DataCompanyModel:n_OnPromotionSetting(info)
    DataCompanyModel:m_detailPublicFacility(info.sellerBuildingId)
    Event.Brocast("c_CloseSetOpenUp")
end

--Promotion list callback
function DataCompanyModel:n_OnQueryPromotion(info)
    if not info.Promotions then
       return
    end
    self.data = {}
    for i, v in pairs(info.Promotions) do
       self.data[i] = v
        self.data[i].createTs = v.promStartTs
        self.data[i].queneTime = v.promStartTs
        self.data[i].proposerId = v.buyerId
    end
    ct.OpenCtrl("QueneCtrl",{name = "View/GoodsItem/QueueItem",data = self.data,insClass = PromoteQueueItem})
end

--Promotion ability callback
function DataCompanyModel:n_OnAdQueryPromoCurAbilitys(info)
    DataManager.ControllerRpcNoRet(self.insId,"DataCompanyCtrl", '_queryPromoCurAbilitys', info)
end

--Get promotion ability callback
function DataCompanyModel:n_OnPromotionItemInfo(info)
    DataManager.ControllerRpcNoRet(self.insId,"DataCompanyCtrl", '_queryPromoCurItemInfo', info)
end

-- Promotion history curve callback
function DataCompanyModel:n_OnPromoAbilityHistory(info)
    DataManager.ControllerRpcNoRet(self.insId,"PromoteCurveCtrl", 'm_PromoteHistoryCurve', info.recordsList[1].list)
end

--Signing back
function DataCompanyModel:n_OnGetAllMyFlowSign(info)
    local a = info
    --DataManager.ControllerRpcNoRet(self.insId,"AdBuildingSignDetailPart", 'm_GetAllMyFlowSign', info.info)
    Event.Brocast("m_GetAllMyFlowSign",info.info)
end

--Signing curve callback
function DataCompanyModel:n_OnGetLiftCurve(info)
    --DataManager.ControllerRpcNoRet(self.insId,"PromoteSignCurveCtrl", 'c_PromoteSignCurve', info)
    Event.Brocast("c_PromoteSignCurve",info)
end

--Employee salary change
function DataCompanyModel:n_OnReceiveHouseSalaryChange(data)
    DataManager.ControllerRpcNoRet(self.insId,"DataCompanyCtrl", '_refreshSalary', data)
end
--Successful opening, request building details again
function DataCompanyModel:n_OnReceiveOpenBusiness(data)
    if data ~= nil and data.id == self.insId then
        self:m_detailPublicFacility(self.insId)
        Event.Brocast("SmallPop", GetLanguage(24020018), ReminderType.Succeed)  
    end
end

--Recommended pricing
function DataCompanyModel:n_OnGuidePrice(info)
    Event.Brocast("c_GuidePrice",info)
end