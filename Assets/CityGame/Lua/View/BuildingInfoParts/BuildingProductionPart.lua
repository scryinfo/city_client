---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Fisher.
--- DateTime: 2019/4/12 14:57
---建筑主界面生产线

BuildingProductionPart = class("BuildingProductionPart",BasePart)

function BuildingProductionPart:PrefabName()
    return "BuildingProductionPart"
end

function BuildingProductionPart:GetDetailClass()
    return BuildingProductionDetailPart
end

function BuildingProductionPart:_InitTransform()
    self:_getComponent(self.transform)
end

function BuildingProductionPart:RefreshData(data)
    if not self.materialOrGoodsInfo or next(self.materialOrGoodsInfo) == nil then
        if data.buildingType == BuildingType.MaterialFactory then
            Event.Brocast("m_ReqBuildingMaterialInfo",data.insId)
        elseif data.buildingType == BuildingType.ProcessingFactory then
            Event.Brocast("m_ReqBuildingGoodsInfo",data.insId)
        end
    else
        self:_initFunc()
    end
    if data == nil then
        return
    end
    self.m_data = data
    self:_language()
end

function BuildingProductionPart:_ResetTransform()
    --关闭Update
    UpdateBeat:Remove(self.Update,self)
    Event.RemoveListener("partUpdateNowCount",self.updateNowCount,self)
    Event.RemoveListener("partUpdateNowLine",self.updateNowLine,self)
    Event.RemoveListener("partUpdateAddLine",self.updateAddLine,self)
    Event.RemoveListener("saveMaterialOrGoodsInfoPart",self.saveMaterialOrGoodsInfo,self)
end

function BuildingProductionPart:_getComponent(transform)
    if transform == nil then
        return
    end
    self.TopLineInfo = transform:Find("Top/TopLineInfo")
    self.goodsIcon = transform:Find("Top/TopLineInfo/goodsIcon"):GetComponent("Image")
    self.timeText = transform:Find("Top/TopLineInfo/timeText"):GetComponent("Text")
    self.numberSlider = transform:Find("Top/TopLineInfo/numberSlider"):GetComponent("Slider")
    self.numberText = transform:Find("Top/TopLineInfo/numberSlider/numberText"):GetComponent("Text")
    self.tipText = transform:Find("Top/tipText"):GetComponent("Text")
    self.unselectTitleText = transform:Find("UnselectBtn/titleText"):GetComponent("Text")
    self.selectTitleText = transform:Find("SelectBtn/titleText"):GetComponent("Text")
end

function BuildingProductionPart:_InitChildClick(mainPanelLuaBehaviour)
    Event.AddListener("partUpdateNowCount",self.updateNowCount,self)
    Event.AddListener("partUpdateNowLine",self.updateNowLine,self)
    Event.AddListener("partUpdateAddLine",self.updateAddLine,self)
    Event.AddListener("saveMaterialOrGoodsInfoPart",self.saveMaterialOrGoodsInfo,self)
end

function BuildingProductionPart:_initFunc()
    self.Capacity = self:getWarehouseCapacity()
    if not self.m_data.line or next(self.m_data.line) == nil then
        self.TopLineInfo.transform.localScale = Vector3.zero
        self.tipText.transform.localScale = Vector3.one
    else
        self.TopLineInfo.transform.localScale = Vector3.one
        self.tipText.transform.localScale = Vector3.zero
        self.itemId = self.m_data.line[1].itemId

        if self.m_data.buildingType == BuildingType.MaterialFactory then
            LoadSprite(Material[self.m_data.line[1].itemId].img,self.goodsIcon,false)
        elseif self.m_data.buildingType == BuildingType.ProcessingFactory then
            LoadSprite(Good[self.m_data.line[1].itemId].img,self.goodsIcon,false)
        end
        self.numberSlider.maxValue = self.m_data.line[1].targetCount
        self.numberSlider.value = self.m_data.line[1].nowCount
        self.numberText.text = self.numberSlider.value.."/"..self.numberSlider.maxValue
        if self.time == nil then
            self.timeText.text = self:GetTime(self.m_data.line[1])
            UpdateBeat:Add(self.Update,self)
        end
        if self.Capacity == PlayerBuildingBaseData[self.m_data.info.mId].storeCapacity then
            UpdateBeat:Remove(self.Update,self)
            return
        else
            --是商品时
            local goodsKey = 22
            if math.floor(self.itemId / 100000) == goodsKey then
                --原料不足时
                if self:CheckMaterial(self.itemId) == false then
                    UpdateBeat:Remove(self.Update,self)
                    return
                end
            end
        end
    end
end
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
--设置多语言
function BuildingProductionPart:_language()
    self.unselectTitleText.text = GetLanguage(25010003)
    self.selectTitleText.text = GetLanguage(25010003)
    self.tipText.text = GetLanguage(25030027)
end
--计算总时间
function BuildingProductionPart:GetTime(lineData)
    local remainingNum = lineData.targetCount - lineData.nowCount
    if remainingNum == 0 then
        return "00:00:00"
    end
    if self.m_data.buildingType == BuildingType.MaterialFactory then
        --self.time = remainingNum / (Material[lineData.itemId].numOneSec * lineData.workerNum)
        self.time = remainingNum / self:getNumOneSec(lineData.itemId)
    elseif self.m_data.buildingType == BuildingType.ProcessingFactory then
        --self.time = remainingNum / (Good[lineData.itemId].numOneSec * lineData.workerNum)
        self.time = remainingNum / self:getNumOneSec(lineData.itemId)
    end
    local timeTable = getTimeBySec(self.time)
    local timeStr = timeTable.hour..":"..timeTable.minute..":"..timeTable.second
    return timeStr
end
--刷新时间
function BuildingProductionPart:Update()
    if self.time == nil or self.time <= 0 then
        self.TopLineInfo.transform.localScale = Vector3.zero
        self.tipText.transform.localScale = Vector3.one
        UpdateBeat:Remove(self.Update,self)
        return
    end
    if self.Capacity == PlayerBuildingBaseData[self.m_data.info.mId].storeCapacity then
        UpdateBeat:Remove(self.Update,self)
        return
    else
        --是商品时
        local goodsKey = 22
        if math.floor(self.itemId / 100000) == goodsKey then
            --原料不足时
            if self:CheckMaterial(self.itemId) == false then
                UpdateBeat:Remove(self.Update,self)
                return
            end
        end
    end
    self.time = self.time - UnityEngine.Time.unscaledDeltaTime
    local timeTable = getTimeBySec(self.time)
    local timeStr = timeTable.hour..":"..timeTable.minute..":"..timeTable.second
    self.timeText.text = timeStr
end
------------------------------------------------------------------------------------回调函数------------------------------------------------------------------------------------
--缓存获取到当前建筑Eva加点后的生产速度(原料信息，商品信息)
function BuildingProductionPart:saveMaterialOrGoodsInfo(data)
    if data then
        if not self.materialOrGoodsInfo then
            self.materialOrGoodsInfo = data
            self.materialOrGoodsInfo.buildingType = self.m_data.buildingType
            self.materialOrGoodsInfo.mId = self.m_data.info.mId
            self:_initFunc()
            ----TODO:测试调用方法把变转成配置表
            BuildingProductionPart.test = {}
            --self:testTable()
        else
            return
        end
    end
end
--刷新当前产量
function BuildingProductionPart:updateNowCount(data)
    if data ~= nil then
        self.numberSlider.maxValue = self.m_data.line[1].targetCount
        self.numberSlider.value = data.nowCount
        self.numberText.text = self.numberSlider.value.."/"..self.numberSlider.maxValue
        self.m_data.line[1].nowCount = data.nowCount
    end
end
--删除正在生产中的线
function BuildingProductionPart:updateNowLine(data)
    if data ~= nil then
        for key,value in pairs(self.m_data.line) do
            if data.lineId == value.id then
                table.remove(self.m_data.line,key)
            end
        end
        self.time = nil
        UpdateBeat:Remove(self.Update,self)
        --重新初始化界面
        self:_initFunc()
    end
end
--添加生产线
function BuildingProductionPart:updateAddLine(data)
    if data ~= nil then
        if not self.m_data.line then
            self.m_data.line = {}
        end
        self.m_data.line[#self.m_data.line + 1] = data.line
        UpdateBeat:Remove(self.Update,self)
        --重新初始化界面
        self:_initFunc()
    end
end
--如果生产中是商品，检查原料够不够
function BuildingProductionPart:CheckMaterial(itemId)
    --如果仓库是空的
    if not self.m_data.store.inHand or next(self.m_data.store.inHand) == nil then
        return false
    end
    --如果仓库不是空的
    local material = CompoundDetailConfig[itemId].goodsNeedMatData
    local materialNum = {}
    local isMeet = false
    --生产中商品需要的原料
    for key,value in pairs(material) do
        --仓库中有的原料
        isMeet = false
        for key1,value1 in pairs(self.m_data.store.inHand) do
            if value1.key.id == value.itemId then
                materialNum[#materialNum + 1] = math.floor(value1.n / value.num)
                isMeet = true
            end
            if isMeet == false then
                materialNum[#materialNum + 1] = 0
            end
        end
    end
    table.sort(materialNum)
    --最少能生产的数量
    self.lineMinValue = materialNum[1]
    local minValue = materialNum[1]
    if minValue <= 0 then
        return false
    else
        return true
    end
end
--获取仓库容量，如果仓库容量已满，停止时间刷新
function BuildingProductionPart:getWarehouseCapacity()
    local warehouseNowCount = 0
    local lockedNowCount = 0
    if not self.m_data.store.inHand then
        warehouseNowCount = 0
    else
        for key,value in pairs(self.m_data.store.inHand) do
            warehouseNowCount = warehouseNowCount + value.n
        end
    end
    if not self.m_data.store.locked then
        lockedNowCount = 0
    else
        for key,value in pairs(self.m_data.store.locked) do
            lockedNowCount = lockedNowCount + value.n
        end
    end
    return warehouseNowCount + lockedNowCount
end
--获取当前生产中的秒产量(含Eva)
function BuildingProductionPart:getNumOneSec(itemId)
    if not self.materialOrGoodsInfo or next(self.materialOrGoodsInfo) == nil then
        if self.m_data.buildingType == BuildingType.MaterialFactory then
            return Material[itemId].numOneSec
        elseif self.m_data.buildingType == BuildingType.ProcessingFactory then
            return Good[itemId].numOneSec
        end
    else
        for key,value in pairs(self.materialOrGoodsInfo.items) do
            if value.key == itemId then
                return value.numOneSec
            end
        end
    end
end
--TODO:测试发明，最后要改成在登录时转出该表，后期维护更新这个表
--TODO:测试把服务器发过来的可以生产的表转成另一张配置表（要在退出当前建筑的时候清空）
local ToNumber = tonumber
local StringSub = string.sub
function BuildingProductionPart:testTable()
    local allMaterialAndGoods = DataManager.GetAllMaterialAndGoods()
    if allMaterialAndGoods then
        --TODO   如:2101001-2252101
        --TODO   1、itemId前两位代表类型（如：21代表原料，22代表商品）
        --TODO   2、itemId第三四位代表小类型（如：01食品，02副食品，03基础材料）
        --TODO   3、20020001--(食材)   20020002--(生产原料)   20030001--(服装)   20030002--(食物)
        local materialFood,materialProductionMaterial,goodFood,goodClothing = 2101,2102,2251,2252
        for key,value in pairs(allMaterialAndGoods) do
            if BuildingProductionPart.test[ToNumber(StringSub(value,1,4))] == nil then
                BuildingProductionPart.test[ToNumber(StringSub(value,1,4))] = {}
            end
            local data = {}
            data.itemId = value
            if ToNumber(StringSub(value,1,4)) == materialFood then
                data.itemType= 0
                data.name = 20020001
            elseif ToNumber(StringSub(value,1,4)) == materialProductionMaterial then
                data.itemType= 0
                data.name = 20020002
            elseif ToNumber(StringSub(value,1,4)) == goodFood then
                data.itemType= 1
                data.name = 20030002
            elseif ToNumber(StringSub(value,1,4)) == goodClothing then
                data.itemType= 1
                data.name = 20030001
            end
            table.insert(BuildingProductionPart.test[ToNumber(StringSub(value,1,4))], data)
        end
    end
end