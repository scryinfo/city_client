---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Tina.
--- DateTime: 2018/12/14 17:16
---

SocialityManager = class('SocialityManager')

function SocialityManager:initialize()
    self.m_friends = {}
    self.m_chatInfo = {}
    self.m_chatByType = {{}, {}, {}}
    self.m_friendsApply = {}
    self.m_blacklist = {}
end

function SocialityManager:SetMyFriends(friendsData)
    if friendsData.id then
        self.m_friends[friendsData.id] = friendsData.b
    end
end

function SocialityManager:GetMyFriends()
    local friendsIdTemp = {}
    for i, v in pairs(self.m_friends) do
        if v ~= nil then
            table.insert(friendsIdTemp, {id = i, b = v})
        end
    end
    return friendsIdTemp
end

function SocialityManager:SetMyChatInfo(chatData)
    table.insert(self.m_chatInfo, chatData)
    if chatData.channel == "WORLD" then
        table.insert(self.m_chatByType[1], chatData)
    elseif chatData.channel == "FRIEND" then
        local dataId
        if DataManager.GetMyOwnerID() == chatData.id then
            dataId = chatData.channelId
        else
            dataId = chatData.id
        end
        if not self.m_chatByType[2][dataId] then
            self.m_chatByType[2][dataId] = {}
        end
        if not self.m_chatByType[2][dataId].unread then
            self.m_chatByType[2][dataId].unread = {}
        end
        if DataManager.GetMyOwnerID() ~= chatData.id then
            if self.m_chatByType[2][dataId].unreadNum then
                self.m_chatByType[2][dataId].unreadNum = self.m_chatByType[2][dataId].unreadNum + 1
            else
                self.m_chatByType[2][dataId].unreadNum = 1
            end
        end
        table.insert(self.m_chatByType[2][dataId].unread, chatData)
    elseif chatData.channel == "UNKNOWN" then
        local dataId
        if DataManager.GetMyOwnerID() == chatData.id then
            dataId = chatData.channelId
        else
            dataId = chatData.id
        end
        if not self.m_chatByType[3][dataId] then
            self.m_chatByType[3][dataId] = {}
        end
        if not self.m_chatByType[3][dataId].unread then
            self.m_chatByType[3][dataId].unread = {}
        end
        if DataManager.GetMyOwnerID() ~= chatData.id then
            if self.m_chatByType[3][dataId].unreadNum then
                self.m_chatByType[3][dataId].unreadNum = self.m_chatByType[3][dataId].unreadNum + 1
            else
                self.m_chatByType[3][dataId].unreadNum = 1
            end
        end
        table.insert(self.m_chatByType[3][dataId].unread, chatData)
    end
end

function SocialityManager:SetMyReadChatInfo(index, id)
    if not self.m_chatByType[index][id] then
        return
    end
    if not self.m_chatByType[index][id].read then
        self.m_chatByType[index][id].read = {}
    end
    for _, v in ipairs(self.m_chatByType[index][id].unread) do
        table.insert(self.m_chatByType[index][id].read, v)
    end
    self.m_chatByType[index][id].unread = {}
    self.m_chatByType[index][id].unreadNum = 0
end

--1 获取世界消息 2 获取好友消息 3 获取陌生人消息
function SocialityManager:GetMyChatInfo(index)
    return self.m_chatByType[index]
end

--全部信息
function SocialityManager:GetMyAllChatInfo()
    return self.m_chatInfo
end

--获取自己好友申请信息
function SocialityManager:GetMyFriendsApply()
    return self.m_friendsApply
end

--刷新自己好友申请信息
--参数： tempData==>  RequestFriend
--如果需要删除好友申请，ByteBool={ id = "XXXXXXXX",name = nil }
function SocialityManager:SetMyFriendsApply(tempData)
    if tempData.id and tempData.name then
        table.insert(self.m_friendsApply, tempData)
    elseif tempData.itemId and not tempData.id then
        table.remove(self.m_friendsApply, tempData.itemId)
    end
end

--获取自己黑名单
function SocialityManager:GetMyBlacklist()
    return self.m_blacklist
end

--刷新自己黑名单
--参数： tempData==>  Bytes
--如果需要删除黑名单，tempData={ id = "XXXXXXXX",name = nil }
function SocialityManager:SetMyBlacklist(tempData)
    if tempData.id and tempData.name then
        table.insert(self.m_blacklist, tempData)
    elseif tempData.id and not tempData.name then
        for i, v in ipairs(self.m_blacklist) do
            if v.id == tempData.id then
                table.remove(self.m_blacklist, i)
                break
            end
        end
    end
end