---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by fisher.
--- DateTime: 2019/3/4 15:50
---
LineItem = class("LineItem")
local LastTime = 0
local nowTime = 0
local Math_Floor = math.floor
local Math_Ceil = math.ceil
--主页生产线
function LineItem:initialize(lineInfo,prefab,LuaBehaviour,buildingId,materialData,Capacity)
    self.prefab = prefab;
    self.lineInfo = lineInfo
    self.itemId = lineInfo.itemId
    self.lineId = lineInfo.id
    self.workerNum = lineInfo.workerNum
    self.buildingId = buildingId
    self.materialData = materialData
    self.Capacity = Capacity

    self.itemGoodsbg = self.prefab.transform:Find("itembg/itemGoodsbg")
    self.itemMaterialbg = self.prefab.transform:Find("itembg/itemMaterialbg")
    self.brandbg = self.prefab.transform:Find("itembg/brandbg")
    self.brandName = self.prefab.transform:Find("itembg/brandbg/brandName"):GetComponent("Text")
    self.brand = self.prefab.transform:Find("itembg/brand")
    self.brandValue = self.prefab.transform:Find("itembg/brand/brandValue"):GetComponent("Text")   --品牌评分
    self.quality = self.prefab.transform:Find("itembg/quality")
    self.qualityValue = self.prefab.transform:Find("itembg/quality/qualityValue"):GetComponent("Text")   --品质评分
    self.nameText = self.prefab.transform:Find("itembg/nameText"):GetComponent("Text")
    self.icon = prefab.transform:Find("itembg/icon"):GetComponent("Image")
    self.accreditIcon = prefab.transform:Find("itembg/accreditIcon")
    self.timeText = prefab.transform:Find("time/timeText"):GetComponent("Text")
    self.productionSlider = prefab.transform:Find("productionSlider"):GetComponent("Slider")
    self.numberText = prefab.transform:Find("numberText"):GetComponent("Text")
    self.deleteBtn = prefab.transform:Find("deleteBtn")
    self.countdownText = prefab.transform:Find("countdownText"):GetComponent("Text")
    self.tip = prefab.transform:Find("tipImg")
    self.tipText = prefab.transform:Find("tipImg/Text"):GetComponent("Text")

    self:InitializeData()
    LuaBehaviour:AddClick(self.deleteBtn.gameObject,self.OnClick_deleteBtn,self)
    Event.AddListener("c_refreshNowConte",self.refreshNowConte,self)
end
--生产线初始化
function LineItem:InitializeData()
    local materialKey,goodsKey = 21,22  --商品类型
    if Math_Floor(self.itemId / 100000) == materialKey then
        --生产一个需要的时间
        self.OneTotalTime = self:GetNumOneTime(Material[self.itemId].numOneSec,self.workerNum)
        self.brandbg.localScale = Vector3.zero
        self.brand.localScale = Vector3.zero
        self.quality.localScale = Vector3.zero
        self.itemGoodsbg.localScale = Vector3.zero
        LoadSprite(Material[self.itemId].img,self.icon,false)
    elseif Math_Floor(self.itemId / 100000) == goodsKey then
        --生产一个需要的时间
        self.OneTotalTime = self:GetNumOneTime(Good[self.itemId].numOneSec,self.workerNum)
        self.brandbg.localScale = Vector3.one
        self.brand.localScale = Vector3.zero
        self.quality.localScale = Vector3.zero
        self.itemMaterialbg.localScale = Vector3.zero
        LoadSprite(Good[self.itemId].img,self.icon,false)
        ---self.brandValue =
        ---self.qualityValue =
    end
    --生产开始的时间
    self.startTime = self.lineInfo.ts
    --服务器当前时间
    self.nowTime = TimeSynchronized.GetTheCurrentServerTime()
    --已经生产的时间
    self.remainTime = self.nowTime - self.startTime

    self.brandName.text = GetLanguage(4301011)
    self.nameText.text = GetLanguage(self.itemId)
    self.accreditIcon.localScale = Vector3.zero

    local number = {}
    number["num1"] = self.lineInfo.nowCount
    number["num2"] = self.lineInfo.targetCount
    number["col1"] = "blue"
    number["col2"] = "black"
    self.numberText.text = getColorString(number)
    self.productionSlider.maxValue = Math_Ceil(self.OneTotalTime / 1000)
    self.productionSlider.value = Math_Ceil((self.OneTotalTime - (self.remainTime % self.OneTotalTime) )/ 1000)
    self.countdownText.text = self:GetStringTime((self.productionSlider.maxValue - self.productionSlider.value) * 1000)
    self.timeText.text = self:GetTime(self.lineInfo.targetCount,self.lineInfo.nowCount,self.lineInfo.workerNum)


    --生产中检查仓库容量是否足够
    if self:CheckCapacity() == false then
        self.tip.transform.localScale = Vector3.one
        self.tipText.text = "仓库已满"
        self.productionSlider.value = 0
        self.countdownText.text = "00:00"
        UpdateBeat:Remove(self.Update,self);
        return
    end

    if Math_Floor(self.itemId / 100000) == materialKey then
        UpdateBeat:Add(self.Update,self)
    elseif Math_Floor(self.itemId / 100000) == goodsKey then
        --初始化时判断原料是否足够
        if self:CheckMaterial(self.itemId) == true then
            --关闭提示原料不足，打开时间刷新
            self.tip.transform.localScale = Vector3.zero
            UpdateBeat:Add(self.Update,self)
        elseif self:CheckMaterial(self.itemId) == false then
            --打开提示原料不足，关闭时间刷新
            self.tip.transform.localScale = Vector3.one
            self.tipText.text = "Raw material shortage"
            self.productionSlider.value = 0
            self.countdownText.text = "00:00"
            UpdateBeat:Remove(self.Update,self);
        end
    end
end
--计算总时间
function LineItem:GetTime(targetCount,nowCount,workerNum)
    local remainingNum = targetCount - nowCount
    if remainingNum == 0 then
        return "00:00:00"
    end
    local materialKey,goodsKey = 21,22  --商品类型
    if Math_Floor(self.itemId / 100000) == materialKey then
        self.time = remainingNum / (Material[self.itemId].numOneSec * workerNum)
    elseif Math_Floor(self.itemId / 100000) == goodsKey then
        self.time = remainingNum / (Good[self.itemId].numOneSec * workerNum)
    end
    local timeTable = getTimeBySec(self.time)
    local timeStr = timeTable.hour..":"..timeTable.minute..":"..timeTable.second
    return timeStr
end
--生产一个需要的时间(毫秒)
function LineItem:GetNumOneTime(numOneSec,workerNum)
    local seconds = 1 / (numOneSec * workerNum)
    local ms = seconds * 1000
    return ms
end
--转换时间 时分秒
function LineItem:GetStringTime(ms)
    local timeTable = getTimeBySec(ms / 1000)
    local timeStr = timeTable.minute..":"..timeTable.second
    return timeStr
end
--刷新时间
function LineItem:Update()
    --生产中检查仓库容量是否足够
    if self:CheckCapacity() == false then
        self.tip.transform.localScale = Vector3.one
        self.tipText.text = "仓库已满"
        self.productionSlider.value = 0
        self.countdownText.text = "00:00"
        UpdateBeat:Remove(self.Update,self);
        return
    end
    --如果是商品，检查原料够不够
    if Math_Floor(self.itemId / 100000) == 22 then
        if self.lineMinValue < 0 then
            --打开提示原料不足，关闭时间刷新
            self.tip.transform.localScale = Vector3.one
            self.tipText.text = "Raw material shortage"
            self.productionSlider.value = 0
            self.countdownText.text = "00:00"
            UpdateBeat:Remove(self.Update,self)
        end
    end
    --检查生产线总时间
    if self.time <= 0 then
        self.timeText.text = "00:00:00"
        self.countdownText.text = "00:00"
        self.productionSlider.value = 0
        UpdateBeat:Remove(self.Update,self)
        return
    end
    self.time = self.time - UnityEngine.Time.unscaledDeltaTime
    local timeTable = getTimeBySec(self.time)
    local timeStr = timeTable.hour..":"..timeTable.minute..":"..timeTable.second
    self.timeText.text = timeStr

    ---单个时间---
    --生产开始的时间
    self.startTime = self.lineInfo.ts
    --服务器当前时间
    self.nowTime = TimeSynchronized.GetTheCurrentServerTime()
    --已经生产的时间
    self.remainTime = self.nowTime - self.startTime
    --当前一个已经生产的时间
    local thisTime = (self.remainTime % self.OneTotalTime)
    nowTime = nowTime + UnityEngine.Time.unscaledDeltaTime * 1000
    if LastTime ~= thisTime then
        LastTime = thisTime
        nowTime = thisTime
    end
    if (nowTime /self.OneTotalTime) >= 1 then
        nowTime = 0
    end
    self.productionSlider.value = (nowTime /self.OneTotalTime) * self.productionSlider.maxValue
    self.countdownText.text = self:GetStringTime((self.productionSlider.maxValue - self.productionSlider.value + 1) * 1000)
    if self.time <= 0 then
        self.timeText.text = "00:00:00"
        self.countdownText.text = "00:00"
        self.productionSlider.value = 0
        UpdateBeat:Remove(self.Update,self)
        return
    end
end
--刷新目前产量
function LineItem:refreshNowConte(dataInfo)
    if not dataInfo then
        return
    end
    self.Capacity = self.Capacity - 1
    --ct.log("fisher_w31_time","当前仓库剩余容量是==="..self.Capacity)

    if Math_Floor(self.itemId / 100000) == 22 then
        self.lineMinValue = self.lineMinValue - 1
        --ct.log("fisher_w31_time","当前原料还能生产==="..self.lineMinValue.."  个")
    end

    local number = {}
    number["num1"] = dataInfo.nowCount
    number["num2"] = self.lineInfo.targetCount
    number["col1"] = "blue"
    number["col2"] = "black"
    if HomeProductionLineItem.lineItemTable ~= nil then
        for key,value in pairs(HomeProductionLineItem.lineItemTable) do
            value.numberText.text = getColorString(number)
        end
    end
    local nowGoodsData = {}
    if not dataInfo.iKey.producerId then
        nowGoodsData.itemId = dataInfo.iKey.id
        nowGoodsData.nowCountStore = dataInfo.nowCountInStore
    else
        nowGoodsData.itemId = dataInfo.iKey.id
        nowGoodsData.producerId = dataInfo.iKey.producerId
        nowGoodsData.qty = dataInfo.iKey.qty
        nowGoodsData.nowCountStore = dataInfo.nowCountInStore
    end
    Event.Brocast("updateWarehouseNum")
    Event.Brocast("updateWarehouseData",nowGoodsData)
end
--如果生产中是商品，检查原料够不够
function LineItem:CheckMaterial(itemId)
    --如果仓库是空的
    if next(self.materialData) == nil then
        return false
    end
    --如果仓库不是空的
    local material = CompoundDetailConfig[itemId].goodsNeedMatData
    local materialNum = {}
    local isMeet = false
    --生产中商品需要的原料
    for key,value in pairs(material) do
        --仓库中有的原料
        for key1,value1 in pairs(self.materialData.inHand) do
            if value1.key.id == value.itemId then
                materialNum[#materialNum + 1] = Math_Floor(value1.n / value.num)
                isMeet = true
            end
        end
        if isMeet == false then
            materialNum[#materialNum + 1] = 0
        end
    end
    table.sort(materialNum)
    --最少能生产的数量
    self.lineMinValue = materialNum[1]
    local minValue = materialNum[1]
    if minValue <= 0 then
        return false
    else
        return true
    end
end
--生产中检查仓库容量是否足够
function LineItem:CheckCapacity()
    if self.Capacity <= 0 then
        return false
    end
    return true
end
--删除生产线
function LineItem:OnClick_deleteBtn(go)
    PlayMusEff(1002)
    Event.Brocast("DeleteLine",go)
end
--移除事件
function LineItem:closeEvent()
    UpdateBeat:Remove(self.Update,self);
    Event.RemoveListener("c_refreshNowConte",self)
end