---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xuyafang.
--- DateTime: 2019/2/27 18:13
---
MapGroundAucItem = class('MapGroundAucItem', MapBubbleBase)
MapGroundAucItem.nowColor = Vector3.New(255, 179, 1)
MapGroundAucItem.soonColor = Vector3.New(121, 137, 197)
MapGroundAucItem.selectColor = Vector3.New(251, 88, 88)

EGAucState =
{
    NowBid = 1,  --Auctioning
    WaitToBid = 2,  --Waiting for bid
    Soon = 3  --Coming soon
}
--
function MapGroundAucItem:_childInit()
    self.scaleRoot = self.viewRect.transform:Find("root")  --The part to be zoomed

    local tran = self.viewRect.transform
    self.nowBgTran = tran:Find("root/bgRoot/nowBg")
    self.soonBgTran = tran:Find("root/bgRoot/soonBg")
    self.selectBgTran = tran:Find("root/bgRoot/selectBg")

    self.normalState = tran:Find("root/state/normal")
    self.typeText = tran:Find("root/state/normal/typeText"):GetComponent("Text")
    self.bottomBgImg = tran:Find("root/state/normal/bottomBg"):GetComponent("Image")
    self.timeText = tran:Find("root/state/normal/timeText"):GetComponent("Text")
    self.nowWaitState = tran:Find("root/state/nowWait")
    self.nowWaitStateText01 = tran:Find("root/state/nowWait/Text"):GetComponent("Text")

    self.clickBtn = tran:Find("root/btn"):GetComponent("Button")
    self.clickBtn.onClick:AddListener(function ()
        PlayMusEff(1002)
        self:_openGroundAucFunc()
    end)

    Event.AddListener("c_BidInfoUpdate", self._bidInfoUpdate, self)  --Auction information update

    self.nowWaitStateText01.text = GetLanguage(21010001)
    self:initData(self.data)
end
--
function MapGroundAucItem:initData(data)
    self.data = data

    self.timeDown = true
    self.selectBgTran.localScale = Vector3.zero
    if self.data.detailData.isStartAuc == true then
        --Determine if there is a bid
        if data.detailData.bidHistory == nil or #data.detailData.bidHistory == 0 then
            self.isStartBid = false
            self.state = EGAucState.WaitToBid
        else
            self.isStartBid = true
            self.state = EGAucState.NowBid

            table.sort(self.data.detailData.bidHistory, function (m, n) return m.ts > n.ts end)
            self.data.detailData.endTs = self.data.detailData.bidHistory[1].ts + GAucModel.BidTime
        end
    else
        self.state = EGAucState.Soon
    end
    self:_toggleState(self.state)

    self.m_Timer = Timer.New(slot(self._itemTimer, self), 1, -1, true)
    self.m_Timer:Start()
end
--
function MapGroundAucItem:_toggleState(state)
    self.selectBgTran.localScale = Vector3.zero

    if state == EGAucState.NowBid then
        self.typeText.text = GetLanguage(21010001)
        self.typeText.color = getColorByVector3(MapGroundAucItem.nowColor)
        self.bottomBgImg.color = getColorByVector3(MapGroundAucItem.nowColor)
        self.nowBgTran.localScale = Vector3.one
        self.soonBgTran.localScale = Vector3.zero  --Background switching
        self.normalState.localScale = Vector3.one
        self.nowWaitState.localScale = Vector3.zero  --Status switch, is to bid or now/soon

    elseif state == EGAucState.Soon then
        self.typeText.text = GetLanguage(21010009)
        self.typeText.color = getColorByVector3(MapGroundAucItem.soonColor)
        self.bottomBgImg.color = getColorByVector3(MapGroundAucItem.soonColor)
        self.nowBgTran.localScale = Vector3.zero
        self.soonBgTran.localScale = Vector3.one
        self.normalState.localScale = Vector3.one
        self.nowWaitState.localScale = Vector3.zero

    elseif state == EGAucState.WaitToBid then
        self.nowBgTran.localScale = Vector3.one
        self.soonBgTran.localScale = Vector3.zero
        self.normalState.localScale = Vector3.zero
        self.nowWaitState.localScale = Vector3.one
        self.nowWaitStateText01.color = getColorByVector3(MapGroundAucItem.nowColor)
    end
end
--
function MapGroundAucItem:toggleShowSelect(show)
    if show == true then
        self.selectBgTran.localScale = Vector3.one
        self.nowBgTran.localScale = Vector3.zero
        self.soonBgTran.localScale = Vector3.zero

        self.typeText.color = getColorByVector3(MapGroundAucItem.selectColor)
        self.bottomBgImg.color = getColorByVector3(MapGroundAucItem.selectColor)
        self.nowWaitStateText01.color = getColorByVector3(MapGroundAucItem.selectColor)
    else
        self:_toggleState(self.state)
    end
end
--
function MapGroundAucItem:_itemTimer()
    if self.timeDown == true then
        self:NowTimeDownFunc()
        self:SoonTimeDownFunc()
    end
end
--Open the map auction page on the right
function MapGroundAucItem:_openGroundAucFunc()
    if self.data == nil then
        return
    end
    MapCtrl.selectCenterItem(self)
    Event.Brocast("c_MapOpenRightGAucPage", self)
end

--information update
function MapGroundAucItem:_bidInfoUpdate(data)
    if data.id == self.data.detailData.id then
        --if self.data.detailData.bidHistory == nil then
        --    self.data.detailData.bidHistory = {}
        --end
        --self.data.detailData.endTs = data.ts + GAucModel.BidTime
        --local temp = {biderId = data.biderId, price = data.price, ts = data.ts}
        --table.insert(self.data.detailData.bidHistory, 1, temp)

        self:_checkHighestPrice(data)
        self.isStartBid = true
        self.state = EGAucState.NowBid
        self:_toggleState(self.state)
    end
end
--Determine whether it is the highest price
function MapGroundAucItem:_checkHighestPrice(data)
    if self.data.detailData.bidHistory == nil then
        self.data.detailData.bidHistory = {}
        local temp = {biderId = data.biderId, price = data.price, ts = data.ts}
        table.insert(self.data.detailData.bidHistory, 1, temp)
        self.data.detailData.endTs = data.ts + GAucModel.BidTime
        return
    end

    local tempHigh = self.data.detailData.bidHistory[1]
    if tempHigh.price < data.price then
        local temp = {biderId = data.biderId, price = data.price, ts = data.ts}
        table.insert(self.data.detailData.bidHistory, 1, temp)
        self.data.detailData.endTs = data.ts + GAucModel.BidTime
    end
end
--
function MapGroundAucItem:_childClose()
    self.timeDown = false
    Event.RemoveListener("c_BidInfoUpdate", self._bidInfoUpdate, self)

    if self.m_Timer ~= nil then
        self.m_Timer:Stop()
    end
end
--Countdown on auction
function MapGroundAucItem:NowTimeDownFunc()
    if self.isStartBid == true then
        if self.data.detailData.endTs == nil then
            return
        end
        local finishTime = self.data.detailData.endTs
        local remainTime = finishTime - TimeSynchronized.GetTheCurrentServerTime()
        if remainTime <= 0 then
            self.timeDown = false
            self.isStartBid = false
            self:close()
            return
        end

        local timeTable = getFormatUnixTime(remainTime / 1000)
        local timeStr = timeTable.minute..":"..timeTable.second
        self.timeText.text = timeStr
    end
end
--Countdown to upcoming auction
function MapGroundAucItem:SoonTimeDownFunc()
    if self == nil or self.data == nil then
        return
    end
    if self.data.detailData.isStartAuc == false then
        local startAucTime = GroundAucConfig[self.data.detailData.id].beginTime * 1000
        local remainTime = startAucTime - TimeSynchronized.GetTheCurrentServerTime()
        if remainTime <= 0 then
            self.data.detailData.isStartAuc = true
            --Start auction
            self.state = EGAucState.WaitToBid
            self:_toggleState(self.state)
            Event.Brocast("c_BidStart", self.data.detailData)  --Switch interface
            return
        end

        local timeTable = getFormatUnixTime(remainTime / 1000)
        local timeStr = timeTable.minute..":"..timeTable.second
        self.timeText.text = timeStr
    end
end