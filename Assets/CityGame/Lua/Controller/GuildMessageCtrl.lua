---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Tina.
--- DateTime: 2019/2/26 15:30
---

GuildMessageCtrl = class("GuildMessageCtrl", UIPanel)
UIPanel:ResgisterOpen(GuildMessageCtrl)

function GuildMessageCtrl:initialize(go)
    UIPanel.initialize(self, UIType.Normal, UIMode.HideOther, UICollider.None)
end

function GuildMessageCtrl:bundleName()
    return "Assets/CityGame/Resources/View/GuildMessagePanel.prefab"
end

function GuildMessageCtrl:OnCreate(go)
    UIPanel.OnCreate(self, go)

    GuildMessageCtrl.luaBehaviour = self.gameObject:GetComponent("LuaBehaviour")
    GuildMessageCtrl.luaBehaviour:AddClick(GuildMessagePanel.backBtn, function ()
        PlayMusEff(1002)
        UIPanel.ClosePage()
    end)

    GuildMessageCtrl.luaBehaviour:AddClick(GuildMessagePanel.guildListBtn, self.OnGuildList, self)
    GuildMessageCtrl.luaBehaviour:AddClick(GuildMessagePanel.applyListBtn.gameObject, self.OnApplyList, self)
    GuildMessageCtrl.luaBehaviour:AddClick(GuildMessagePanel.quitBtn, self.OnQuit, self)
end

function GuildMessageCtrl:Awake()
    self.guildNoticeSource = UnityEngine.UI.LoopScrollDataSource.New()
    self.guildNoticeSource.mProvideData = GuildMessageCtrl.static.GuildNoticeProvideData
    self.guildNoticeSource.mClearData = GuildMessageCtrl.static.GuildNoticeClearData

    self.m_data = {}
    self.m_data.insId = OpenModelInsID.GuildMessageCtrl
end

function GuildMessageCtrl:Active()
    UIPanel.Active(self)
    self:_addListener()

    -- multi-language
    GuildMessagePanel.memberTitleText.text = GetLanguage(12010006)
    GuildMessagePanel.timeTitleText.text = GetLanguage(12040002)
    GuildMessagePanel.messageTitleText.text = GetLanguage(12040003)
end

-- Listen to the model layer network callback
function GuildMessageCtrl:_addListener()
    Event.AddListener("c_MessageAdd", self.c_MessageAdd, self)
    Event.AddListener("c_ExitSociety", self.c_ExitSociety, self)
    Event.AddListener("c_MessageDelJoinReq", self.c_MessageDelJoinReq, self)
    Event.AddListener("c_MessageNewJoinReq", self.c_MessageNewJoinReq, self)
end

--Unregister the model layer network callback h
function GuildMessageCtrl:_removeListener()
    Event.RemoveListener("c_MessageAdd", self.c_MessageAdd, self)
    Event.RemoveListener("c_ExitSociety", self.c_ExitSociety, self)
    Event.RemoveListener("c_MessageDelJoinReq", self.c_MessageDelJoinReq, self)
    Event.RemoveListener("c_MessageNewJoinReq", self.c_MessageNewJoinReq, self)
end

function GuildMessageCtrl:Refresh()
    self:initInsData()
    self:_showView()
end

-- Open model
function GuildMessageCtrl:initInsData()
    DataManager.OpenDetailModel(GuildMessageModel, OpenModelInsID.GuildMessageCtrl)
end

function GuildMessageCtrl:Hide()
    self:_removeListener()
    UIPanel.Hide(self)
end

-- Display interface information
function GuildMessageCtrl:_showView()
    local societyInfo = DataManager.GetGuildInfo()
    if societyInfo then
        -- Show the name of the guild
        GuildMessagePanel.guildNameText.text = societyInfo.name
        -- Show the number of guilds
        GuildMessagePanel.memberNumberText.text = societyInfo.allCount
        -- Show guild time
        local timeTab = getFormatUnixTime(societyInfo.createTs/1000)
        GuildMessagePanel.timeText.text = string.format("%s/%s/%s", timeTab.day, timeTab.month, timeTab.year)
        -- Show guild message prompts
        GuildMessageCtrl.societyNotice = societyInfo.notice
        GuildMessagePanel.guildInfoScroll:ActiveLoopScroll(self.guildNoticeSource, #GuildMessageCtrl.societyNotice, "View/Guild/GuildMessageItem")
        -- Show guild's red dot reminder
        self:_showNotice()
    end
    local ownIdentity = GuildOwnCtrl.static.guildMgr:GetOwnGuildIdentity()
    if ownIdentity == "MEMBER" then
        GuildMessagePanel.applyListBtn.localScale = Vector3.zero
    else
        GuildMessagePanel.applyListBtn.localScale = Vector3.one
    end
end

-- Whether to display the application red dot
function GuildMessageCtrl:_showNotice()
    local societyInfo = DataManager.GetGuildInfo()
    if societyInfo then
        if societyInfo.reqs and societyInfo.reqs[1] then
            GuildMessagePanel.applyListNotice.localScale = Vector3.one
        else
            GuildMessagePanel.applyListNotice.localScale = Vector3.zero
        end
    end
end

-- Show message prompt
function GuildMessageCtrl:_showScroll(playerData)
    GuildMessagePanel.guildInfoScroll:ActiveLoopScroll(self.guildNoticeSource, #GuildMessageCtrl.societyNotice, "View/Guild/GuildMessageItem")
end

-- Open the guild list interface
function GuildMessageCtrl:OnGuildList(go)
    ct.OpenCtrl("GuildListCtrl")
end

--Open the Guild Application Interface
function GuildMessageCtrl:OnApplyList(go)
    ct.OpenCtrl("GuildApplyCtrl")
end

-- Click the exit button
function GuildMessageCtrl:OnQuit(go)
    local ownIdentity = GuildOwnCtrl.static.guildMgr:GetOwnGuildIdentity()
    local societyInfoMembers = DataManager.GetGuildMembers()
    if ownIdentity == "CHAIRMAN" and #societyInfoMembers ~= 1 then
        --Open box
        local showData = {}
        showData.titleInfo = "提示"
        showData.contentInfo = "转让主席后才可退出联盟！"
        showData.tipInfo = ""
        ct.OpenCtrl("BtnDialogPageCtrl", showData)
    else
        --Open box
        local showData = {}
        showData.titleInfo = "提示"
        showData.contentInfo = "确定退出联盟?"
        showData.tipInfo = ""
        showData.btnCallBack = function()
            DataManager.DetailModelRpcNoRet(OpenModelInsID.GuildMessageCtrl, "m_ExitSocietye", {id = DataManager.GetGuildID()})
        end
        ct.OpenCtrl("BtnDialogPageCtrl", showData)
    end
end

-- Sliding multiplexing
GuildMessageCtrl.static.GuildNoticeProvideData = function(transform, idx)
    --idx = idx + 1
    GuildMessageItem:new(transform, GuildMessageCtrl.societyNotice[#GuildMessageCtrl.societyNotice - idx])
end

GuildMessageCtrl.static.GuildNoticeClearData = function(transform)

end

-- Network callback
-- Added tips
function GuildMessageCtrl:c_MessageAdd(societyNotice)
    --local idTemp = {}
    --if societyNotice.createId then
    --    table.insert(idTemp, societyNotice.createId)
    --end
    --if societyNotice.affectedId then
    --    table.insert(idTemp, societyNotice.affectedId)
    --end
    --if idTemp[1] then
    --    PlayerInfoManger.GetInfos(idTemp, self._showScroll, self)
    --end
    GuildMessagePanel.guildInfoScroll:ActiveLoopScroll(self.guildNoticeSource, #GuildMessageCtrl.societyNotice, "View/Guild/GuildMessageItem")
end

-- Return from the Guild
function GuildMessageCtrl:c_ExitSociety(byteBool)
    UIPanel.CloseAllPageExceptMain()
    if byteBool.b then -- Quit yourself
        Event.Brocast("SmallPop","退出联盟成功！",80)
    else -- Kicked
        --Open the bullet box
        local showData = {}
        showData.titleInfo = "提示"
        showData.contentInfo = "申请商业联盟通过"
        showData.tipInfo = ""
        ct.OpenCtrl("BtnDialogPageCtrl", showData)
    end
end

-- Delete processed membership requests
function GuildMessageCtrl:c_MessageDelJoinReq(joinReq)
    self:_showNotice()
end

-- New membership request
function GuildMessageCtrl:c_MessageNewJoinReq(joinReq)
    self:_showNotice()
end

-- Member change
function GuildMessageCtrl:c_MemberChanges(memberChanges)
    for _, v in ipairs(memberChanges.changeLists) do
        if v.type == "IDENTITY" and v.playerId == DataManager.GetMyOwnerID() then
            if v.identity == "MEMBER" then
                GuildMessagePanel.applyListBtn.localScale = Vector3.zero
            else
                GuildMessagePanel.applyListBtn.localScale = Vector3.one
            end
        end
    end
end