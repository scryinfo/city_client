---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xuyafang.
--- DateTime: 2018/10/15 17:16
---交易所
ExchangeTitleType =
{
    Quotes = 1,
    Collect = 2,
    Record = 3,
}

require('Framework/UI/UIPage')
require('Logic/ExchangeAbout/ExchangeQuoteItem')
local class = require 'Framework/class'

ExchangeCtrl = class('ExchangeCtrl',UIPage)

function ExchangeCtrl:initialize()
    UIPage.initialize(self, UIType.Normal, UIMode.HideOther, UICollider.None)
end

function ExchangeCtrl:bundleName()
    return "Exchange"
end

function ExchangeCtrl:OnCreate(obj)
    UIPage.OnCreate(self, obj)
end

function ExchangeCtrl:Awake(go)
    self.gameObject = go
    ExchangeCtrl.static.luaBehaviour = self.gameObject:GetComponent('LuaBehaviour');

    self.sortMgr = ExchangeSortMgr:new(ExchangePanel.titleRoot)

    --行情收藏记录toggle
    ExchangePanel.quotesToggle.onValueChanged:AddListener(function (isOn)
        self:_quotesToggleValueChange(isOn)
    end)
    ExchangePanel.collectToggle.onValueChanged:AddListener(function (isOn)
        self:_collectToggleValueChange(isOn)
    end)
    ExchangePanel.recordToggle.onValueChanged:AddListener(function (isOn)
        self:_recordToggleValueChange(isOn)
    end)

    --self:_initPanelData()
end

function ExchangeCtrl:Refresh()
    self:_initPanelData()
end

function ExchangeCtrl:Close()
    ExchangePanel.quotesToggle.onValueChanged:RemoveAllListeners();
    ExchangePanel.collectToggle.onValueChanged:RemoveAllListeners();
    ExchangePanel.recordToggle.onValueChanged:RemoveAllListeners();
end

function ExchangeCtrl:_initPanelData()
    --Event.AddListener("c_ExchangeSort", function (sortType, isSmaller)
    --    self:_exchangeSortByValue(sortType, isSmaller)
    --end, self)
    Event.AddListener("c_onExchangeSort", self._exchangeSortByValue, self)
    log("cycle_w9_exchange01", "初始化aaaaaaaaaaaaaaaaaaaaaa")

    --设置默认行情打开
    ExchangePanel._quotesToggleState(true)
    ExchangePanel._collectToggleState(false)
    ExchangePanel._recordToggleState(false)
    ExchangePanel.recordPage.localScale = Vector3.zero
    ExchangeCtrl.titleType = ExchangeTitleType.Quotes  --默认打开行情

    --测试创建items
    local sourceInfo = {}
    sourceInfo[1] = {change = -0.78, lastPrice = 100, name = 001, isCollected = false, high = 1000, low = 0.5, volume = 5.003}
    sourceInfo[2] = {change = 0.78, lastPrice = 223, name = 002, isCollected = true , high = 1230, low = 1.5, volume = 52.003}
    sourceInfo[3] = {change = -0.53, lastPrice = 503, name = 003, isCollected = false, high = 1233, low = 15, volume = 12.003}
    sourceInfo[4] = {change = 3.68, lastPrice = 126, name = 004, isCollected = false, high = 1234, low = 12.5, volume = 52.3}
    sourceInfo[5] = {change = -5.2, lastPrice = 428, name = 005, isCollected = false, high = 1005, low = 45.5, volume = 59}
    ExchangeCtrl.sourceInfo = sourceInfo
    ExchangeCtrl.collectDatas = self:_getCollectDatas(sourceInfo)
    ExchangePanel.noTipText.transform.localScale = Vector3.zero  --行情一定会有值，所以不显示提示

    local loopSource = UnityEngine.UI.LoopScrollDataSource.New()
    loopSource.mProvideData = ExchangeCtrl.static.QuotesProvideData
    loopSource.mClearData = ExchangeCtrl.static.QuotesClearData
    ExchangePanel.quotesCollectScroll:ActiveScroll(loopSource, 5);

end
---行情收藏记录的toggle
function ExchangeCtrl:_quotesToggleValueChange(isOn)
    if isOn then
        if ExchangeCtrl.titleType ~= ExchangeTitleType.Quotes then
            ExchangePanel._quotesToggleState(isOn)
            ExchangeCtrl.titleType = ExchangeTitleType.Quotes
            ExchangePanel.quotesAndCollectPage.localScale = Vector3.one

            if #ExchangeCtrl.sourceInfo == 0 then
                return
            else
                ExchangePanel.quotesCollectScroll:RefillCells(#ExchangeCtrl.sourceInfo)
            end
        end
    else
        if ExchangeCtrl.titleType == ExchangeTitleType.Quotes then
            ExchangePanel._quotesToggleState(isOn)
            ExchangePanel.quotesAndCollectPage.localScale = Vector3.zero
        end
    end
end
function ExchangeCtrl:_collectToggleValueChange(isOn)
    if isOn then
        if ExchangeCtrl.titleType ~= ExchangeTitleType.Collect then
            ExchangePanel._collectToggleState(isOn)
            ExchangeCtrl.titleType = ExchangeTitleType.Collect
            ExchangePanel.quotesAndCollectPage.localScale = Vector3.one
            if #ExchangeCtrl.collectDatas == 0 then
                ExchangePanel.noTipText.text = "Currently no collection!"
                ExchangePanel.noTipText.transform.localScale = Vector3.one
                return
            else
                ExchangePanel.noTipText.transform.localScale = Vector3.zero
                ExchangePanel.quotesCollectScroll:RefillCells(#ExchangeCtrl.collectDatas)
            end
        end
    else
        if ExchangeCtrl.titleType == ExchangeTitleType.Collect then
            ExchangePanel._collectToggleState(isOn)
            ExchangePanel.quotesAndCollectPage.localScale = Vector3.zero
        end
    end
end
function ExchangeCtrl:_recordToggleValueChange(isOn)
    if isOn then
        if ExchangeCtrl.titleType ~= ExchangeTitleType.Record then
            --判断是否有数据，没有的话，就显示提示 text
            --打开详情界面

            ExchangePanel._recordToggleState(isOn)
            ExchangeCtrl.titleType = ExchangeTitleType.Record
            ExchangePanel.recordPage.localScale = Vector3.one
        end
    else
        if ExchangeCtrl.titleType == ExchangeTitleType.Record then
            ExchangePanel._recordToggleState(isOn)
            ExchangePanel.recordPage.localScale = Vector3.zero
        end
    end
end

---滑动复用
--行情和收藏的界面
ExchangeCtrl.static.QuotesProvideData = function(transform, idx)
    idx = idx + 1
    if ExchangeCtrl.titleType == ExchangeTitleType.Collect then
        local collectItem = ExchangeQuoteItem:new(ExchangeCtrl.collectDatas[idx], transform, ExchangeCtrl.static.luaBehaviour)

    elseif ExchangeCtrl.titleType == ExchangeTitleType.Quotes then
        local item = ExchangeQuoteItem:new(ExchangeCtrl.sourceInfo[idx], transform, ExchangeCtrl.static.luaBehaviour)
    end

end

ExchangeCtrl.static.QuotesClearData = function(transform)
    --log("cycle_w8_exchange01_loopScroll", "回收"..transform.name)
end

---排序
function ExchangeCtrl:_exchangeSortByValue(sortData)
    --log("cycle_w9_exchange01", "排序啦啦啦")
    if ExchangeCtrl.titleType == ExchangeTitleType.Quotes then  --行情的排序
        ExchangeCtrl.sourceInfo = self:_getSortDatas(ExchangeCtrl.sourceInfo, sortData)
        ExchangePanel.quotesCollectScroll:RefillCells(#ExchangeCtrl.sourceInfo)
    elseif ExchangeCtrl.titleType == ExchangeTitleType.Collect then
        ExchangeCtrl.collectDatas = self:_getSortDatas(ExchangeCtrl.collectDatas, sortData)
        ExchangePanel.quotesCollectScroll:RefillCells(#ExchangeCtrl.collectDatas)
    end
end

--获取收藏的数据
function ExchangeCtrl:_getCollectDatas(totalDatas)
    local collectDatas = {}
    for i, data in ipairs(totalDatas) do
        if data.isCollected then
            collectDatas[#collectDatas + 1] = data
        end
    end
    return collectDatas
end
--sort
function ExchangeCtrl:_getSortDatas(datas, sortData)
    local tempDatas = datas
    local sortType = sortData.sortItemType
    local isSmaller = sortData.isSmaller
    if sortType == ExchangeSortItemType.Name then
        if isSmaller then
            table.sort(tempDatas, function (m, n) return m.name > n.name end)
        else
            table.sort(tempDatas, function (m, n) return m.name < n.name end)
        end
    elseif sortType == ExchangeSortItemType.High then
        if isSmaller then
            table.sort(tempDatas, function (m, n) return m.high > n.high end)
        else
            table.sort(tempDatas, function (m, n) return m.high < n.high end)
        end
    elseif sortType == ExchangeSortItemType.Change then
        if isSmaller then
            table.sort(tempDatas, function (m, n) return m.change > n.change end)
        else
            table.sort(tempDatas, function (m, n) return m.change < n.change end)
        end
    elseif sortType == ExchangeSortItemType.LastPrice then
        if isSmaller then
            table.sort(tempDatas, function (m, n) return m.lastPrice > n.lastPrice end)
        else
            table.sort(tempDatas, function (m, n) return m.lastPrice < n.lastPrice end)
        end
    elseif sortType == ExchangeSortItemType.Low then
        if isSmaller then
            table.sort(tempDatas, function (m, n) return m.low > n.low end)
        else
            table.sort(tempDatas, function (m, n) return m.low < n.low end)
        end
    elseif sortType == ExchangeSortItemType.Volume then
        if isSmaller then
            table.sort(tempDatas, function (m, n) return m.volume > n.volume end)
        else
            table.sort(tempDatas, function (m, n) return m.volume < n.volume end)
        end
    end

    return tempDatas
end



