---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xuyafang.
--- DateTime: 2018/9/21 10:35
---

FlightDetailCtrl = class('FlightDetailCtrl',UIPanel)
UIPanel:ResgisterOpen(FlightDetailCtrl)

function FlightDetailCtrl:initialize()
    UIPanel.initialize(self, UIType.Normal, UIMode.HideOther, UICollider.None)
end

function FlightDetailCtrl:bundleName()
    return "Assets/CityGame/Resources/View/FlightDetailPanel.prefab"
end

function FlightDetailCtrl:OnCreate(obj)
    UIPanel.OnCreate(self, obj)
end

function FlightDetailCtrl:Awake(go)
    self.gameObject = go
    local behaviour = self.gameObject:GetComponent('LuaBehaviour')
    behaviour:AddClick(FlightDetailPanel.backBtn.gameObject, function ()
        self:backFunc()
    end , self)
    behaviour:AddClick(FlightDetailPanel.betBtn.gameObject, function ()
        self:betFunc()
    end , self)
    behaviour:AddClick(FlightDetailPanel.ruleBtn.gameObject, function ()
        self:ruleFunc()
    end , self)
end
--
function FlightDetailCtrl:Refresh()
    Event.AddListener("c_getBetResult", self._getBetResult, self)
    self:_initData()
end
--
function FlightDetailCtrl:Active()
    UIPanel.Active(self)
    self:_language()
end
--
function FlightDetailCtrl:Hide()
    Event.RemoveListener("c_getBetResult", self._getBetResult, self)
    UIPanel.Hide(self)
end
--
function FlightDetailCtrl:_initData()
    if self.m_data ~= nil then
        local flightData
        FlightDetailPanel.infoRoot.localScale = Vector3.zero
        FlightDetailPanel.betBtn.localScale = Vector3.zero
        FlightDetailPanel.resultRoot.localScale = Vector3.zero
        if self.m_data.dataType == 0 then  --Popular prediction interface
            flightData = self.m_data.detail.data
            self:_hot(self.m_data.detail)
        elseif self.m_data.dataType == 1 then  --History interface
            flightData = self.m_data.detail.data
            self:_history(self.m_data.detail)
        elseif self.m_data.dataType == 2 then  --Details from search
            flightData = self.m_data.detail
            self:_search(self.m_data.detail)
        end
        self.id = flightData.FlightNo
        self.date = flightData.FlightDeptimePlanDate  --Data required by bet interface
        FlightDetailPanel.timeText.text = self:_getDayStr(flightData.FlightDeptimePlanDate)  --Planned departure time - accurate to days
        FlightDetailPanel.flightText.text = ct.GetFlightCompanyName(flightData.FlightNo)
        FlightDetailPanel.numText.text = flightData.FlightNo  --CA4506
        FlightDetailPanel.endCodeText.text = flightData.FlightArrcode
        FlightDetailPanel.endPlaceText.text = GetLanguage(FlightCodeNameConfig[flightData.FlightArrcode])
        FlightDetailPanel.startCodeText.text = flightData.FlightDepcode
        FlightDetailPanel.startPlaceText.text = GetLanguage(FlightCodeNameConfig[flightData.FlightDepcode])
        self:_updateText()

        local trueWidth01 = FlightDetailPanel.timeText.preferredWidth
        FlightDetailPanel.timeText.rectTransform.sizeDelta = Vector2.New(trueWidth01, FlightDetailPanel.timeText.rectTransform.sizeDelta.y)
    end
end
--
function FlightDetailCtrl:_updateText()
    local str1 = FlightDetailPanel.flightText.text
    if str1 == "" then
        str1 = GetLanguage(32030035)  --No data
    end
    FlightDetailPanel.flightText.text = ct.getFlightSubString(str1, 60, 34)
    local str2 = FlightDetailPanel.endPlaceText.text
    FlightDetailPanel.endPlaceText.text = ct.getFlightSubString(str2, 36, 20)
    local str3 = FlightDetailPanel.startPlaceText.text
    FlightDetailPanel.startPlaceText.text = ct.getFlightSubString(str3, 36, 20)
end
--Get time in xx minutes xx seconds format
function FlightDetailCtrl:_getSecondStr(str)
    if str == nil or str == "" then
        return "--"
    end
    local temp = string.sub(str, 12, 16)
    return temp
end
--Get the time in 2019-05-01 format
function FlightDetailCtrl:_getDayStr(str)
    if str == nil or str == "" then
        return "--"
    end
    local temp = string.sub(str, 1, 10)
    return temp
end
--
function FlightDetailCtrl:_hot(value)
    local flightData = value.data
    FlightDetailPanel.hotTran.localScale = Vector3.one
    FlightDetailPanel.historyTran.localScale = Vector3.zero
    flightData = value.data
    FlightDetailPanel.hotMoneyText.text = value.sumBetAmount
    FlightDetailPanel.hotPlanTimeText.text = self:_getSecondStr(flightData.FlightDeptimePlanDate)  --Planned takeoff time to the nearest second
    if flightData.FlightDeptimeDate == "" then
        FlightDetailPanel.hotTrueTimeText.text = "--"
    else
        FlightDetailPanel.hotTrueTimeText.text = self:_getSecondStr(flightData.FlightDeptimeDate)
    end
    FlightDetailPanel.hotJoinCountText.text = value.sumBetCount
    local trueWidth02 = FlightDetailPanel.hotMoneyText.preferredWidth
    FlightDetailPanel.hotMoneyText.rectTransform.sizeDelta = Vector2.New(trueWidth02, FlightDetailPanel.hotMoneyText.rectTransform.sizeDelta.y)

    --Can bet
    if value.myBet == nil and flightData.FlightState == "计划" then
        FlightDetailPanel.betBtn.localScale = Vector3.one
        return
    end
    --Prompt has participated in the forecast-determine whether you need to see whether the specific data is ""
    if value.myBet ~= nil and flightData.FlightDeptimeDate == "" then
        FlightDetailPanel.infoRoot.localScale = Vector3.one
        local tempDelay = string.format("<color=#68AFFF>%d</color>", value.myBet.delay)
        local tempAmount = string.format("<color=#FFC000>%d</color>", value.myBet.amount)
        FlightDetailPanel.infoText.text = GetLanguage(32030019, tempDelay, tempAmount)
        return
    end
    --Prompt flight has passed betting time
    if value.myBet == nil and flightData.FlightDeptimeDate ~= "计划" then
        FlightDetailPanel.infoRoot.localScale = Vector3.one
        FlightDetailPanel.infoText.text = GetLanguage(32030023)
        return
    end
end
--
function FlightDetailCtrl:_history(value)
    local flightData = value.data
    FlightDetailPanel.historyTran.localScale = Vector3.one
    FlightDetailPanel.hotTran.localScale = Vector3.zero
    FlightDetailPanel.historyPlanTimeText.text = self:_getSecondStr(flightData.FlightDeptimePlanDate)  ---Planned departure time to the nearest second
    if flightData.FlightDeptimeDate == "" then
        FlightDetailPanel.historyTrueTimeText.text = "--"
    else
        FlightDetailPanel.historyTrueTimeText.text = self:_getSecondStr(flightData.FlightDeptimeDate)
    end

    if value.win == nil then
        FlightDetailPanel.infoRoot.localScale = Vector3.one
        local tempDelay = string.format("<color=#68AFFF>%d</color>", value.delay)
        local tempAmount = string.format("<color=#FFC000>%d</color>", value.amount)
        FlightDetailPanel.infoText.text = GetLanguage(32030019, tempDelay, tempAmount)
        return
    end

    --Already have results
    FlightDetailPanel.resultRoot.localScale = Vector3.one
    if value.win == true then
        FlightDetailPanel.value03Text.text = ""..value.amount  --Net earning points
    else
        FlightDetailPanel.value03Text.text = "-"..value.amount
    end
    local plan = getTimeUnixByFormat(flightData.FlightDeptimePlanDate)
    local ture = getTimeUnixByFormat(flightData.FlightDeptimeDate)
    local delay = (ture - plan) / 60  --Only judge minutes

    FlightDetailPanel.value01Text.text = value.delay..GetLanguage(20160005)  --Predict delay time
    FlightDetailPanel.value02Text.text = delay..GetLanguage(20160005)  --Actual delay time
end
--
function FlightDetailCtrl:_search(value)
    local flightData = value
    FlightDetailPanel.historyTran.localScale = Vector3.one
    FlightDetailPanel.hotTran.localScale = Vector3.zero
    FlightDetailPanel.historyPlanTimeText.text = self:_getSecondStr(flightData.FlightDeptimePlanDate)  --Planned takeoff time to the nearest second
    if flightData.FlightDeptimeDate == "" then
        FlightDetailPanel.historyTrueTimeText.text = "--"
    else
        FlightDetailPanel.historyTrueTimeText.text = self:_getSecondStr(flightData.FlightDeptimeDate)
    end
    --If there is no corresponding data, no bet
    local tempBet = FlightMainModel.getFlightBetById(flightData.FlightNo)
    if tempBet == nil then
        tempBet = FlightMainModel.getSearchFlightBetById(flightData.FlightNo)
    end
    if tempBet ~= nil then
        value.delay = tempBet.delay
        value.amount = tempBet.amount
        value.win = tempBet.win
    else
        local plan = getTimeUnixByFormat(flightData.FlightDeptimePlanDate)
        if self:_checkZoneTime(plan, flightData.orgTimeZoneHours) == false then
            --flightData.FlightState == "plan"
            --self:_checkZoneTime(plan, flightData.orgTimeZoneHours) == false
            FlightDetailPanel.betBtn.localScale = Vector3.one  --Can bet
        else
            FlightDetailPanel.infoRoot.localScale = Vector3.one
            FlightDetailPanel.infoText.text = GetLanguage(32030023)
        end
        return
    end

    --Haven't taken off yet
    if value.win == nil then
        FlightDetailPanel.infoRoot.localScale = Vector3.one
        local tempDelay = string.format("<color=#68AFFF>%d</color>", value.delay)
        local tempAmount = string.format("<color=#FFC000>%d</color>", value.amount)
        FlightDetailPanel.infoText.text = GetLanguage(32030019, tempDelay, tempAmount)
    else
        --Already have results
        if value.win == true then
            FlightDetailPanel.value03Text.text = ""..value.amount  --Net earning points
        else
            FlightDetailPanel.value03Text.text = "-"..value.amount
        end
        local plan = getTimeUnixByFormat(flightData.FlightDeptimePlanDate)
        local ture = getTimeUnixByFormat(flightData.FlightDeptimeDate)
        local delay = (ture - plan) / 60  --Only judge minutes

        FlightDetailPanel.value01Text.text = value.delay..GetLanguage(20160005)  --Predict delay time
        FlightDetailPanel.value02Text.text = delay..GetLanguage(20160005)  --Actual delay time
    end
end
--Determine if a time has passed
function FlightDetailCtrl:_checkZoneTime(startTime, zone)
    local serverTime = TimeSynchronized.GetTheCurrentTime()  --Current server time
    local turnTime = startTime + (FlightConfig.ChenDuZone - zone) * 3600  --The time corresponding to the time zone in the server - the default server is UTF+8
    if serverTime >= turnTime then
        return true
    end
    return false
end
--
function FlightDetailCtrl:_language()
    FlightDetailPanel.titleText01.text = GetLanguage(32030008)
    FlightDetailPanel.planTimeText02.text = GetLanguage(32030001)
    FlightDetailPanel.trueTimeText03.text = GetLanguage(32030002)
    FlightDetailPanel.joinCountText04.text = GetLanguage(32030004)
    FlightDetailPanel.moneyText05.text = GetLanguage(32030005)
    FlightDetailPanel.value01Text06.text = GetLanguage(32030026)
    FlightDetailPanel.value02Text07.text = GetLanguage(32030027)
    FlightDetailPanel.value03Text08.text = GetLanguage(32030028)
    FlightDetailPanel.betBtnText09.text = GetLanguage(32030020)
    FlightDetailPanel.ruleBtnText10.text = GetLanguage(32030029)
    FlightDetailPanel.historyPlanTimeText11.text = GetLanguage(32030001)
    FlightDetailPanel.historyTrueTimeText12.text = GetLanguage(32030002)
end
--
function FlightDetailCtrl:backFunc()
    PlayMusEff(1002)
    UIPanel.ClosePage()
end
--Bet to judge your money
function FlightDetailCtrl:betFunc()
    PlayMusEff(1002)
    ct.OpenCtrl("FlightBetCtrl", {id = self.id, date = self.date})
end
--
function FlightDetailCtrl:ruleFunc()
    PlayMusEff(1002)
    ct.OpenCtrl("FlightRuleDialogPageCtrl")
end
--Betting callback
function FlightDetailCtrl:_getBetResult(value)
    if value.id == self.id and value.date == self.date then
        FlightDetailPanel.infoRoot.localScale = Vector3.one
        local tempDelay = string.format("<color=#68AFFF>%d</color>", value.delay)
        local tempAmount = string.format("<color=#FFC000>%d</color>", value.score)
        FlightDetailPanel.infoText.text = GetLanguage(32030019, tempDelay, tempAmount)
    end
end