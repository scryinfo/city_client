---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by password.
--- DateTime: 2019/8/17 10:00
---City transaction amount
CityVolumeCtrl = class('CityVolumeCtrl',UIPanel)
UIPanel:ResgisterOpen(CityVolumeCtrl)

local cityVolumeBehaviour
local createTs

function CityVolumeCtrl:bundleName()
    return "Assets/CityGame/Resources/View/CityVolumePanel.prefab"
end

function CityVolumeCtrl:initialize()
    UIPanel.initialize(self,UIType.PopUp,UIMode.NeedBack,UICollider.None)
end

function CityVolumeCtrl:Awake(go)
    self:_getComponent(go)
    cityVolumeBehaviour = self.gameObject:GetComponent('LuaBehaviour')
    cityVolumeBehaviour:AddClick(self.back,self.OnBack,self)

    self.buildingTs = DataManager.GetServerCreateTs() -- Opening time
    createTs = self.buildingTs
    createTs = math.floor(createTs)
    if tonumber(getFormatUnixTime(createTs).second) ~= 0 then
        createTs = createTs - tonumber(getFormatUnixTime(createTs).second)
    end
    if tonumber(getFormatUnixTime(createTs).minute) ~= 0 then
        createTs = createTs - tonumber(getFormatUnixTime(createTs).minute) * 60
    end
    if tonumber(getFormatUnixTime(createTs).hour) ~= 0 then
        createTs = createTs - tonumber(getFormatUnixTime(createTs).hour) * 3600
    end
end

function CityVolumeCtrl:Active()
    UIPanel.Active(self)
    self.sum.text = GetLanguage(45010013)
    self.date.text = GetLanguage(45010014)
end

function CityVolumeCtrl:Refresh()
    self:initData()
end

function CityVolumeCtrl:Hide()
    UIPanel.Hide(self)

end

function CityVolumeCtrl:Close()

end

function CityVolumeCtrl:OnCreate(obj)
    UIPanel.OnCreate(self,obj)
end

function CityVolumeCtrl:OnBack()
    UIPanel.ClosePage()
end

--Get components
function CityVolumeCtrl:_getComponent(go)
    self.back = go.transform:Find("content/top/back").gameObject
    self.name = go.transform:Find("content/top/back/Text"):GetComponent("Text")
    self.title = go.transform:Find("content/down/title/Text"):GetComponent("Text")
    self.volumeImage = go.transform:Find("content/down/volumeImage")
    self.fundPoolImage = go.transform:Find("content/down/fundPoolImage")
    self.yScale = go.transform:Find("content/down/yScale"):GetComponent("RectTransform")
    self.sum = go.transform:Find("content/down/sum"):GetComponent("Text")
    self.date = go.transform:Find("content/down/xScale/Text"):GetComponent("Text")
    self.curve = go.transform:Find("content/down/curveBg/curve"):GetComponent("RectTransform")
    self.slide = go.transform:Find("content/down/curveBg/curve"):GetComponent("Slide")  --slide
    self.graph = go.transform:Find("content/down/curveBg/curve"):GetComponent("FunctionalGraph")  --Draw curve
end

function CityVolumeCtrl:initData()
    if self.m_data.type == CityBasicType.Volume then
        self.name.text = GetLanguage(45010005)
        self.title.text = GetLanguage(45010011)
        self.volumeImage.localScale = Vector3.one
        self.fundPoolImage.localScale = Vector3.zero
        DataManager.DetailModelRpcNoRet(self.m_data.insId , 'm_queryTransactionAmount',true)
    elseif self.m_data.type == CityBasicType.fundPool then
        self.name.text = GetLanguage(45010006)
        self.title.text = GetLanguage(45010012)
        self.volumeImage.localScale = Vector3.zero
        self.fundPoolImage.localScale = Vector3.one
        DataManager.DetailModelRpcNoRet(self.m_data.insId , 'm_queryMoneyPool')
    end
end

--City transactions
function CityVolumeCtrl:_receiveTransactionAmount(info)
    self:LineChart(info)
end

--City bonus pool
function CityVolumeCtrl:_receiveMoneyPool(info)
   self:LineChart(info)
end

--line chart
function CityVolumeCtrl:LineChart(info)
    self.graph:Close()
    self.slide:Close()
    local currentTime = TimeSynchronized.GetTheCurrentTime()    --Current server time (seconds)
    local ts = getFormatUnixTime(currentTime)
    local second = tonumber(ts.second)
    local minute = tonumber(ts.minute)
    local hour = tonumber(ts.hour)
    if second ~= 0 then
        currentTime = currentTime -second
    end
    if minute ~= 0 then
        currentTime = currentTime - minute * 60
    end
    if hour ~= 0 then
        currentTime = currentTime - hour * 3600
    end
    currentTime = math.floor(currentTime)        --At 0 o'clock on the day
    local sevenAgo = currentTime - 604800 + 86400     --7 days ago at 0 o'clock
    local updataTime = sevenAgo
    local time = {}
    local volumeTab = {}      --Average transaction price
    if createTs >= sevenAgo then
        updataTime = createTs
        for i = 1, 7 do
            time[i] = getFormatUnixTime(updataTime).month .. "." .. getFormatUnixTime(updataTime).day
            if updataTime <= currentTime then
                volumeTab[i] = {}
                volumeTab[i].coordinate = ((updataTime - createTs + 86400) / 86400 * 238)
                volumeTab[i].money = 0
                if info ~= nil then
                    for k, v in pairs(info) do
                        if updataTime == v.time / 1000 then
                            volumeTab[i].money = tonumber(GetClientPriceString(v.sum))
                        end
                    end
                end
                if updataTime == currentTime then
                    volumeTab[i].money = tonumber(GetClientPriceString(ct.scientificNotation2Normal(self.m_data.today)))
                end
            end
            updataTime = updataTime + 86400
        end
    else
        for i = 1, 7 do
            time[i] = getFormatUnixTime(updataTime).month .. "." .. getFormatUnixTime(updataTime).day
            volumeTab[i] = {}
            volumeTab[i].coordinate = ((updataTime - sevenAgo + 86400) / 86400 * 238)
            volumeTab[i].money = 0
            if info ~= nil then
                for k, v in pairs(info) do
                    if updataTime == v.time / 1000 then
                        volumeTab[i].money = tonumber(GetClientPriceString(v.sum))
                    end
                end
            end
            updataTime = updataTime + 86400
        end
        volumeTab[#volumeTab].money = tonumber(GetClientPriceString(ct.scientificNotation2Normal(self.m_data.today)))
    end

    --Convert to Vector2 type
    local volume = {}
    for i, v in pairs(volumeTab) do
        volume[i] = Vector2.New(v.coordinate,v.money)
    end
    table.insert(time,1,"0")
    table.insert(volume,1,Vector2.New(0,0))
    local max = 0
    for i, v in pairs(volume) do
        if v.y > max then
            max = v.y
        end
    end

    local scale = SetYScale(max,4,self.yScale)
    local volumeVet = {}
    for i, v in pairs(volume) do
        if scale == 0 then
            volumeVet[i] = v
        else
            volumeVet[i] = Vector2.New(v.x,v.y / scale * 100)
        end
    end

    self.slide:SetXScaleValue(time,238)

    self.graph:DrawLine(volumeVet,Color.New(158 / 255, 190 / 255, 255 / 255, 255 / 255),1)
    self.slide:SetCoordinate(volumeVet,volume,Color.New(158 / 255, 190 / 255, 255 / 255, 255 / 255),1)

    self.curve.localPosition = self.curve.localPosition + Vector3.New(0.01, 0,0)
    self.curve.sizeDelta = self.curve.sizeDelta + Vector2.New(0.01, 0)
end

