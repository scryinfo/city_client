---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by cyz_scry.
--- DateTime: 2018/12/1 10:21
---
UnitTest.TestBlockStart()---------------------------------------------------------
--定义一个model基类
local ModelBase = class('ModelBase')
local ControllerBase = class('ControllerBase')

local tempCtrlList = {}
local test_count = 10000

function ModelBase:initialize(name, newInsId)
    self.instanceName = name
    self.insId = newInsId
end

function ControllerBase:initialize(name, newInsId)
    self.instanceName = name
    self.insId = newInsId
end

--model类{
Model_1 = class('Model_1',ModelBase)
function Model_1:testfun(arg_int1, arg_int2)
    --ct.log("wk16_abel_controller_model", "[Model_1:testfun] invoked!")
    return #self.instanceName+arg_int1+arg_int2
end

function Model_1:testfunNoRet(arg_int1, arg_int2)
    --ct.log("wk16_abel_controller_model", "[Model_1:testfun] invoked!")
    local value = #self.instanceName+arg_int1+arg_int2
end

Model_2 = class('Model_2',ModelBase)
function Model_2:testfun(arg_str)
    --ct.log("wk16_abel_controller_model", "[Model_2:testfun] invoked!")
    return self.instanceName..arg_str
end

function Model_2:testfunNoRet(arg_str)
    --ct.log("wk16_abel_controller_model", "[Model_2:testfun] invoked!")
    local len = #self.instanceName+#arg_str
end
--model类}

--model管理器类{
ModelManager = class('ModelManager')
local modelList = {}
local tempMd = nil
local tempArgs = {}
function ModelManager:initialize()
    modelList = {}
end
function ModelManager:addModel(model)
    modelList[#modelList+1] = model
    return model
end

function ModelManager:OpenCtrl(model, CtrlClass)
    return CtrlClass:new(CtrlClass.name..'_ins_'..model.insId, model.insId)
end

function ModelManager:getModel(pos)
    return modelList[pos]
end
--出于性能上的考量，把有返回值和没有返回值的rpc分开
--modelRpc是有返回值的
function ModelManager.modelRpc(insId, modelMethord, ...)
    local arg = {...}
    local md = modelList[insId]
    arg[#arg](md[modelMethord](md,...))
end
--modelRpcNoRet是没有返回值的
function ModelManager.modelRpcNoRet(insId, modelMethord, ...)
    local md = modelList[insId]
    md[modelMethord](md,...)
end

--最后一个参数必须是函数或者nil
function ModelManager.modelRpc1(insId, modelMethord, ...)
    local arg = {...}
    --优化版本
    arg[#arg](modelList[insId][modelMethord](modelList[insId],...))

    --严格版本
    --local md = modelList[insId]
    --if md ~= nil then
    --    assert(md, 'model not exist which instance id = ',insId)
    --    assert(md[modelMethord], 'Methord: '..modelMethord..' not exist,model instance id = '..insId)
    --    --if not md then
    --    --    ct.log( 'system','model not exist which instance id = ',insId)
    --    --    return
    --    --end
    --    --if not md[modelMethord] then
    --    --    ct.log( 'system','Methord: '..modelMethord..' not exist,model instance id = '..insId)
    --    --    return
    --    --end
    --
    --    local ret = md[modelMethord](md,...)
    --    if arg[#arg] ~= nil then
    --        arg[#arg](ret)
    --    end
    --end
end

function ModelManager.modelRpc2(insId, modelMethord, ...)
    tempArgs = {...}
    --优化版本
    tempMd = modelList[insId]
    tempArgs[#tempArgs](tempMd[modelMethord](tempMd,...))
    tempMd = nil
    tempArgs = {}
end

--全局方法
--function ct.model_rpc(insId, modelMethord, callback, ...)
function ct.model_rpc(insId, modelMethord, ...)
    ModelManager.modelRpc(insId, modelMethord, ...)
end
function ct.model_rpcNoRet(insId, modelMethord, ...)
    ModelManager.modelRpcNoRet(insId, modelMethord, ...)
end

function ct.model_rpc1(insId, modelMethord, ...)
    ModelManager.modelRpc1(insId, modelMethord, ...)
end

function ct.model_rpc2(insId, modelMethord, ...)
    ModelManager.modelRpc2(insId, modelMethord, ...)
end
--model管理器类}

--controller类{
Ctrl_1 = class('Crtl_1',ControllerBase)
function Ctrl_1:initialize(name, newInsId)
    ControllerBase.initialize(self, name,newInsId)
end
function Ctrl_1:reqDatafun(arg_int1, arg_int2)
    local pRetvalue = nil
    ct.model_rpc(self.insId, 'testfun', arg_int1, arg_int2,function (retvalue)
        --ct.log('wk16_abel_controller_model', '[Crtl_1:reqDatafun] return: '..retvalue)
        pRetvalue = retvalue
    end)
end

Ctrl_2 = class('Crtl_2',ControllerBase)
function Ctrl_2:initialize(name, newInsId)
    ControllerBase.initialize(self, name,newInsId)
end
function Ctrl_2:reqDatafun(arg_str)
    local pRetvalue = nil
    ct.model_rpc(self.insId, 'testfun', arg_str,function (retvalue)
        pRetvalue = retvalue
        --ct.log('wk16_abel_controller_model', '[Crtl_2:reqDatafun] return: '..retvalue)
    end)
end
--controller类}

local ModelManager = ModelManager
ModelManager.initialize()

--数据准备{
UnitTest.Exec("wk16_abel_ctrl_model_initTestData", "test_wk16_abel_ctrl_model_initTestData",  function ()
    ct.log("wk16_abel_ctrl_model_initTestData", '\n[test_wk16_abel_ctrl_model_initTestData] 数据准备, 创建'..test_count..'个Model及对应Ctrl')
    for i = 1, test_count do
        --使用相同的实例id实例化对应的 Model 和 Ctrl, 这里的 i 就是实例id: insId
        --Model类型要和Crtl的类型匹配，就像加工厂的Model和Ctrl类型是对应的，Ctrl要调用对应的Model的Rpc方法，
        --前提是Ctrl知道对应Model的实例id，这里就简单处理，让新创建的Model和Ctrl的实例id都等于i，那么我们
        --在后边的测试中，就可以通过Ctrl中的实例id找打对应的Model实例
        local newModel = ModelManager.addModel(nil,Model_1:new('Model_1'..i,i))
        tempCtrlList[newModel.insId] = ModelManager:OpenCtrl(newModel,Ctrl_1) --OpenCtrl实际上就是把 newModel 的 insId 传递给新创建的 Ctrl_1
    end
    for i = test_count+1, test_count *2 do
        local newModel =ModelManager.addModel(nil,Model_2:new('Model_2'..i))
        tempCtrlList[newModel.insId] = ModelManager:OpenCtrl(newModel,Ctrl_2) --OpenCtrl实际上就是把 newModel 的 insId 传递给新创建的 Ctrl_1
    end
end)
--数据准备}

--基础功能测试-------------------------------------------{
UnitTest.Exec("wk16_abel_model_rpc_errfun", "test_wk16_abel_model_rpc_errfun",  function ()
    local pCrtl_2 = Ctrl_2:new('Crtl_1_ins',ct.getIntPart(test_count*1.5))
    --测试{
    --不存在的方法,会有 Error 日志输出
    ct.model_rpc(pCrtl_2.insId, 'testfun1', 'hello',function (retvalue)
        ct.log('wk16_abel_model_rpc_errfun', '[Crtl_2:reqDatafun] return: '..retvalue)
    end)
    --测试}
end)

UnitTest.Exec("wk16_abel_model_rpc_noCb", "test_wk16_abel_model_rpc_noCb",  function ()
    local pCrtl_2 = Ctrl_2:new('Crtl_1_ins',ct.getIntPart(test_count*1.5))
    --测试{
    --需要返回值的情况下，如果不传递回调,会有 Error 日志输出
    ct.model_rpc(pCrtl_2.insId, 'testfun1', 'hello')
    --测试}
end)

UnitTest.Exec("wk16_abel_model_rpcNoRet", "wk16_abel_model_rpcNoRet",  function ()
    local pCrtl_2 = Ctrl_2:new('Crtl_1_ins',ct.getIntPart(test_count*1.5))
    --测试{
    --不需要返回值的情况下,调用 model_rpcNoRet
    ct.model_rpcNoRet(pCrtl_2.insId, 'testfun1', 'hello')
    --测试}
end)
--基础功能测试-------------------------------------------}


--性能测试-------------------------------------------{
--有返回值的rpc测试
UnitTest.Exec("wk16_abel_ctrl_model", "test_wk16_abel_ctrl_model_Performance",  function ()
    collectgarbage("collect")
    ct.log('wk16_abel_ctrl_model', "model_rpc 性能测试"..test_count.."次调用,测试开始------------------------------------------")
    UnitTest.PerformanceTest("wk16_abel_ctrl_model","model_rpc 性能测试1：直接调用 model 方法", function()
        local retvalue = nil
        for i = 1, test_count do
            retvalue = ModelManager.getModel(nil,i):testfun(1,2)
        end
        for i = test_count+1, test_count*2 do
            retvalue = ModelManager.getModel(nil,i):testfun('hello_'..i)
        end
    end)
    collectgarbage("collect")
    UnitTest.PerformanceTest("wk16_abel_ctrl_model","model_rpc 性能测试2：model_rpc 调用", function()
        local pRetvalue = nil
        for i = 1, test_count do
            ct.model_rpc(tempCtrlList[i].insId, 'testfun', 1,2,function (retvalue)
                pRetvalue = retvalue
            end)
        end
        for i = test_count+1, test_count*2 do
            ct.model_rpc(tempCtrlList[i].insId, 'testfun', 'hello',function (retvalue)
                pRetvalue = retvalue
            end)
        end
    end)
    collectgarbage("collect")
    --modelRpc1
    UnitTest.PerformanceTest("wk16_abel_ctrl_model","model_rpc 性能测试3：model_rpc1 调用", function()
        local pRetvalue = nil
        for i = 1, test_count do
            ct.model_rpc1(tempCtrlList[i].insId, 'testfun', 1,2,function (retvalue)
                pRetvalue = retvalue
            end)
        end
        for i = test_count+1, test_count*2 do
            ct.model_rpc1(tempCtrlList[i].insId, 'testfun', 'hello',function (retvalue)
                pRetvalue = retvalue
            end)
        end
    end)
    collectgarbage("collect")
    UnitTest.PerformanceTest("wk16_abel_ctrl_model","model_rpc 性能测试4：model_rpc2 调用", function()
        local pRetvalue = nil
        for i = 1, test_count do
            ct.model_rpc2(tempCtrlList[i].insId, 'testfun', 1,2,function (retvalue)
                pRetvalue = retvalue
            end)
        end
        for i = test_count+1, test_count*2 do
            ct.model_rpc2(tempCtrlList[i].insId, 'testfun', 'hello',function (retvalue)
                pRetvalue = retvalue
            end)
        end
    end)
    ct.log('wk16_abel_ctrl_model', "model_rpc 性能测试"..test_count.."次调用,测试结束------------------------------------------")
    --[[
    100万次调用
        model_rpc 性能测试1：直接调用 model 方法    执行时间:      4.1279999999999
        model_rpc 性能测试2：model_rpc 调用    执行时间:           4.454
        model_rpc 性能测试3：model_rpc1 调用    执行时间:          4.62
        model_rpc 性能测试3：model_rpc2 调用    执行时间:          5.1899999999999
    50万次调用
        model_rpc 性能测试1：直接调用 model 方法    执行时间:      1.9750000000001
        model_rpc 性能测试2：model_rpc 调用    执行时间:           2.2450000000001
        model_rpc 性能测试3：model_rpc1 调用    执行时间:          2.2750000000001
        model_rpc 性能测试3：model_rpc2 调用    执行时间:          2.519
    10万次调用
        model_rpc 性能测试1：直接调用 model 方法    执行时间:      0.43599999999992
        model_rpc 性能测试2：model_rpc 调用    执行时间:           0.42499999999995
        model_rpc 性能测试3：model_rpc1 调用    执行时间:          0.43000000000006
        model_rpc 性能测试3：model_rpc2 调用    执行时间:          0.49099999999999
    1万次调用
        model_rpc 性能测试1：直接调用 model 方法    执行时间:      0.044000000000096
        model_rpc 性能测试2：model_rpc 调用    执行时间:           0.045999999999822
        model_rpc 性能测试3：model_rpc1 调用    执行时间:          0.048000000000002
        model_rpc 性能测试3：model_rpc2 调用    执行时间:          0.070999999999913
    性能比较接近
    --]]
end)

--没有返回值的rpc测试
UnitTest.Exec("wk16_abel_ctrl_model_noRetPerformance", "test_wk16_abel_ctrl_model_noRetPerformance",  function ()
    collectgarbage("collect")
    ct.log('wk16_abel_ctrl_model_noRetPerformance', "model_rpc 性能测试"..test_count.."次调用,测试开始------------------------------------------")
    UnitTest.PerformanceTest("wk16_abel_ctrl_model_noRetPerformance","model_rpc 性能测试1：直接调用 model 方法", function()
        local retvalue = nil
        for i = 1, test_count do
            retvalue = ModelManager.getModel(nil,i):testfunNoRet(1,2)
        end
        for i = test_count+1, test_count*2 do
            retvalue = ModelManager.getModel(nil,i):testfunNoRet('hello_'..i)
        end
    end)
    collectgarbage("collect")
    UnitTest.PerformanceTest("wk16_abel_ctrl_model_noRetPerformance","model_rpc 性能测试2：model_rpcNoRet 调用", function()
        local pRetvalue = nil
        for i = 1, test_count do
            ct.model_rpcNoRet(tempCtrlList[i].insId, 'testfun', 1,2,function (retvalue)
                pRetvalue = retvalue
            end)
        end
        for i = test_count+1, test_count*2 do
            ct.model_rpcNoRet(tempCtrlList[i].insId, 'testfun', 'hello',function (retvalue)
                pRetvalue = retvalue
            end)
        end
    end)
    collectgarbage("collect")
    --[[
    100万次调用
        model_rpc 性能测试1：直接调用 model 方法    执行时间:      3.5659999999998
        model_rpc 性能测试2：model_rpcNoRet 调用    执行时间:      3.1400000000003
    50万次调用
      model_rpc 性能测试1：直接调用 model 方法    执行时间:        1.7050000000004
      model_rpc 性能测试2：model_rpcNoRet 调用    执行时间:        1.5460000000003
    10万次调用
      model_rpc 性能测试1：直接调用 model 方法    执行时间:        0.32999999999993
      model_rpc 性能测试2：model_rpcNoRet 调用    执行时间:        0.29899999999998
    1万次调用
      model_rpc 性能测试1：直接调用 model 方法    执行时间:        0.030999999999949
      model_rpc 性能测试2：model_rpcNoRet 调用    执行时间:        0.0300000000002
  性能比较接近
  --]]
end)
--性能测试-------------------------------------------}

UnitTest.TestBlockEnd()-----------------------------------------------------------