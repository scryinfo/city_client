---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Fisher.
--- DateTime: 2019/7/24 14:39
---建筑经营详情

BuildingRevenueInfoCtrl = class('BuildingRevenueInfoCtrl',UIPanel)
UIPanel:ResgisterOpen(BuildingRevenueInfoCtrl)

local typeId  --用来区分当前建筑类型
local index   --用来记录经营界面当前折线图索引
local incomeData    --用来缓存当前打开历史详情的收入
local numberData    --用来缓存当前打开历史详情的数量
local indexs  --用来记录经营界面当前点击的是否是开启状态
local isbool  --用来记录经营界面当前是否有折线图处于打开状态
function BuildingRevenueInfoCtrl:initialize()
    UIPanel.initialize(self,UIType.Normal,UIMode.HideOther,UICollider.None);
end

function BuildingRevenueInfoCtrl:bundleName()
    return "Assets/CityGame/Resources/View/BuildingRevenueInfoPanel.prefab"
end

function BuildingRevenueInfoCtrl:OnCreate(obj)
    UIPanel.OnCreate(self,obj)
end

function BuildingRevenueInfoCtrl:Awake(go)
    self.gameObject = go
    self:_getComponent(go)
    self.luaBehaviour = self.gameObject:GetComponent('LuaBehaviour')
    self.luaBehaviour:AddClick(self.closeBtn.gameObject,self._clickCloseBtn,self)
    self.luaBehaviour:AddClick(self.salesBtn.gameObject,self._clickSalesBtn,self)
    self.luaBehaviour:AddClick(self.salesVolumeBtn.gameObject,self._clickSalesVolumeBtn,self)
end

function BuildingRevenueInfoCtrl:Active()
    UIPanel.Active(self)
    index = nil
    indexs = nil
    isbool = false
    incomeData = {}
    numberData = {}
    self.time = 0.1
    self.timer = Timer.New(slot(self.UpData, self), 0.1, -1, true)
    --实例表
    self.itemPrefabTab = {}
    self:language()
    Event.AddListener("calculateLinePanel",self.calculateLinePanel,self)
end

function BuildingRevenueInfoCtrl:Refresh()
    if self.m_data then
        self.buildingTs = self.m_data.openingTs
        self.buildingTs = math.floor(self.buildingTs/1000)
        if tonumber(getFormatUnixTime(self.buildingTs).second) ~= 0 then
            self.buildingTs = self.buildingTs - tonumber(getFormatUnixTime(self.buildingTs).second)
        end
        if tonumber(getFormatUnixTime(self.buildingTs).minute) ~= 0 then
            self.buildingTs = self.buildingTs - tonumber(getFormatUnixTime(self.buildingTs).minute) * 60
        end
        if tonumber(getFormatUnixTime(self.buildingTs).hour) ~= 0 then
            self.buildingTs = self.buildingTs - tonumber(getFormatUnixTime(self.buildingTs).hour) * 3600
        end
        self.m_data.insId = OpenModelInsID.BuildingRevenueInfoCtrl
        typeId = string.sub(self.m_data.mId,1,2)
        DataManager.OpenDetailModel(BuildingRevenueInfoModel,self.m_data.insId)
        if self.m_data.buildingType == BuildingType.MaterialFactory then
            --原料厂
            self.topMaterialType.transform.localScale = Vector3.one
            self.topGoodsType.transform.localScale = Vector3.zero
            DataManager.DetailModelRpcNoRet(self.m_data.insId, 'm_ReqBuildingRevenueInfo',self.m_data.id,typeId)
        elseif self.m_data.buildingType == BuildingType.ProcessingFactory then
            --加工厂
            self.topMaterialType.transform.localScale = Vector3.zero
            self.topGoodsType.transform.localScale = Vector3.one
            DataManager.DetailModelRpcNoRet(self.m_data.insId, 'm_ReqBuildingRevenueInfo',self.m_data.id,typeId)
        elseif self.m_data.buildingType == BuildingType.RetailShop then
            --零售店
            self.topMaterialType.transform.localScale = Vector3.zero
            self.topGoodsType.transform.localScale = Vector3.one
            DataManager.DetailModelRpcNoRet(self.m_data.insId, 'm_ReqBuildingRevenueInfo',self.m_data.id,typeId)
        elseif self.m_data.buildingType == BuildingType.Municipal then
            --广告公司
            self.topMaterialType.transform.localScale = Vector3.one
            self.topGoodsType.transform.localScale = Vector3.zero
            DataManager.DetailModelRpcNoRet(self.m_data.insId, 'm_ReqBuildingRevenueInfo',self.m_data.id,typeId)
        elseif self.m_data.buildingType == BuildingType.Laboratory then
            --研究所
            self.topMaterialType.transform.localScale = Vector3.one
            self.topGoodsType.transform.localScale = Vector3.zero
            DataManager.DetailModelRpcNoRet(self.m_data.insId, 'm_ReqBuildingRevenueInfo',self.m_data.id,typeId)
        end
    end
end

function BuildingRevenueInfoCtrl:Hide()
    UIPanel.Hide(self)
    self.timer:Stop()
    self:CloseDestroy(self.itemPrefabTab)
    self.linePanel.gameObject:SetActive(false)
    Event.RemoveListener("calculateLinePanel",self.calculateLinePanel,self)
end
-------------------------------------------------------------获取组件---------------------------------------------------------------------------------
function BuildingRevenueInfoCtrl:_getComponent(go)
    ---TopRoot
    --top
    self.closeBtn = go.transform:Find("topRoot/top/closeBtn")
    self.topName = go.transform:Find("topRoot/top/topName"):GetComponent("Text")
    ---content
    --topMaterialType
    self.topMaterialType = go.transform:Find("content/topMaterialType")
    self.goodsTypeText = go.transform:Find("content/topMaterialType/goodsType/Text"):GetComponent("Text")
    self.todaySalesText = go.transform:Find("content/topMaterialType/todaySales/Text"):GetComponent("Text")
    self.proportionText = go.transform:Find("content/topMaterialType/proportion/Text"):GetComponent("Text")
    --topGoodsType
    self.topGoodsType = go.transform:Find("content/topGoodsType")
    self._goodsTypeText = go.transform:Find("content/topGoodsType/goodsType/Text"):GetComponent("Text")
    self.typeNameText = go.transform:Find("content/topGoodsType/typeName/Text"):GetComponent("Text")
    self._todaySalesText = go.transform:Find("content/topGoodsType/todaySales/Text"):GetComponent("Text")
    self._proportionText = go.transform:Find("content/topGoodsType/proportion/Text"):GetComponent("Text")

    --Content
    self.Content = go.transform:Find("content/ScrollView/Viewport/Content"):GetComponent("RectTransform")
    self.ScrollbarVertical = go.transform:Find("content/ScrollView/ScrollbarVertical"):GetComponent("Scrollbar")
    self.linePanel = go.transform:Find("content/ScrollView/Viewport/Content/linePanel")

    self.salesBtn = go.transform:Find("content/ScrollView/Viewport/Content/linePanel/salesBtn")
    self.selectedSales = go.transform:Find("content/ScrollView/Viewport/Content/linePanel/salesBtn/selectedSales")
    self.salesVolumeBtn = go.transform:Find("content/ScrollView/Viewport/Content/linePanel/salesVolumeBtn")
    self.selectedSalesVolume = go.transform:Find("content/ScrollView/Viewport/Content/linePanel/salesVolumeBtn/selectedSalesVolume")
    self.yScale = go.transform:Find("content/ScrollView/Viewport/Content/linePanel/yScale"):GetComponent("RectTransform")
    self.curve = go.transform:Find("content/ScrollView/Viewport/Content/linePanel/curveBg/curve"):GetComponent("RectTransform")
    self.slide = go.transform:Find("content/ScrollView/Viewport/Content/linePanel/curveBg/curve"):GetComponent("Slide")
    self.graph = go.transform:Find("content/ScrollView/Viewport/Content/linePanel/curveBg/curve"):GetComponent("FunctionalGraph")

    self.tipImg = go.transform:Find("content/tipImg")
    self.tipText = go.transform:Find("content/tipImg/tipText"):GetComponent("Text")

    self.itemMaterialBtn = go.transform:Find("content/ScrollView/Viewport/Content/itemMaterialBtn").gameObject
    self.itemGoodsBtn = go.transform:Find("content/ScrollView/Viewport/Content/itemGoodsBtn").gameObject
end
---------------------------------------------------------------初始化函数------------------------------------------------------------------------------
--初始化UI信息
function BuildingRevenueInfoCtrl:initializeUiInfo()
    if not self.revenueInfo.todaySaleDetail then
        self.tipImg.transform.localScale = Vector3.one
    else
        self.tipImg.transform.localScale = Vector3.zero
        if self.m_data.buildingType == BuildingType.MaterialFactory then
            --原料厂
            for key,value in pairs(self.revenueInfo.todaySaleDetail) do
                local obj = self:loadingItemPrefab(self.itemMaterialBtn,self.Content)
                local itemPrefab = itemMaterialBtn:new(value,obj,self.luaBehaviour,key)
                table.insert(self.itemPrefabTab,itemPrefab)
            end
        elseif self.m_data.buildingType == BuildingType.ProcessingFactory then
            --加工厂
            for key,value in pairs(self.revenueInfo.todaySaleDetail) do
                local obj = self:loadingItemPrefab(self.itemGoodsBtn,self.Content)
                local itemPrefab = itemGoodsBtn:new(value,obj,self.luaBehaviour,key)
                table.insert(self.itemPrefabTab,itemPrefab)
            end
        elseif self.m_data.buildingType == BuildingType.RetailShop then
            --零售店
            for key,value in pairs(self.revenueInfo.todaySaleDetail) do
                local obj = self:loadingItemPrefab(self.itemGoodsBtn,self.Content)
                local itemPrefab = itemGoodsBtn:new(value,obj,self.luaBehaviour,key)
                table.insert(self.itemPrefabTab,itemPrefab)
            end
        elseif self.m_data.buildingType == BuildingType.Municipal then
            --广告公司
            for key,value in pairs(self.revenueInfo.todaySaleDetail) do
                local obj = self:loadingItemPrefab(self.itemMaterialBtn,self.Content)
                local itemPrefab = itemMaterialBtn:new(value,obj,self.luaBehaviour,key)
                table.insert(self.itemPrefabTab,itemPrefab)
            end
        elseif self.m_data.buildingType == BuildingType.Laboratory then
            --研究所
            for key,value in pairs(self.revenueInfo.todaySaleDetail) do
                local obj = self:loadingItemPrefab(self.itemMaterialBtn,self.Content)
                local itemPrefab = itemMaterialBtn:new(value,obj,self.luaBehaviour,key)
                table.insert(self.itemPrefabTab,itemPrefab)
            end
        end
    end
end
--初始化打开面板信息
function BuildingRevenueInfoCtrl:initializePanelUiInfo()
    self.selectedSales.transform.localScale = Vector3.one
    self.selectedSalesVolume.transform.localScale = Vector3.zero
    --默认传销售额incomeData
    self:DrawBuildingLine(incomeData,1)
    --self:_clickSalesBtn(self)
end
--多语言
function BuildingRevenueInfoCtrl:language()
    self.tipText.text = "暂无详情"
    self.topName.text = "收入详情"
    self.todaySalesText.text = "今日销售额"
    self._todaySalesText.text = "今日销售额"
    self.proportionText.text = "占昨日销售额比例"
    self._proportionText.text = "占昨日销售额比例"
    --根据建筑显示是原料还是商品还是建筑名字（研究所）
    if self.m_data.buildingType == BuildingType.MaterialFactory then
        self.goodsTypeText.text = "原料"
    elseif self.m_data.buildingType == BuildingType.ProcessingFactory then
        self._goodsTypeText.text = "商品"
        self.typeNameText.text = "品牌"
    elseif self.m_data.buildingType == BuildingType.RetailShop then
        self._goodsTypeText.text = "商品"
        self.typeNameText.text = "品牌"
    elseif self.m_data.buildingType == BuildingType.Municipal then
        self.goodsTypeText.text = "数据类型"
    elseif self.m_data.buildingType == BuildingType.Laboratory then
        self.goodsTypeText.text = "科技资料"
    end
end
-----------------------------------------------------------------------------回调函数-------------------------------------------------------------------------
--请求建筑经营详情成功
function BuildingRevenueInfoCtrl:revenueInfoData(data)
    if data ~= nil then
        self.revenueInfo = data
        --初始化UI信息
        self:initializeUiInfo()
    end
end
--请求建筑历史经营详情成功
function BuildingRevenueInfoCtrl:historyRevenueInfoData(data)
    if data ~= nil then
        local incomeDatas = {}
        local numberDatas = {}
        for key,value in pairs(data.historyDetail) do
            incomeDatas.time = value.time
            numberDatas.time = value.time
            incomeDatas.value = value.saleDetail.income
            numberDatas.value = value.saleDetail.saleNum
            incomeData[key] = ct.deepCopy(incomeDatas)
            numberData[key] = ct.deepCopy(numberDatas)
        end
        numberData.value = self.num
        incomeData.value = self.account
        self:openLinePanel(index)
        if isbool == false then
            return
        end
        if indexs == 1 then
            --self.Content.anchoredPosition = Vector3(0,0,0)
            self.Content:DOLocalMove(Vector2.New(0, 0),0.1):SetEase(DG.Tweening.Ease.Linear)
            self:initializePanelUiInfo()
        else
            self.timer:Start()
        end
    end
end
-----------------------------------------------------------------------------点击函数-------------------------------------------------------------------------
--关闭
function BuildingRevenueInfoCtrl:_clickCloseBtn()
    PlayMusEff(1002)
    UIPanel.ClosePage()
end
--查看7天的销售额
function BuildingRevenueInfoCtrl:_clickSalesBtn(ins)
    PlayMusEff(1002)
    ins.selectedSales.transform.localScale = Vector3.one
    ins.selectedSalesVolume.localScale = Vector3.zero
    --点击销售额传incomeData
    ins:DrawBuildingLine(incomeData,1)

end
--查看7天的销售量
function BuildingRevenueInfoCtrl:_clickSalesVolumeBtn(ins)
    PlayMusEff(1002)
    ins.selectedSales.transform.localScale = Vector3.zero
    ins.selectedSalesVolume.localScale = Vector3.one
    --点击销量传numberData
    ins:DrawBuildingLine(numberData,2)
end
-----------------------------------------------------------------------------事件函数-------------------------------------------------------------------------
--计算位置
function BuildingRevenueInfoCtrl:calculateLinePanel(ins)
    index = ins.keyId
    incomeData = {}
    numberData = {}
    --因为7天历史统计服不包括今天的，所以缓存今天的
    self.num = ins.data.num
    self.account = ins.data.saleAccount
    if indexs == index and isbool == true then
        self:openLinePanel(index)
    else
        DataManager.DetailModelRpcNoRet(self.m_data.insId, 'm_ReqBuildingHistoryRevenueInfo',self.m_data.id,tonumber(typeId),ins.data.itemId,ins.data.producerId)
    end
end
-------------------------------------------------------------------------------------------------------------------------------------------------------------
--打开折线图
function BuildingRevenueInfoCtrl:openLinePanel(index)
    if isbool == false then
        indexs = index
        self.linePanel.transform:SetSiblingIndex(index + 2)
        self.linePanel.gameObject:SetActive(true)
        isbool = true
    elseif indexs == index and isbool == true then
        indexs = nil
        self.linePanel.gameObject:SetActive(false)
        self.timer:Stop()
        isbool = false
    elseif indexs ~= index and isbool == true then
        indexs = index
        self.linePanel.transform:SetSiblingIndex(index + 2)
    end
end
function BuildingRevenueInfoCtrl:UpData()
    self.time = self.time - 0.1
    if self.time < 0.1 or self.time < 0 then
        self.time = 0.1
--[[        if indexs == #self.itemPrefabTab then
            --如果点击打开的是最后一个，直接把位置拉倒最后
            --self.ScrollbarVertical.value = 0
            self.Content:DOLocalMove(Vector2.New(0, 132 * (indexs - 1) + (indexs * 5)),0.1):SetEase(DG.Tweening.Ease.Linear)
        else
            --self.Content.anchoredPosition = Vector2.New(0, 132 * (indexs - 1) + (indexs * 5))
            self.Content:DOLocalMove(Vector2.New(0, 132 * (indexs - 1) + (indexs * 5)),0.1):SetEase(DG.Tweening.Ease.Linear)
        end]]
        --暂时不要效果，隐藏
        --self.Content:DOLocalMove(Vector2.New(0, 132 * (indexs - 1) + (indexs * 5)),0.1):SetEase(DG.Tweening.Ease.Linear)
        self:initializePanelUiInfo()
        self.timer:Stop()
    end
end
--加载实例化Prefab
function BuildingRevenueInfoCtrl:loadingItemPrefab(itemPrefab,itemRoot)
    local obj = UnityEngine.GameObject.Instantiate(itemPrefab)
    local objRect = obj.transform:GetComponent("RectTransform")
    obj.transform:SetParent(itemRoot.transform)
    objRect.transform.localScale = Vector3.one
    obj:SetActive(true)
    return obj
end
--关闭时清空
function BuildingRevenueInfoCtrl:CloseDestroy(dataTable)
    if next(dataTable) == nil then
        return
    else
        for key,valueObj in pairs(dataTable) do
            destroy(valueObj.prefab.gameObject)
            dataTable[key] = nil
        end
    end
end

function BuildingRevenueInfoCtrl:DrawBuildingLine(info,id)
    self.graph:Close()
    self.slide:Close()
    local currentTime = TimeSynchronized.GetTheCurrentTime()    --服务器当前时间(秒)
    local ts = getFormatUnixTime(currentTime)
    local second = tonumber(ts.second)
    local minute = tonumber(ts.minute)
    local hour = tonumber(ts.hour)
    if second ~= 0 then
        currentTime = currentTime -second
    end
    if minute ~= 0 then
        currentTime = currentTime - minute * 60
    end
    if hour ~= 0 then
        currentTime = currentTime - hour * 3600
    end
    currentTime = math.floor(currentTime)        --当天0点的时间
    local monthAgo = currentTime - 604800 + 86400     --7天前的0点
    local updataTime = monthAgo
    local time = {}
    local turnoverTab = {}
    local buildingTs = self.buildingTs
    if buildingTs >= monthAgo then
        updataTime = buildingTs
        for i = 1, 7 do
            time[i] = getFormatUnixTime(updataTime).month .. "." .. getFormatUnixTime(updataTime).day
            if updataTime <= currentTime then
                turnoverTab[i] = {}
                turnoverTab[i].coordinate = (updataTime - buildingTs + 86400) / 86400 * 234
                turnoverTab[i].money = 0
                if info ~= nil then
                    for k, v in pairs(info) do
                        if v ~= 0 then
                            if updataTime == v.time /1000 then
                                if id == 1 then
                                    turnoverTab[i].money = tonumber(GetClientPriceString(v.value))
                                elseif id == 2 then
                                    turnoverTab[i].money = v.value
                                end
                            end
                        end
                    end
                end
                if updataTime == currentTime then
                    if id == 1 then
                        turnoverTab[i].money = tonumber(GetClientPriceString(info.value))
                    elseif id == 2 then
                        turnoverTab[i].money = info.value
                    end
                end
            end
            updataTime = updataTime + 86400
        end
    else
        for i = 1, 7 do
            time[i] = getFormatUnixTime(updataTime).month .. "." .. getFormatUnixTime(updataTime).day
            turnoverTab[i] = {}
            turnoverTab[i].coordinate = (updataTime - monthAgo + 86400) / 86400 * 234
            turnoverTab[i].money = 0
            if info ~= nil then
                for k, v in pairs(info) do
                    if v ~= 0 then
                        if updataTime == v.time/1000 then
                            if id == 1 then
                                turnoverTab[i].money = tonumber(GetClientPriceString(v.value))
                            elseif id == 2 then
                                turnoverTab[i].money = v.value
                            end
                        end
                    end
                end
            end
            updataTime = updataTime + 86400
        end
        if id == 1 then
            turnoverTab[#turnoverTab].money = tonumber(GetClientPriceString(info.value))
        elseif id == 2 then
            turnoverTab[#turnoverTab].money = info.value
        end
    end

    --转换为Vector2类型
    local turnover = {}
    for i, v in pairs(turnoverTab) do
        turnover[i] = Vector2.New(v.coordinate,v.money)
    end
    table.insert(time,1,"0")
    table.insert(turnover,1,Vector2.New(0,0))
    local max = 0
    for i, v in pairs(turnover) do
        if v.y > max then
            max = v.y
        end
    end
    local scale = SetYScale(max,4,self.yScale)
    local turnoverVet = {}
    for i, v in pairs(turnover) do
        if scale == 0 then
            turnoverVet[i] = v
        else
            turnoverVet[i] = Vector2.New(v.x,v.y / scale * 100)
        end
    end

    self.slide:SetXScaleValue(time,234)
    if id == 1 then
        self.graph:DrawLine(turnoverVet,Color.New(243 / 255, 152 / 255, 0 / 255, 255 / 255),1)
        self.slide:SetCoordinate(turnoverVet,turnover,Color.New(243 / 255, 152 / 255, 0 / 255, 255 / 255),1)
    elseif id == 2 then
        self.graph:DrawLine(turnoverVet,Color.New(131 / 255, 165 / 255, 228 / 255, 255 / 255),1)
        self.slide:SetCoordinate(turnoverVet,turnover,Color.New(131 / 255, 165 / 255, 228 / 255, 255 / 255),1)
    end

    self.curve.localPosition = self.curve.localPosition + Vector3.New(0.01, 0,0)
    self.curve.sizeDelta = self.curve.sizeDelta + Vector2.New(0.01, 0)
end
