---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xuyafang.
--- DateTime: 2018/10/16 11:05
---管理行情&收藏界面的排序
ExchangeSortItemType =
{
    Default = 0,
    Name = 1,
    Change = 2,
    High = 3,
    Low = 4,
    LastPrice = 5,
    Volume = 6,
}



ExchangeSortMgr = class('ExchangeSortMgr')

--初始化方法
function ExchangeSortMgr:initialize(transform)
    self.transform = transform;

    self.nameToggle = transform:Find("nameToggle"):GetComponent("Toggle");
    self.nameToggleItem = ExchangeSortItem:new(self.nameToggle.transform)
    self.changeToggle = transform:Find("change"):GetComponent("Toggle");
    self.changeToggleItem = ExchangeSortItem:new(self.changeToggle.transform)
    self.highToggle = transform:Find("high"):GetComponent("Toggle");
    self.highToggleItem = ExchangeSortItem:new(self.highToggle.transform)
    self.lowToggle = transform:Find("low"):GetComponent("Toggle");
    self.lowToggleItem = ExchangeSortItem:new(self.lowToggle.transform)
    self.lastPriceToggle = transform:Find("lastPrice"):GetComponent("Toggle");
    self.lastPriceToggleItem = ExchangeSortItem:new(self.lastPriceToggle.transform)
    self.volumeToggle = transform:Find("volume"):GetComponent("Toggle");
    self.volumeToggleItem = ExchangeSortItem:new(self.volumeToggle.transform)

    self.nameToggle.onValueChanged:AddListener(function (isOn)
        self:_nameToggleValueChange(isOn)
    end)
    self.changeToggle.onValueChanged:AddListener(function (isOn)
        self:_changeToggleValueChange(isOn)
    end)
    self.highToggle.onValueChanged:AddListener(function (isOn)
        self:_highToggleValueChange(isOn)
    end)
    self.lowToggle.onValueChanged:AddListener(function (isOn)
        self:_lowToggleValueChange(isOn)
    end)
    self.lastPriceToggle.onValueChanged:AddListener(function (isOn)
        self:_lastPriceToggleValueChange(isOn)
    end)
    self.volumeToggle.onValueChanged:AddListener(function (isOn)
        self:_volumeToggleValueChange(isOn)
    end)

    self.sortData = {}
end
--获取当前排序的数据，按什么排序以及是由大到小还是由小到大
function ExchangeSortMgr:_getCurrentSortData()
    return self.sortData
end
--重置为默认排序
function ExchangeSortMgr:_reSetSortData()
    self.sortData.sortItemType = ExchangeSortItemType.Default
    self.volumeToggle.isOn = false

    self:_nameToggleValueChange(false)
    self:_changeToggleValueChange(false)
    self:_highToggleValueChange(false)
    self:_lowToggleValueChange(false)
    self:_lastPriceToggleValueChange(false)

    self.volumeToggle.isOn = true
end

---行情排序toggle
--name
function ExchangeSortMgr:_nameToggleValueChange(isOn)
    if isOn then
        if self.sortData.sortItemType ~= ExchangeSortItemType.Name then
            self.nameToggleItem:BiggerShow()
            self.sortData.isSmaller = true
            self.sortData.sortItemType = ExchangeSortItemType.Name
            Event.Brocast("c_onExchangeSort", self.sortData)
        else
            if self.sortData.isSmaller then
                self.nameToggleItem:SmallerShow()
            else
                self.nameToggleItem:BiggerShow()
            end
            self.sortData.isSmaller = not self.sortData.isSmaller
            Event.Brocast("c_onExchangeSort", self.sortData)
        end
    else
        self.nameToggleItem:CommonShow()
    end
end
--change
function ExchangeSortMgr:_changeToggleValueChange(isOn)
    if isOn then
        if self.sortData.sortItemType ~= ExchangeSortItemType.Change then
            self.changeToggleItem:BiggerShow()
            self.sortData.isSmaller = true
            self.sortData.sortItemType = ExchangeSortItemType.Change
            Event.Brocast("c_onExchangeSort", self.sortData)
        else
            if self.sortData.isSmaller then
                self.changeToggleItem:SmallerShow()
            else
                self.changeToggleItem:BiggerShow()
            end
            self.sortData.isSmaller = not self.sortData.isSmaller
            Event.Brocast("c_onExchangeSort", self.sortData)
        end
    else
        self.changeToggleItem:CommonShow()
    end
end
--high
function ExchangeSortMgr:_highToggleValueChange(isOn)
    if isOn then
        if self.sortData.sortItemType ~= ExchangeSortItemType.High then
            self.highToggleItem:BiggerShow()
            self.sortData.isSmaller = true
            self.sortData.sortItemType = ExchangeSortItemType.High
            Event.Brocast("c_onExchangeSort", self.sortData)
        else
            if self.sortData.isSmaller then
                self.highToggleItem:SmallerShow()
            else
                self.highToggleItem:BiggerShow()
            end
            self.sortData.isSmaller = not self.sortData.isSmaller
            Event.Brocast("c_onExchangeSort", self.sortData)
        end
    else
        self.highToggleItem:CommonShow()
    end
end
--low
function ExchangeSortMgr:_lowToggleValueChange(isOn)
    if isOn then
        if self.sortData.sortItemType ~= ExchangeSortItemType.Low then
            self.lowToggleItem:BiggerShow()
            self.sortData.isSmaller = true
            self.sortData.sortItemType = ExchangeSortItemType.Low
            Event.Brocast("c_onExchangeSort", self.sortData)
        else
            if self.sortData.isSmaller then
                self.lowToggleItem:SmallerShow()
            else
                self.lowToggleItem:BiggerShow()
            end
            self.sortData.isSmaller = not self.sortData.isSmaller
            Event.Brocast("c_onExchangeSort", self.sortData)
        end
    else
        self.lowToggleItem:CommonShow()
    end
end
--lastPrice
function ExchangeSortMgr:_lastPriceToggleValueChange(isOn)
    if isOn then
        if self.sortData.sortItemType ~= ExchangeSortItemType.LastPrice then
            self.lastPriceToggleItem:BiggerShow()
            self.sortData.isSmaller = true
            self.sortData.sortItemType = ExchangeSortItemType.LastPrice
            Event.Brocast("c_onExchangeSort", self.sortData)
        else
            if self.sortData.isSmaller then
                self.lastPriceToggleItem:SmallerShow()
            else
                self.lastPriceToggleItem:BiggerShow()
            end
            self.sortData.isSmaller = not self.sortData.isSmaller
            Event.Brocast("c_onExchangeSort", self.sortData)
        end
    else
        self.lastPriceToggleItem:CommonShow()
    end
end
--volume
function ExchangeSortMgr:_volumeToggleValueChange(isOn)
    if isOn then
        if self.sortData.sortItemType ~= ExchangeSortItemType.Volume then
            self.volumeToggleItem:BiggerShow()
            self.sortData.isSmaller = true
            self.sortData.sortItemType = ExchangeSortItemType.Volume
            Event.Brocast("c_onExchangeSort", self.sortData)
        else
            if self.sortData.isSmaller then
                self.volumeToggleItem:SmallerShow()
            else
                self.volumeToggleItem:BiggerShow()
            end
            self.sortData.isSmaller = not self.sortData.isSmaller
            Event.Brocast("c_onExchangeSort", self.sortData)
        end
    else
        self.volumeToggleItem:CommonShow()
    end
end



