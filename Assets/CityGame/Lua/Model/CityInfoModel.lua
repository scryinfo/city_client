---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by password.
--- DateTime: 2019/8/10 17:35
---City Information Model
CityInfoModel = class("CityInfoModel",ModelBase)
local pbl = pbl

function CityInfoModel:initialize(insId)
    self.insId = insId
    self:OnCreate()
end

function CityInfoModel:OnCreate()
    DataManager.RegisterErrorNetMsg()
    --Online registration
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","eachTypeNpcNum","gs.EachTypeNpcNum",self.n_OnGetNpcNum,self) --Number of npc types
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","getPlayerAmount","gs.PlayerAmount",self.n_OnPlayerCountCurve,self) --Number of players
    DataManager.ModelRegisterNetMsg(nil,"sscode.OpCode","queryIndustryIncome","ss.IndustryIncome",self.n_OnIndustryIncome,self)
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","querySupplyAndDemand","gs.SupplyAndDemand",self.n_OnSupplyAndDemand,self)
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","queryIndustryTopInfo","gs.IndustryTopInfo",self.n_OnIndustryTopInfo,self)
    DataManager.ModelRegisterNetMsg(nil,"sscode.OpCode","queryGroundOrApartmentAvgPrice","ss.AverageTransactionprice",self.n_OnAvgPrice,self)
    DataManager.ModelRegisterNetMsg(nil,"sscode.OpCode","queryCityTransactionAmount","ss.CityTransactionAmount",self.n_OnTransactionAmount,self)
    DataManager.ModelRegisterNetMsg(nil,"sscode.OpCode","queryCityMoneyPool","ss.CityTransactionAmount",self.n_OnMoneyPool,self)  --history
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","queryMoneyPoolInfo","gs.MoneyPool",self.n_OnMoneyPoolInfo,self)  --today
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","queryRegalRanking","gs.RegalRanking",self.n_OnRanking,self)
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","queryCityLevel","gs.CityLevel",self.n_OnLevel,self)
    DataManager.ModelRegisterNetMsg(nil,"sscode.OpCode","queryItemSales","ss.ItemSales",self.n_OnItemSales,self)  --Turnover
    DataManager.ModelRegisterNetMsg(nil,"sscode.OpCode","queryItemAvgPrice","ss.AverageTransactionprice",self.n_OnItemAvgPrice,self)  --Detailed average transaction price
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","queryEvaGrade","gs.EvaGrade",self.n_OnEvaGrade,self)  --Eva Distribution
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","queryItemSupplyAndDemand","gs.SupplyAndDemand",self.n_OnItemSupplyAndDemand,self)  --Detailed supply and demand
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","queryProductRanking","gs.ProductRanking",self.n_OnProductRanking,self)  --Detailed ranking

end

function CityInfoModel:Close()
    --Clear this clear local UI events
    DataManager.ModelRemoveNetMsg(nil,"gscode.OpCode","eachTypeNpcNum","gs.EachTypeNpcNum",self.n_OnGetNpcNum,self)
    DataManager.ModelRemoveNetMsg(nil,"gscode.OpCode","getPlayerAmount","gs.PlayerAmount",self.n_OnPlayerCountCurve,self)
    DataManager.ModelRemoveNetMsg(nil,"sscode.OpCode","queryIndustryIncome","ss.IndustryIncome",self.n_OnIndustryIncome,self)
    DataManager.ModelRemoveNetMsg(nil,"gscode.OpCode","querySupplyAndDemand","gs.SupplyAndDemand",self.n_OnSupplyAndDemand,self)
    DataManager.ModelRemoveNetMsg(nil,"gscode.OpCode","queryIndustryTopInfo","gs.IndustryTopInfo",self.n_OnIndustryTopInfo,self)
    DataManager.ModelRemoveNetMsg(nil,"sscode.OpCode","queryGroundOrApartmentAvgPrice","ss.AverageTransactionprice",self.n_OnAvgPrice,self)
    DataManager.ModelRemoveNetMsg(nil,"sscode.OpCode","queryCityTransactionAmount","ss.CityTransactionAmount",self.n_OnTransactionAmount,self)
    DataManager.ModelRemoveNetMsg(nil,"sscode.OpCode","queryCityMoneyPool","ss.CityTransactionAmount",self.n_OnMoneyPool,self)
    DataManager.ModelRemoveNetMsg(nil,"gscode.OpCode","queryMoneyPoolInfo","gs.MoneyPool",self.n_OnMoneyPoolInfo,self)
    DataManager.ModelRemoveNetMsg(nil,"gscode.OpCode","queryRegalRanking","gs.RegalRanking",self.n_OnRanking,self)
    DataManager.ModelRemoveNetMsg(nil,"sscode.OpCode","queryItemSales","ss.ItemSales",self.n_OnItemSales,self)
    DataManager.ModelRemoveNetMsg(nil,"sscode.OpCode","queryItemAvgPrice","ss.AverageTransactionprice",self.n_OnItemAvgPrice,self)
    DataManager.ModelRemoveNetMsg(nil,"gscode.OpCode","queryEvaGrade","gs.EvaGrade",self.n_OnEvaGrade,self)
    DataManager.ModelRemoveNetMsg(nil,"gscode.OpCode","queryItemSupplyAndDemand","gs.SupplyAndDemand",self.n_OnItemSupplyAndDemand,self)
    DataManager.ModelRemoveNetMsg(nil,"gscode.OpCode","queryProductRanking","gs.ProductRanking",self.n_OnProductRanking,self)

end
--Client request--

--Get the number of npc
function CityInfoModel:m_GetNpcNum()
    local msgId = pbl.enum("gscode.OpCode","eachTypeNpcNum")
    CityEngineLua.Bundle:newAndSendMsg(msgId,nil)
end

--Get the number of players
function CityInfoModel:m_GetPlayerNum()
    local msgId = pbl.enum("gscode.OpCode","getPlayerAmount")
    CityEngineLua.Bundle:newAndSendMsg(msgId,nil)
end

--Check industry income
function CityInfoModel:m_queryIndustryIncome()
    local msgId = pbl.enum("sscode.OpCode","queryIndustryIncome")
    CityEngineLua.Bundle:newAndSendMsgExt(msgId, nil, CityEngineLua._tradeNetworkInterface1)
end

--Query industry supply and demand
function CityInfoModel:m_querySupplyAndDemand(type)
    DataManager.ModelSendNetMes("gscode.OpCode", "querySupplyAndDemand","gs.SupplyAndDemand",{type = type})
end

--Query industry ranking
function CityInfoModel:m_queryIndustryTopInfo(ownerId,type)
    DataManager.ModelSendNetMes("gscode.OpCode", "queryIndustryTopInfo","gs.QueryIndustry",{pid = ownerId,type = type})
end

--Check the average transaction price
function CityInfoModel:m_queryAvgPrice(bool)
    local msgId = pbl.enum("sscode.OpCode","queryGroundOrApartmentAvgPrice")
    local lMsg = { b = bool }
    local pMsg = assert(pbl.encode("gs.Bool", lMsg))
    CityEngineLua.Bundle:newAndSendMsgExt(msgId, pMsg, CityEngineLua._tradeNetworkInterface1)
end

--Query citywide sales
function CityInfoModel:m_queryTransactionAmount(bool)
    local msgId = pbl.enum("sscode.OpCode","queryCityTransactionAmount")
    local lMsg = { b = bool }
    local pMsg = assert(pbl.encode("gs.Bool", lMsg))
    CityEngineLua.Bundle:newAndSendMsgExt(msgId, pMsg, CityEngineLua._tradeNetworkInterface1)
end

--Query the city-wide bonus pool (today)
function CityInfoModel:m_queryMoneyPoolInfo()
    local msgId = pbl.enum("gscode.OpCode","queryMoneyPoolInfo")
    CityEngineLua.Bundle:newAndSendMsg(msgId,nil)
end

--Query the city-wide bonus pool (history)
function CityInfoModel:m_queryMoneyPool()
    local msgId = pbl.enum("sscode.OpCode","queryCityMoneyPool")
    CityEngineLua.Bundle:newAndSendMsgExt(msgId, pMsg, CityEngineLua._tradeNetworkInterface1)
end

--Query leaderboard
function CityInfoModel:m_queryRanking(playerId)
    DataManager.ModelSendNetMes("gscode.OpCode", "queryRegalRanking","gs.Id",{id = playerId})
end

--Query level
function CityInfoModel:m_queryLevel()
    local msgId = pbl.enum("gscode.OpCode","queryCityLevel")
    CityEngineLua.Bundle:newAndSendMsg(msgId,nil)
end

--Query turnover
function CityInfoModel:m_queryItemSales(type,itemId)
    local msgId = pbl.enum("sscode.OpCode","queryItemSales")
    local lMsg = { industryId = type,itemId = itemId }
    local pMsg = assert(pbl.encode("ss.queryItemSales", lMsg))
    CityEngineLua.Bundle:newAndSendMsgExt(msgId, pMsg, CityEngineLua._tradeNetworkInterface1)
end

--Query details
function CityInfoModel:m_queryItemAvgPrice(type,itemId)
    local msgId = pbl.enum("sscode.OpCode","queryItemAvgPrice")
    local lMsg = { industryId = type,itemId = itemId }
    local pMsg = assert(pbl.encode("ss.queryItemAvgPrice", lMsg))
    CityEngineLua.Bundle:newAndSendMsgExt(msgId, pMsg, CityEngineLua._tradeNetworkInterface1)
end

--Query distribution
function CityInfoModel:m_queryEvaGrade(industryId,itemId,type)
    DataManager.ModelSendNetMes("gscode.OpCode", "queryEvaGrade","gs.queryEvaGrade",{industryId = industryId,itemId= itemId,type = type})
end

--Check for details
function CityInfoModel:m_ItemSupplyAndDemand(industryId,itemId)
    DataManager.ModelSendNetMes("gscode.OpCode", "queryItemSupplyAndDemand","gs.queryItemSupplyAndDemand",{industryId = industryId,itemId= itemId})
end

--Query details ranking
function CityInfoModel:m_queryProductRanking(industryId,itemId,playerId)
    DataManager.ModelSendNetMes("gscode.OpCode", "queryProductRanking","gs.queryProductRanking",{industryId = industryId,itemId= itemId,playerId = playerId})
end

--Server callback

--Number of npc types
function CityInfoModel:n_OnGetNpcNum(info)
    DataManager.ControllerRpcNoRet(self.insId,"CityInfoCtrl", 'c_NpcNum',info)
end

--Number of players
function CityInfoModel:n_OnPlayerCountCurve(lMsg)
    DataManager.ControllerRpcNoRet(self.insId,"CityInfoCtrl", 'c_PlayerNum',lMsg.playerAmount)
end

---Industry income
function CityInfoModel:n_OnIndustryIncome(info)
    DataManager.ControllerRpcNoRet(self.insId,"CityInfoCtrl", '_receiveIndustryIncome',info)
end

--Industry supply and demand
function CityInfoModel:n_OnSupplyAndDemand(info)
    DataManager.ControllerRpcNoRet(self.insId,"CityInfoCtrl", '_receiveSupplyAndDemand',info)
end

--Industry ranking
function CityInfoModel:n_OnIndustryTopInfo(info)
    DataManager.ControllerRpcNoRet(self.insId,"CityInfoCtrl", '_receiveIndustryTopInfo',info)
end

--Average transaction price
function CityInfoModel:n_OnAvgPrice(info)
    DataManager.ControllerRpcNoRet(self.insId,"CityInfoCtrl", '_receiveAvgPrice',info)
end

--Sales throughout the city
function CityInfoModel:n_OnTransactionAmount(info)
    if info.flag then  --History
        DataManager.ControllerRpcNoRet(self.insId,"CityVolumeCtrl", '_receiveTransactionAmount',info.amount)
    else  --today
        DataManager.ControllerRpcNoRet(self.insId,"CityInfoCtrl", '_receiveTransactionAmount',info.amount)
    end
end

--City Bonus Pool (History)
function CityInfoModel:n_OnMoneyPool(info)
    DataManager.ControllerRpcNoRet(self.insId,"CityVolumeCtrl", '_receiveMoneyPool',info.amount)
end

--City bonus pool (today)
function CityInfoModel:n_OnMoneyPoolInfo(info)
    DataManager.ControllerRpcNoRet(self.insId,"CityInfoCtrl", '_receiveMoneyPoolInfo',info)
end

-- Leaderboard
function CityInfoModel:n_OnRanking(info)
    DataManager.ControllerRpcNoRet(self.insId,"CityRickListCtrl", '_receiveRanking',info)
end

--grade
function CityInfoModel:n_OnLevel(info)
    DataManager.ControllerRpcNoRet(self.insId,"CityInfoCtrl", '_receiveLevel',info)
end

--Turnover
function CityInfoModel:n_OnItemSales(info)
    DataManager.ControllerRpcNoRet(self.insId,"CityInfoCtrl", '_receiveItemSales',info)
end

--Detailed average transaction price
function CityInfoModel:n_OnItemAvgPrice(info)
    DataManager.ControllerRpcNoRet(self.insId,"CityInfoCtrl", '_receiveItemAvgPrice',info)
end

--Eva distributed
function CityInfoModel:n_OnEvaGrade(info)
    DataManager.ControllerRpcNoRet(self.insId,"CityInfoCtrl", '_receiveEvaGrade',info)
end

--Detailed supply and demand
function CityInfoModel:n_OnItemSupplyAndDemand(info)
    DataManager.ControllerRpcNoRet(self.insId,"CityInfoCtrl", '_receiveItemSupplyAndDemand',info)
end

--Detailed ranking
function CityInfoModel:n_OnProductRanking(info)
    DataManager.ControllerRpcNoRet(self.insId,"CityInfoCtrl", '_receiveProductRanking',info)
end


