---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by password.
--- DateTime: 2019/3/6 11:13
---Trading volume model
VolumeModel = class("VolumeModel",ModelBase)

function VolumeModel:initialize(insId)
    self.insId = insId
    self:OnCreate()
end

function VolumeModel:OnCreate()
    DataManager.RegisterErrorNetMsg()
    --Online registration
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","eachTypeNpcNum","gs.EachTypeNpcNum",self.n_OnGetNpcNum,self) --Number of npc types
    --DataManager.ModelRegisterNetMsg(nil,"sscode.OpCode","queryGoodsNpcNum","ss.GoodsNpcNum",self.n_OnGoodsNpcNum,self) --每种商品购买的npc数量
    DataManager.ModelRegisterNetMsg(nil,"sscode.OpCode","queryNpcNum","ss.NpcNums",self.n_OnGoodsNpcNum,self) --每种商品购买的npc数量
    DataManager.ModelRegisterNetMsg(nil,"sscode.OpCode","queryNpcExchangeAmount","ss.NpcExchangeAmount",self.n_OnNpcExchangeAmount,self) --所有npc交易量
    DataManager.ModelRegisterNetMsg(nil,"sscode.OpCode","queryExchangeAmount","ss.ExchangeAmount",self.n_OnExchangeAmount,self) --所有交易量
    DataManager.ModelRegisterNetMsg(nil,"sscode.OpCode","queryPlayerExchangeAmount","ss.PlayExchangeAmount",self.n_OnPlayerTypeNum,self) --总量曲线
    --DataManager.ModelRegisterNetMsg(nil,"sscode.OpCode","queryPlayerGoodsCurve","ss.PlayerGoodsCurve",self.n_OnPlayerNumCurve,self) --购买数量
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","getPlayerAmount","gs.PlayerAmount",self.n_OnPlayerCountCurve,self) --Number of players
    DataManager.ModelRegisterNetMsg(nil,"sscode.OpCode","queryPlayerGoodsCurve","ss.PlayerGoodsCurve",self.n_OngetPlayerAmount,self) --玩家交易商品数量


end

function VolumeModel:Close()
    --Clear local UI events

end

--------------------Customer service terminal---------------------
--Get the number of each type of npc
function VolumeModel:m_GetNpcNum()
    local msgId = pbl.enum("gscode.OpCode","eachTypeNpcNum")
    ----2、 Fill protobuf internal protocol data
    --local msglogion = pb.as.Login()
    --msglogion.account = this.username
    --local pb_login = msglogion:SerializeToString()  -- Parse Example
    ----3、 Get protobuf data size
    --local pb_size = #pb_login
    ----4、 Create package, fill in data and concurrent package
    CityEngineLua.Bundle:newAndSendMsg(msgId,nil)
end

--The number of npc purchased for each product
function VolumeModel:m_GoodsNpcNum(time,type)
    local msgId = pbl.enum("sscode.OpCode","queryNpcNum")
    local lMsg = { time = time ,type = type }
    local pMsg = assert(pbl.encode("ss.QueryNpcNum", lMsg))
    --local msg = assert(pbl.decode("ss.QueryNpcNum",pMsg))
    CityEngineLua.Bundle:newAndSendMsgExt(msgId, pMsg, CityEngineLua._tradeNetworkInterface1)
end

--All npc transaction volume
function VolumeModel:m_NpcExchangeAmount()
    local msgId = pbl.enum("sscode.OpCode","queryNpcExchangeAmount")
    CityEngineLua.Bundle:newAndSendMsgExt(msgId, nil, CityEngineLua._tradeNetworkInterface1)
end

--All transactions
function VolumeModel:m_ExchangeAmount()
    local msgId = pbl.enum("sscode.OpCode","queryExchangeAmount")
    CityEngineLua.Bundle:newAndSendMsgExt(msgId, nil, CityEngineLua._tradeNetworkInterface1)
end

--Graph data (Supply)
function VolumeModel:m_GoodsNpcNumCurve(itemId)
    local msgId = pbl.enum("sscode.OpCode","queryGoodsNpcNumCurve")
    local lMsg = { id = itemId }
    local pMsg = assert(pbl.encode("ss.GoodsNpcNumCurve", lMsg))
    CityEngineLua.Bundle:newAndSendMsgExt(msgId, pMsg, CityEngineLua._tradeNetworkInterface1)
end
--Graph data (demand)
function VolumeModel:m_GoodsNpcTypeNum(itemId)
    local msgId = pbl.enum("sscode.OpCode","queryNpcTypeNum")
    CityEngineLua.Bundle:newAndSendMsgExt(msgId, nil, CityEngineLua._tradeNetworkInterface1)
end
--Current player transactions
function VolumeModel:m_PlayerTypeNum(itemId)
    local msgId = pbl.enum("sscode.OpCode","queryPlayerExchangeAmount")
    CityEngineLua.Bundle:newAndSendMsgExt(msgId,nil,CityEngineLua._tradeNetworkInterface1)
end
--Current player transaction total curve
function VolumeModel:m_GoodsplayerTypeNum(itemId)
    local msgId = pbl.enum("sscode.OpCode","queryPlayerExchangeAmount")
    CityEngineLua.Bundle:newAndSendMsgExt(msgId,nil,CityEngineLua._tradeNetworkInterface1)
end
--Number of players
function VolumeModel:m_PlayerNum(itemId)
    local msgId = pbl.enum("gscode.OpCode","getPlayerAmount")
    CityEngineLua.Bundle:newAndSendMsg(msgId,nil)
end
--Line chart of player purchases
function VolumeModel:m_PlayerNumCurve(info)
    local msgId = pbl.enum("sscode.OpCode","queryPlayerGoodsCurve")
    local lMsg = { id = info.id ,exchangeType = info.exchangeType,type = info.type}
    local pMsg = assert(pbl.encode("ss.PlayerGoodsCurve", lMsg))
    CityEngineLua.Bundle:newAndSendMsgExt(msgId,pMsg,CityEngineLua._tradeNetworkInterface1)
end
-------------------Server callback---------------------
---number of npc
function VolumeModel:n_OnGetNpcNum(lMsg)
    Event.Brocast("c_NpcNum",lMsg.countNpcMap,lMsg.workNpcNum,lMsg.unEmployeeNpcNum,lMsg.realWorkNpc,lMsg.realUnEmployeeNpcNum)
end
--camount of np goods
function VolumeModel:n_OnGoodsNpcNum(lMsg)
    Event.Brocast("c_OnGoodsNpcNum",lMsg.numInfo,lMsg.type)
end

function VolumeModel:n_OnNpcExchangeAmount(lMsg)
    Event.Brocast("c_NpcExchangeAmount",lMsg.npcExchangeAmount)
end

function VolumeModel:n_OnExchangeAmount(lMsg)
    Event.Brocast("c_ExchangeAmount",lMsg.exchangeAmount)
end
--Total player transaction volume
function VolumeModel:n_OnPlayerTypeNum(tradeinfo)
    Event.Brocast("c_allbuyAmount",tradeinfo.playExchangeAmount)
end
--Number of player goods purchased
--function VolumeModel:n_OnPlayerNumCurve(lMsg)
--    Event.Brocast("c_currebuyAmount",lMsg.exchangeAmount)
--end
--Number of players
function VolumeModel:n_OnPlayerCountCurve(lMsg)
    Event.Brocast("c_currebPlayerNum",lMsg.playerAmount)
end
----Line chart of player purchase quantity (c_ToggleBtnThreeItem is the third layer of data and c_ToggleBtnTwoItem is the second layer of data)
function VolumeModel:n_OngetPlayerAmount(lMsg)
    if  lMsg.exchangeType == 2 or lMsg.exchangeType == 4 then
        Event.Brocast("c_ToggleBtnThreeItem",lMsg.playerGoodsCurveMap)
    else
        Event.Brocast("c_ToggleBtnTwoItem",lMsg.playerGoodsCurveMap)
    end
end
