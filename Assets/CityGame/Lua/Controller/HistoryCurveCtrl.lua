---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by password.
--- DateTime: 2019/3/12 15:23
---历史曲线图ctrl
HistoryCurveCtrl = class('HistoryCurveCtrl',UIPanel)
UIPanel:ResgisterOpen(HistoryCurveCtrl)
--HistoryCurveCtrl.static.Head_PATH = "View/GoodsItem/RoleHeadItem"

local curveBehaviour;

function  HistoryCurveCtrl:bundleName()
    return "Assets/CityGame/Resources/View/HistoryCurvePanel.prefab"
end

function HistoryCurveCtrl:initialize()
    --UIPanel.initialize(self,UIType.Normal,UIMode.HideOther,UICollider.None)--可以回退，UI打开后，隐藏其它面板
    UIPanel.initialize(self,UIType.PopUp,UIMode.NeedBack,UICollider.None)--可以回退，UI打开后，不隐藏其它的UI
end
function HistoryCurveCtrl:Awake()
    curveBehaviour = self.gameObject:GetComponent('LuaBehaviour')
    curveBehaviour:AddClick(HistoryCurvePanel.xBtn,self.OnBack,self)
    self.insId = OpenModelInsID.HistoryCurveCtrl
    self:initData()
end

function HistoryCurveCtrl:Active()
    UIPanel.Active(self)
    Event.AddListener("c_GoodsNpcNumCurve",self.c_GoodsNpcNumCurve,self) --每种商品购买的npc数量曲线图（供应）
    Event.AddListener("c_GoodsNpcTypeNum",self.c_GoodsNpcTypeNum,self) --每种商品购买的npc数量曲线图(需求)
end

function HistoryCurveCtrl:Refresh()
    DataManager.OpenDetailModel(HistoryCurveModel,self.insId )
    DataManager.DetailModelRpcNoRet(self.insId , 'm_GoodsNpcNumCurve',self.m_data)
    DataManager.DetailModelRpcNoRet(self.insId , 'm_GoodsNpcTypeNum')
end

function HistoryCurveCtrl:Hide()
    UIPanel.Hide(self)
    Event.RemoveListener("c_GoodsNpcNumCurve",self.c_GoodsNpcNumCurve,self) --每种商品购买的npc数量曲线图(供应)
    Event.RemoveListener("c_GoodsNpcTypeNum",self.c_GoodsNpcTypeNum,self) --每种商品购买的npc数量曲线图（需求）
end

function HistoryCurveCtrl:OnCreate(obj)
    UIPanel.OnCreate(self,obj)
end

function HistoryCurveCtrl:initData()

    HistoryCurvePanel.curve.anchoredPosition = Vector3.New(-18524, 56,0)
    HistoryCurvePanel.curve.sizeDelta = Vector2.New(19530, 450)


end

function HistoryCurveCtrl:OnBack()
    HistoryCurvePanel.curve.anchoredPosition = Vector3.New(-18524, 56,0)
    HistoryCurvePanel.curve.sizeDelta = Vector2.New(19530, 450)
    UIPanel.ClosePage()
end

--每种商品购买的npc数量曲线图
function HistoryCurveCtrl:c_GoodsNpcNumCurve(info)
    if info == nil then
        info = {}
    end
    local currentTime = TimeSynchronized.GetTheCurrentTime()    --服务器当前时间(秒)
    local ts = getFormatUnixTime(currentTime)
    local second = tonumber(ts.second)
    local minute = tonumber(ts.minute)
    local hour = tonumber(ts.hour)
    if second ~= 0 then
        currentTime = currentTime -second
    end
    if minute ~= 0 then
        currentTime = currentTime - minute * 60
    end
    if hour ~= 0 then
        currentTime = currentTime - hour * 3600 - 3600       --当天0点在提前一小时
    end
    currentTime = math.floor(currentTime)
    local sevenDaysAgoTime = currentTime - 604800
    local sevenDaysAgo = sevenDaysAgoTime
    local supplyNum = {}
    local supplyNumVet = {}
    local time = {}
    local boundaryLine = {}
    local data = {}
    for i = 1, 168 do
        sevenDaysAgo = sevenDaysAgo + 3600
        time[i] = sevenDaysAgo
        supplyNum[i] = {}
        supplyNum[i].ts = sevenDaysAgo
        supplyNum[i].num = 0
        if tonumber(getFormatUnixTime(sevenDaysAgo).hour) == 0 then
            time[i] = getFormatUnixTime(sevenDaysAgo).month .. "/" .. getFormatUnixTime(sevenDaysAgo).day
            table.insert(boundaryLine,(sevenDaysAgo - sevenDaysAgoTime )/3600 * 116)
        else
            time[i] = tostring(getFormatUnixTime(sevenDaysAgo).hour)
        end
    end
    data.time = time
    data.boundaryLine = boundaryLine
    if next(info) ~= nil then
        local temp = {}
        for i, v in ipairs(supplyNum) do
            temp[i] = {}
            for k, z in ipairs(info) do
                if v.ts == z.key then
                    temp[i].num = z.value
                else
                    temp[i].num = 0
                end
            end
        end
        for i, v in ipairs(temp) do
            supplyNum[i].num = v.num
        end
        for i, v in ipairs(supplyNum) do
            supplyNumVet[i] = Vector2.New((v.ts-sevenDaysAgoTime) /3600 *116,v.num)
        end
    else
        for i, v in ipairs(supplyNum) do
            supplyNumVet[i] = Vector2.New((v.ts-sevenDaysAgoTime) /3600 *116,v.num)
        end
    end
    table.insert(supplyNumVet,1,Vector2.New(0,0))
    table.insert(time,1,"0")
    table.insert(boundaryLine,1,0)
    data.supplyNumVet = supplyNumVet

    HistoryCurvePanel.graph:DrawLine(data.supplyNumVet,Color.New(13 / 255, 179 / 255, 169 / 255, 255 / 255))
    HistoryCurvePanel.slide:SetCoordinate(data.supplyNumVet,Color.New(13 / 255, 79 / 255, 169 / 255, 255 / 255))
    HistoryCurvePanel.slide:SetXScaleValue(data.time,116)
    HistoryCurvePanel.graph:BoundaryLine(data.boundaryLine)
end

function HistoryCurveCtrl:c_GoodsNpcTypeNum(info)
    local currentTime = TimeSynchronized.GetTheCurrentTime()    --服务器当前时间(秒)
    local ts = getFormatUnixTime(currentTime)
    local second = tonumber(ts.second)
    local minute = tonumber(ts.minute)
    local hour = tonumber(ts.hour)
    if second ~= 0 then
        currentTime = currentTime -second
    end
    if minute ~= 0 then
        currentTime = currentTime - minute * 60
    end
    if hour ~= 0 then
        currentTime = currentTime - hour * 3600 - 3600       --当天0点在提前一小时
    end
    currentTime = math.floor(currentTime)
    local demandNumTab = {}
    local sevenDaysAgo = currentTime - 604800
    local sevenDaysAgoTime = sevenDaysAgo
    for i = 1, 168 do
        sevenDaysAgo = sevenDaysAgo + 3600
        demandNumTab[i] = {}
        demandNumTab[i] .ts = (sevenDaysAgo - sevenDaysAgoTime)/3600 * 116
        for k, v in ipairs(info) do
            if math.floor(v.t/1000) == sevenDaysAgo then
                demandNumTab[i].num = math.floor(npcConsumption[tonumber(getFormatUnixTime(sevenDaysAgo).year..getFormatUnixTime(sevenDaysAgo)
                        .month..getFormatUnixTime(sevenDaysAgo).day)][v.npcTypeNumMap.tp][self.m_data] / 10000 * v.npcTypeNumMap.n)
            end
        end
    end
    local demandNumVet = {}
    for i, v in ipairs(demandNumTab) do
        demandNumVet[i] = Vector2.New(v.ts,v.num)
    end
    table.insert(demandNumVet,1,Vector2.New(0,0))

    HistoryCurvePanel.graph:DrawLine(demandNumVet,Color.New(213 / 255, 35 / 255, 77 / 255, 255 / 255))
    HistoryCurvePanel.slide:SetCoordinate(demandNumVet,Color.New(213 / 255, 35 / 255, 77 / 255, 255 / 255))
end

