---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xuyafang.
--- DateTime: 2018/8/31 10:45
---
-----
GroundAuctionModel= {}
local this = GroundAuctionModel
local pbl = pbl

GroundAuctionModel.StartAucPath = "View/Building/AuctionPlanes"
GroundAuctionModel.WillAucPath = "View/Building/AuctionWillPlanes"

--构建函数--
function GroundAuctionModel.New()
    return this
end

function GroundAuctionModel.Awake()
    this:OnCreate()
    this._preLoadGroundAucObj()
    UpdateBeat:Add(this._update, this)
end

--启动事件--
function GroundAuctionModel.OnCreate()
    ----网络回调注册
    --CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","queryGroundAuction"), GroundAuctionModel.n_OnReceiveQueryGroundAuctionInfo)
    --CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","bidGround"), GroundAuctionModel.n_OnReceiveBindGround)
    --CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","queryMetaGroundAuction"), GroundAuctionModel.n_OnReceivequeryMetaGroundAuctionInfo)
    --CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","bidChangeInform"), GroundAuctionModel.n_OnReceiveBidChangeInfor)
    --CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","auctionEnd"), GroundAuctionModel.n_OnReceiveAuctionEnd)
    ----CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","metaGroundAuctionAddInform"), GroundAuctionModel.n_OnReceiveAddInform)
    --CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","bidWinInform"), GroundAuctionModel.n_OnReceiveWinBid)
    --CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","bidFailInform"), GroundAuctionModel.n_OnReceiveFailBid)
    --
    ----本地的回调注册
    --Event.AddListener("m_PlayerBidGround", this.m_BidGround)
    --Event.AddListener("m_RegistGroundBidInfor", this.m_RegistGroundBidInfor)
    --Event.AddListener("m_UnRegistGroundBidInfor", this.m_UnRegistGroundBidInfor)
    --Event.AddListener("m_RoleLoginReqGroundAuction", this.m_RoleLoginReqGroundAuction)
    --Event.AddListener("c_UIBubbleLateUpdate", GroundAuctionModel.c_bubbleLateUpdate)  --temp
end

function GroundAuctionModel.c_bubbleLateUpdate()
    UIBubbleMgr._cameraLateUpdate()
end

--关闭事件--
function GroundAuctionModel.Close()
    Event.RemoveListener("m_PlayerBidGround", this.m_BidGround)
    Event.RemoveListener("m_RegistGroundBidInfor", this.m_RegistGroundBidInfor)
    Event.RemoveListener("m_UnRegistGroundBidInfor", this.m_UnRegistGroundBidInfor)
    Event.RemoveListener("m_RoleLoginReqGroundAuction", this.m_RoleLoginReqGroundAuction)
    --Event.RemoveListener("m_GroundAucStateChange", this.m_GroundAucStateChange)
end
---一直检测拍卖的状态信息
function GroundAuctionModel._update()
    if this.orderAucDatas ~= nil and #this.orderAucDatas > 0 then
        this._nowTimeDown()
        this._soonTimeDown()
    end
end

--拍卖中，拍卖结束倒计时
function GroundAuctionModel._nowTimeDown()
    if this.nowAucGroundData  == nil then
        return
    end
    local finishTime = this.nowAucGroundData.aucInfo.beginTime + this.nowAucGroundData.aucInfo.durationSec
    this.tempNowCurrentTime = this.tempNowCurrentTime + UnityEngine.Time.unscaledDeltaTime
    local remainTime = finishTime - this.tempNowCurrentTime

    if remainTime < 0 then
        --拍卖结束
        --重新确认下一个即将拍卖的数据
        if finishTime < TimeSynchronized.GetTheCurrentTime() then
            Event.Brocast("c_BidEnd", this.nowAucGroundData.aucInfo.id)  --关闭界面

            --table.remove(this.orderAucDatas, 1)
            --if #this.orderAucDatas == 0 then
            --    return
            --end
            --this._checkNowAndSoonData()
            --Event.Brocast("c_RefreshItems", {this.nowAucGroundData, this.soonAucGroundData})
        end
    end
end

--即将拍卖，拍卖倒计时
function GroundAuctionModel._soonTimeDown()
    if this.soonAucGroundData == nil then
        return
    end
    local beginTime = this.soonAucGroundData.aucInfo.beginTime
    if beginTime <= TimeSynchronized.GetTheCurrentTime() then
        Event.Brocast("c_BidStart", this.soonAucGroundData.aucInfo)
        this._checkNowAndSoonData()  --得到即将拍卖的信息

        Event.Brocast("c_RefreshItems", {nowData = this.nowAucGroundData, soonData = this.soonAucGroundData})
        return
    end
    this.tempSoonCurrentTime = this.tempSoonCurrentTime + UnityEngine.Time.unscaledDeltaTime
    local remainTime = beginTime - this.tempSoonCurrentTime

    ---------------------------
    if remainTime < 0 then
        --重新确认下一个拍卖的数据
        if this.soonAucGroundData.aucInfo.beginTime < TimeSynchronized.GetTheCurrentTime() then
            Event.Brocast("c_BidStart", this.soonAucGroundData.aucInfo)
            this._checkNowAndSoonData()  --得到即将拍卖的信息

            Event.Brocast("c_RefreshItems", {nowData = this.nowAucGroundData, soonData = this.soonAucGroundData})
        end
    end
end
-----------------------------------------------------------------------------------

--角色登录成功之后请求拍卖的信息
function GroundAuctionModel.m_RoleLoginReqGroundAuction()
    this.m_ReqRueryMetaGroundAuction()
end

--预先加载两个预制
function GroundAuctionModel._preLoadGroundAucObj()
    this.groundAucNowObj = UnityEngine.Resources.Load(GroundAuctionModel.StartAucPath)  --已经拍卖
    this.groundAucSoonObj = UnityEngine.Resources.Load(GroundAuctionModel.WillAucPath)  --即将拍卖
end

--拍卖信息更新
function GroundAuctionModel._updateAucBidInfo(aucData)
    local data = {id = aucData.targetId, num = aucData.nowPrice, biderId = aucData.biderId}
    if this.groundAucDatas[data.id] then
        this.groundAucDatas[data.id].price = data.num
        this.groundAucDatas[data.id].biderId = data.biderId

        Event.Brocast("c_BidInfoUpdate", data)
    end
end
--收到meta数据之后的操作
function GroundAuctionModel.getMataGroundDataFunc(auctionInfo)
    UIBubbleMgr.startBubble()

    --填充数据
    if this.groundAucDatas == nil then
        this.groundAucDatas = {}
    end
    for i, item in ipairs(auctionInfo.auction) do
        item.beginTime = item.beginTime / 1000
        item.durationSec = item.durationSec / 1000
        this.groundAucDatas[item.id] = item
    end

    this._getOrderGroundDatas(this.groundAucDatas)  --获取时间顺序表
    this._checkNowAndSoonData()  --得到即将拍卖的信息
    UIBubbleMgr.createSoonAucBubble(this.soonAucGroundData)
    UIBubbleMgr.createNowAucBubble(this.nowAucGroundData)
    this._moveToAucPos()

    this.m_ReqQueryGroundAuction()  --请求拍卖中的气泡
end

--收到拍卖中的数据之后的操作
function GroundAuctionModel.getNowAucDataFunc(msgGroundAuc)
    --得到所有拍卖土地的出价信息
    for i, item in ipairs(msgGroundAuc.auction) do
        if this.groundAucDatas[item.id] then
            this.groundAucDatas[item.id].biderId = item.biderId
            this.groundAucDatas[item.id].price = item.price

            --GroundAuctionModel._checkNowData(this.groundAucDatas[item.id])
            --if UIBubbleMgr.nowItem == nil then
            --    UIBubbleMgr.createNowAucBubble(this.nowAucGroundData)
            --    return
            --end
            --UIBubbleMgr.updateAucData(this.nowAucGroundData)
            --return
        end
    end
end
--拍卖结束
function GroundAuctionModel.bindEndFunc(endId)
    Event.Brocast("c_BidEnd", endId)  --关闭界面
    this.valuableStartAucObj.transform.localScale = Vector3.zero

    if this.groundAucDatas[endId] ~= nil then
        this.groundAucDatas[endId] = nil
    end
    this._getOrderGroundDatas(this.groundAucDatas)  --获取时间顺序表
    if #this.orderAucDatas == 0 then
        return
    end
end

--获取当前soon And now AucGround，生成气泡
function GroundAuctionModel._getOrderGroundDatas(groundData)
    local auction = groundData
    this.orderAucDatas = {}
    for id, value in pairs(auction) do
        this.orderAucDatas[#this.orderAucDatas + 1] = value
    end
    table.sort(this.orderAucDatas, function (m, n) return m.beginTime < n.beginTime end)  --按照时间顺序排序

    --测试
    --for i, v in ipairs(this.orderAucDatas[1].area) do
    --    local go = GameObject.New()
    --    go.name = "obj"..i
    --    go.transform.position = Vector3.New(v.x, 0, v.y)
    --end
end
--移动到即将拍卖的位置
function GroundAuctionModel._moveToAucPos()
    if GroundAuctionModel.valuableWillAucObj ~= nil then
        CameraMove.MoveCameraToPos(GroundAuctionModel.valuableWillAucObj.transform.position)
    end
end

--获取有效的开始拍卖的土地预制
function GroundAuctionModel._getValuableStartAucObj()
    if GroundAuctionModel.valuableStartAucObj == nil then
        GroundAuctionModel.valuableStartAucObj = UnityEngine.GameObject.Instantiate(this.groundAucNowObj)
    end
    GroundAuctionModel.valuableStartAucObj.transform.localScale = Vector3.one
    GroundAuctionModel.valuableStartAucObj.gameObject.name = "拍卖中"
    return GroundAuctionModel.valuableStartAucObj
end
--获取有效的即将拍卖的土地预制
function GroundAuctionModel._getValuableWillAucObj()
    if GroundAuctionModel.valuableWillAucObj == nil then
        GroundAuctionModel.valuableWillAucObj = UnityEngine.GameObject.Instantiate(this.groundAucSoonObj)
    end
    GroundAuctionModel.valuableWillAucObj.transform.localScale = Vector3.one
    GroundAuctionModel.valuableWillAucObj.gameObject.name = "即将拍卖"
    return GroundAuctionModel.valuableWillAucObj
end

--确认数据
function GroundAuctionModel._checkNowAndSoonData()
    local showFirstWait = true
    this.soonAucGroundData = nil
    this.nowAucGroundData = nil
    this.tempNowCurrentTime = TimeSynchronized.GetTheCurrentTime()
    this.tempSoonCurrentTime = TimeSynchronized.GetTheCurrentTime()

    for i, groundAucItem in ipairs(this.orderAucDatas) do
        --如果已经开始拍卖
        if groundAucItem.beginTime <= TimeSynchronized.GetTheCurrentTime() then
            this.nowAucGroundData = {}
            this.nowAucGroundData.isStartAuc = true
            local groundObj = GroundAuctionModel._getValuableStartAucObj()
            groundObj.transform.position = Vector3.New(groundAucItem.area[1].x, 0, groundAucItem.area[1].y)  --第二个地块为左上角的位置
            groundObj.transform.localScale = Vector3.one
            this.nowAucGroundData.targetPos = groundObj.transform.position
            this.nowAucGroundData.aucInfo = groundAucItem
        else
            if showFirstWait then
                if groundAucItem.beginTime <= TimeSynchronized.GetTheCurrentTime() then
                    return
                end
                this.soonAucGroundData = {}
                this.soonAucGroundData.isStartAuc = false
                local groundObj = GroundAuctionModel._getValuableWillAucObj()
                groundObj.transform.position = Vector3.New(groundAucItem.area[1].x, 0, groundAucItem.area[1].y)
                this.soonAucGroundData.targetPos = groundObj.transform.position
                groundObj.transform.localScale = Vector3.one
                this.soonAucGroundData.aucInfo = groundAucItem
                showFirstWait = false
                return
            end
        end
    end
end

--判断是否点击到拍卖的地块
function GroundAuctionModel.getIsClickAucGround(blockId)
    if this.nowAucGroundData ~= nil then
        for i, pos in pairs(this.nowAucGroundData.aucInfo.area) do
            local tempBlockId = TerrainManager.GridIndexTurnBlockID(pos)
            if tempBlockId == blockId then
                return true, 1
            end
        end
    end
    if this.soonAucGroundData ~= nil then
        for i, pos in pairs(this.soonAucGroundData.aucInfo.area) do
            local tempBlockId = TerrainManager.GridIndexTurnBlockID(pos)
            if tempBlockId == blockId then
                return true, 0
            end
        end
    end
    return false
end

--- 客户端请求 ---
--请求即将拍卖的土地信息
function GroundAuctionModel.m_ReqQueryGroundAuction()
    local msgId = pbl.enum("gscode.OpCode","queryGroundAuction")
    CityEngineLua.Bundle:newAndSendMsg(msgId,nil)
end

--请求已经拍卖的土地信息
function GroundAuctionModel.m_ReqRueryMetaGroundAuction()
    local msgId = pbl.enum("gscode.OpCode","queryMetaGroundAuction")
    CityEngineLua.Bundle:newAndSendMsg(msgId,nil)
end

--出价
function GroundAuctionModel.m_BidGround(id, price)
    local msgId = pbl.enum("gscode.OpCode","bidGround")
    local lMsg = { id = id, num = price}
    local pMsg = assert(pbl.encode("gs.ByteNum", lMsg))
    CityEngineLua.Bundle:newAndSendMsg(msgId,pMsg)
end

--打开UI 开始更新拍卖信息 --请判断打开界面的是否处于拍卖中
function GroundAuctionModel.m_RegistGroundBidInfor()
    local msgId = pbl.enum("gscode.OpCode","registGroundBidInform")
    CityEngineLua.Bundle:newAndSendMsg(msgId,nil)
end

--关闭UI
function GroundAuctionModel.m_UnRegistGroundBidInfor()
    local msgId = pbl.enum("gscode.OpCode","unregistGroundBidInform")
    CityEngineLua.Bundle:newAndSendMsg(msgId,nil)
end

--- 回调 ---
--收到拍卖中的土地信息
function GroundAuctionModel.n_OnReceiveQueryGroundAuctionInfo(stream)
    if stream == nil or stream == "" then
        return
    end
    local msgGroundAuc = assert(pbl.decode("gs.GroundAuction", stream), "GroundAuctionModel.n_OnReceiveQueryGroundAuctionInfo: stream == nil")
    if msgGroundAuc == nil or #msgGroundAuc.auction == 0 then
        return
    end

    this.getNowAucDataFunc(msgGroundAuc)
end

--当收到所有拍卖的土地信息
function GroundAuctionModel.n_OnReceivequeryMetaGroundAuctionInfo(stream)
    if stream == nil or stream == "" then
        return
    end
    local auctionInfo = assert(pbl.decode("gs.MetaGroundAuction", stream), "GroundAuctionModel.n_OnReceivequeryMetaGroundAuctionInfo: stream == nil")
    if auctionInfo == nil or #auctionInfo.auction == 0 then
        return
    end

    this.getMataGroundDataFunc(auctionInfo)
end

--拍卖出价回调 --出价成功之后会不会有提示信息？
function GroundAuctionModel.n_OnReceiveBindGround(stream)
    if stream == nil or stream == "" then
        return
    end

    local auctionInfo = assert(pbl.decode("gs.ByteNum", stream), "GroundAuctionModel.n_OnReceiveBindGround: stream == nil")
    if auctionInfo then
        this._updateAucBidInfo(auctionInfo)

        local info = {}
        info.titleInfo = "CONGRATULATION"
        info.contentInfo = "Successful participation in auction"
        info.tipInfo = "(if there is a higher bid price we will notify you by meil.)"
        info.btnCallBack = function ()
            ct.log("cycle_w6_houseAndGround","[cycle_w6_houseAndGround] 回调啊回调")
        end
        --UIPage:ShowPage(BtnDialogPageCtrl, info)
        ct.OpenCtrl("BtnDialogPageCtrl", info)
    end
end

--收到服务器拍卖信息更新
function GroundAuctionModel.n_OnReceiveBidChangeInfor(stream)
    if stream == nil or stream == "" then
        return
    end

    local bidInfo = assert(pbl.decode("gs.BidChange", stream), "GroundAuctionModel.n_OnReceiveBidChangeInfor: stream == nil")
    if bidInfo then
        this._updateAucBidInfo(bidInfo)
    end
end

--拍卖结束
function GroundAuctionModel.n_OnReceiveAuctionEnd(stream)
    if stream == nil or stream == "" then
        return
    end

    local endId = assert(pbl.decode("gs.Id", stream), "GroundAuctionModel.n_OnReceiveAuctionEnd: stream == nil")
    GroundAuctionModel.bindEndFunc(endId.id)
end

--拍卖成功
function GroundAuctionModel.n_OnReceiveWinBid(stream)
    if stream == nil or stream == "" then
        return
    end

    if stream then
        --local bidInfo = assert(pbl.decode("gs.ByteNUm", stream), "GroundAuctionModel.n_OnReceiveBidChangeInfor: stream == nil")
    end
end
--拍卖失败
function GroundAuctionModel.n_OnReceiveFailBid(stream)
    if stream == nil or stream == "" then
        return
    end

    local bidInfo = assert(pbl.decode("gs.ByteNum", stream), "GroundAuctionModel.n_OnReceiveBidChangeInfor: stream == nil")
    if bidInfo then
        this._updateAucBidInfo(bidInfo)
    end
end

--接到新的meta拍卖信息
function GroundAuctionModel.n_OnReceiveAddInform(stream)
    --if stream == nil or stream == "" then
    --    return
    --end
    --
    --local addInfo = assert(pbl.decode("gs.MetaGroundAuction", stream), "GroundAuctionModel.n_OnReceiveAddInform: stream == nil")
    --if #addInfo.auction == 0 then
    --    return
    --end
    --
    ----根据新的整个拍卖meta信息实例化气泡 --需要先清空之前存在的气泡
    ----参照GroundAuctionModel.n_OnReceivequeryMetaGroundAuctionInfo
    --for i, v in ipairs(addInfo.auction) do
    --    v.bubbleType = BubblleType.GroundAuction
    --    v.func = function(info)
    --        if info.bubbleType ~= BubblleType.GroundAuction then
    --            return
    --        end
    --        --GroundAuctionCtrl.OpenPanel(info)  --打开拍卖界面
    --        UIPage:ShowPage(GroundAuctionCtrl, info)
    --    end
    --    GameBubbleManager.CreatBubble(v)
    --end
    --
    ----实例化完之后，向服务器请求正在拍卖的土地
    --this.m_ReqRueryMetaGroundAuction()
end
