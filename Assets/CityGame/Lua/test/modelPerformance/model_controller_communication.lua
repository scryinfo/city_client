---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by cyz_scry.
--- DateTime: 2018/12/1 10:21
---
UnitTest.TestBlockStart()---------------------------------------------------------
--Define a model base class
local ModelBase = class('ModelBase')
local ControllerBase = class('ControllerBase')

local tempCtrlList = {}
local test_count = 10000

function ModelBase:initialize(name, newInsId)
    self.instanceName = name
    self.insId = newInsId
end

function ControllerBase:initialize(name, newInsId)
    self.instanceName = name
    self.insId = newInsId
end

--model class{
Model_1 = class('Model_1',ModelBase)
function Model_1:testfun(arg_int1, arg_int2)
    --ct.log("wk16_abel_controller_model", "[Model_1:testfun] invoked!")
    return #self.instanceName+arg_int1+arg_int2
end

function Model_1:testfunNoRet(arg_int1, arg_int2)
    --ct.log("wk16_abel_controller_model", "[Model_1:testfun] invoked!")
    local value = #self.instanceName+arg_int1+arg_int2
end

Model_2 = class('Model_2',ModelBase)
function Model_2:testfun(arg_str)
    --ct.log("wk16_abel_controller_model", "[Model_2:testfun] invoked!")
    return self.instanceName..arg_str
end

function Model_2:testfunNoRet(arg_str)
    --ct.log("wk16_abel_controller_model", "[Model_2:testfun] invoked!")
    local len = #self.instanceName+#arg_str
end
--model class}

--model manager class{
ModelManager = class('ModelManager')
local modelList = {}
local tempMd = nil
local tempArgs = {}
function ModelManager:initialize()
    modelList = {}
end
function ModelManager:addModel(model)
    modelList[#modelList+1] = model
    return model
end

function ModelManager:OpenCtrl(model, CtrlClass)
    return CtrlClass:new(CtrlClass.name..'_ins_'..model.insId, model.insId)
end

function ModelManager:getModel(pos)
    return modelList[pos]
end
--For performance reasons, separate rpc with and without return value
--modelRpc has a return value
function ModelManager.modelRpc(insId, modelMethord, ...)
    local arg = {...}
    local md = modelList[insId]
    arg[#arg](md[modelMethord](md,...))
end
--modelRpcNoRet has no return value
function ModelManager.modelRpcNoRet(insId, modelMethord, ...)
    local md = modelList[insId]
    md[modelMethord](md,...)
end

--The last parameter must be a function or nil
function ModelManager.modelRpc1(insId, modelMethord, ...)
    local arg = {...}
    --Optimized version
    arg[#arg](modelList[insId][modelMethord](modelList[insId],...))

    --Strict version
    --local md = modelList[insId]
    --if md ~= nil then
    --    assert(md, 'model not exist which instance id = ',insId)
    --    assert(md[modelMethord], 'Methord: '..modelMethord..' not exist,model instance id = '..insId)
    --    --if not md then
    --    --    ct.log( 'system','model not exist which instance id = ',insId)
    --    --    return
    --    --end
    --    --if not md[modelMethord] then
    --    --    ct.log( 'system','Methord: '..modelMethord..' not exist,model instance id = '..insId)
    --    --    return
    --    --end
    --
    --    local ret = md[modelMethord](md,...)
    --    if arg[#arg] ~= nil then
    --        arg[#arg](ret)
    --    end
    --end
end

function ModelManager.modelRpc2(insId, modelMethord, ...)
    tempArgs = {...}
    --Optimized version
     tempMd = modelList[insId]
     tempArgs[#tempArgs](tempMd[modelMethord](tempMd,...))
     tempMd = nil
     tempArgs = {}
end

--Global method
--function ct.model_rpc(insId, modelMethord, callback, ...)
function ct.model_rpc(insId, modelMethord, ...)
    ModelManager.modelRpc(insId, modelMethord, ...)
end

UnitTest.Exec("abel_0430_rpcRet", "abel_0430_rpcRet",  function ()
    local tableA = {
        name = "tableA"
    }
    tableA.fun1 = function(self,st)
        return st..tableA.name
    end
    local tableB = {}
    tableB.fun2 = function(ins)
        ct.instance_rpc(ins, 'fun1', "haha",function (nameret)
            ct.log('abel_0430_rpcRet', 'tableA 返回它的名字：  '..nameret)
        end)
    end
    tableB.fun2(tableA)
end)

function ct.model_rpcNoRet(insId, modelMethord, ...)
    ModelManager.modelRpcNoRet(insId, modelMethord, ...)
end

function ct.model_rpc1(insId, modelMethord, ...)
    ModelManager.modelRpc1(insId, modelMethord, ...)
end

function ct.model_rpc2(insId, modelMethord, ...)
    ModelManager.modelRpc2(insId, modelMethord, ...)
end
--model manager class}

--controller class{
Ctrl_1 = class('Crtl_1',ControllerBase)
function Ctrl_1:initialize(name, newInsId)
    ControllerBase.initialize(self, name,newInsId)
end
function Ctrl_1:reqDatafun(arg_int1, arg_int2)
    local pRetvalue = nil
    ct.model_rpc(self.insId, 'testfun', arg_int1, arg_int2,function (retvalue)
        --ct.log('wk16_abel_controller_model', '[Crtl_1:reqDatafun] return: '..retvalue)
        pRetvalue = retvalue
    end)
end

Ctrl_2 = class('Crtl_2',ControllerBase)
function Ctrl_2:initialize(name, newInsId)
    ControllerBase.initialize(self, name,newInsId)
end
function Ctrl_2:reqDatafun(arg_str)
    local pRetvalue = nil
    ct.model_rpc(self.insId, 'testfun', arg_str,function (retvalue)
        pRetvalue = retvalue
        --ct.log('wk16_abel_controller_model', '[Crtl_2:reqDatafun] return: '..retvalue)
    end)
end
--controller class)

local ModelManager = ModelManager
ModelManager.initialize()

--data preparation{
UnitTest.Exec("wk16_abel_ctrl_model_initTestData", "test_wk16_abel_ctrl_model_initTestData", function ()
    ct.log("wk16_abel_ctrl_model_initTestData",'\n[test_wk16_abel_ctrl_model_initTestData] data preparation, create'..test_count..' models and corresponding Ctrl')
    for i = 1, test_count do
        --Use the same instance id to instantiate the corresponding Model and Ctrl, where i is the instance id: insId
        --Model type should match the Crtl type, just like the Model and Ctrl types of the processing plant, Ctrl should call the Rpc method of the corresponding Model,
        --The premise is that Ctrl knows the instance id of the corresponding Model, here is a simple process, let the newly created Model and Ctrl instance id are equal to i, then we
        -- In the following test, you can find the corresponding Model instance by the instance id in Ctrl
        local newModel = ModelManager.addModel(nil,Model_1:new('Model_1'..i,i))
        tempCtrlList[newModel.insId] = ModelManager:OpenCtrl(newModel,Ctrl_1) --OpenCtrl is actually passing the insId of newModel to the newly created Ctrl_1
    end
    for i = test_count+1, test_count *2 do
        local newModel =ModelManager.addModel(nil,Model_2:new('Model_2'..i,i))
        tempCtrlList[newModel.insId] = ModelManager:OpenCtrl(newModel,Ctrl_2) --OpenCtrl actually passes the insId of newModel to the newly created Ctrl_1
    end
end)
--data preparation}

--Basic functional test -------------------------------------------{
UnitTest.Exec("wk16_abel_model_rpc_errfun", "test_wk16_abel_model_rpc_errfun", function ()
    local pCrtl_2 = Ctrl_2:new('Crtl_1_ins',ct.getIntPart(test_count*1.5))
    --test{
    -- If there is no method, there will be Error log output
    ct.model_rpc(pCrtl_2.insId,'testfun1','hello',function (retvalue)
        ct.log('wk16_abel_model_rpc_errfun', '[Crtl_2:reqDatafun] return: '..retvalue)
    end)
    --test}
end)

UnitTest.Exec("wk16_abel_model_rpc_noCb", "test_wk16_abel_model_rpc_noCb",  function ()
    local pCrtl_2 = Ctrl_2:new('Crtl_1_ins',ct.getIntPart(test_count*1.5))
    --test{
     --If the return value is required, if no callback is passed, there will be Error log output
     ct.model_rpc(pCrtl_2.insId,'testfun1','hello')
     --test}
end)

UnitTest.Exec("wk16_abel_model_rpcNoRet", "wk16_abel_model_rpcNoRet", function ()
     local pCrtl_2 = Ctrl_2:new('Crtl_1_ins',ct.getIntPart(test_count*1.5))
     --test{
     -- If no return value is required, call model_rpcNoRet
     ct.model_rpcNoRet(pCrtl_2.insId,'testfun1','hello')
     --test}
end)
--Basic functional test -------------------------------------------}


--Performance Testing-------------------------------------------{
--Rpc test with return value
UnitTest.Exec("wk16_abel_ctrl_model", "test_wk16_abel_ctrl_model_Performance",  function ()
    collectgarbage("collect")
    ct.log('wk16_abel_ctrl_model', "model_rpc 性能测试"..test_count.."Calls, the test begins -------------------------------------------")
    UnitTest.PerformanceTest("wk16_abel_ctrl_model","model_rpc performance test 1: directly call the model method", function()
        local retvalue = nil
        for i = 1, test_count do
            retvalue = ModelManager.getModel(nil,i):testfun(1,2)
        end
        for i = test_count+1, test_count*2 do
            retvalue = ModelManager.getModel(nil,i):testfun('hello_'..i)
        end
    end)
    collectgarbage("collect")
    UnitTest.PerformanceTest("wk16_abel_ctrl_model","model_rpc 性能测试2：model_rpc 调用", function()
        local pRetvalue = nil
        for i = 1, test_count do
            ct.model_rpc(tempCtrlList[i].insId, 'testfun', 1,2,function (retvalue)
                pRetvalue = retvalue
            end)
        end
        for i = test_count+1, test_count*2 do
            ct.model_rpc(tempCtrlList[i].insId, 'testfun', 'hello',function (retvalue)
                pRetvalue = retvalue
            end)
        end
    end)
    collectgarbage("collect")
    --modelRpc1
    UnitTest.PerformanceTest("wk16_abel_ctrl_model","model_rpc 性能测试3：model_rpc1 调用", function()
        local pRetvalue = nil
        for i = 1, test_count do
            ct.model_rpc1(tempCtrlList[i].insId, 'testfun', 1,2,function (retvalue)
                pRetvalue = retvalue
            end)
        end
        for i = test_count+1, test_count*2 do
            ct.model_rpc1(tempCtrlList[i].insId, 'testfun', 'hello',function (retvalue)
                pRetvalue = retvalue
            end)
        end
    end)
    collectgarbage("collect")
    UnitTest.PerformanceTest("wk16_abel_ctrl_model","model_rpc 性能测试4：model_rpc2 调用", function()
        local pRetvalue = nil
        for i = 1, test_count do
            ct.model_rpc2(tempCtrlList[i].insId, 'testfun', 1,2,function (retvalue)
                pRetvalue = retvalue
            end)
        end
        for i = test_count+1, test_count*2 do
            ct.model_rpc2(tempCtrlList[i].insId, 'testfun', 'hello',function (retvalue)
                pRetvalue = retvalue
            end)
        end
    end)
    ct.log('wk16_abel_ctrl_model', "model_rpc Performance test "..test_count.." times, the test is over------------------------------------ ------")
    --[[
    1 million calls
        model_rpc performance test 1: directly call the model method execution time: 4.1279999999999
        model_rpc performance test 2: model_rpc call Execution time: 4.454
        model_rpc performance test 3: call model_rpc1 execution time: 4.62
        model_rpc performance test 3: call model_rpc2 execution time: 5.1899999999999
    500,000 calls
        model_rpc performance test 1: directly call the model method execution time: 1.9750000000001
        model_rpc performance test 2: model_rpc call execution time: 2.2450000000001
        model_rpc performance test 3: model_rpc1 call execution time: 2.2750000000001
        model_rpc performance test 3: call model_rpc2 execution time: 2.519
    100,000 calls
        model_rpc performance test 1: directly call the model method execution time: 0.43599999999992
        model_rpc performance test 2: model_rpc call execution time: 0.42499999999995
        model_rpc performance test 3: model_rpc1 call execution time: 0.43000000000006
        model_rpc performance test 3: call model_rpc2 execution time: 0.49099999999999
    10,000 calls
        model_rpc performance test 1: directly call the model method execution time: 0.044000000000096
        model_rpc performance test 2: model_rpc call execution time: 0.045999999999822
        model_rpc performance test 3: call model_rpc1 execution time: 0.048000000000002
        model_rpc performance test 3: call model_rpc2 execution time: 0.070999999999913
    Performance is close
    --]]
end)

--Rpc test with no return value
UnitTest.Exec("wk16_abel_ctrl_model_noRetPerformance", "test_wk16_abel_ctrl_model_noRetPerformance",  function ()
    collectgarbage("collect")
    ct.log('wk16_abel_ctrl_model_noRetPerformance', "model_rpc 性能测试"..test_count.."Calls, the test begins -------------------------------------------")
    UnitTest.PerformanceTest("wk16_abel_ctrl_model_noRetPerformance","model_rpc performance test 1: directly call the model method", function()
        local retvalue = nil
        for i = 1, test_count do
            retvalue = ModelManager.getModel(nil,i): testfunNoRet(1,2)
        end
        for i = test_count+1, test_count*2 do
            retvalue = ModelManager.getModel(nil,i): testfunNoRet('hello_'..i)
        end
    end)
    collectgarbage("collect")
    UnitTest.PerformanceTest("wk16_abel_ctrl_model_noRetPerformance","model_rpc performance test 2: model_rpcNoRet call", function()
        local pRetvalue = nil
        for i = 1, test_count do
            ct.model_rpcNoRet(tempCtrlList[i].insId, 'testfun', 1,2,function (retvalue)
                pRetvalue = retvalue
            end)
        end
        for i = test_count+1, test_count*2 do
            ct.model_rpcNoRet(tempCtrlList[i].insId, 'testfun', 'hello',function (retvalue)
                pRetvalue = retvalue
            end)
        end
    end)
    collectgarbage("collect")
    --[[
    1 million calls
         model_rpc performance test 1: directly call the model method execution time: 3.5659999999998
         model_rpc performance test 2: model_rpcNoRet call execution time: 3.1400000000003
     500,000 calls
       model_rpc performance test 1: directly call the model method execution time: 1.7050000000004
       model_rpc performance test 2: model_rpcNoRet call execution time: 1.5460000000003
     100,000 calls
       model_rpc performance test 1: directly call the model method execution time: 0.32999999999993
       model_rpc performance test 2: model_rpcNoRet call execution time: 0.29899999999998
     10,000 calls
       model_rpc performance test 1: directly call the model method execution time: 0.030999999999949
       model_rpc performance test 2: model_rpcNoRet call execution time: 0.0300000000002
   Performance is close
   --]]
end)
--Performance Testing-------------------------------------------}

UnitTest.TestBlockEnd()-----------------------------------------------------------