---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by cyz_scry.
--- DateTime: 2018/8/21 11:12
---

UnitTest.TestBlockStart()---------------------------------------------------------


local log = log


HasWings = { -- HasWings is a module, not a class. It can be "included" into classes
    fly = function(self)
        ct.log('flap flap flap I am a ' .. self.class.name)
    end,
    foo = function(self)
        return 1
    end
}

Animal = class('Animal')
function Animal:fun()
    return 1
end
Insect = class('Insect', Animal) -- or Animal:subclass('Insect')

function Insect:funInsect()
    return 1
end
Worm = class('Worm', Insect) -- worms don't have wings

Bee = class('Bee', Insect)
function Bee:bar()
    return 1
end
Bee:include(HasWings) --Bees have wings. This adds fly() to Bee


Mammal = class('Mammal', Animal)

Fox = class('Fox', Mammal) -- foxes don't have wings, but are mammals

Bat = class('Bat', Mammal)
Bat:include(HasWings) --Bats have wings, too.

UnitTest.Exec("abel_w3", "test_OO_Mixins",function()
    local bee = Bee() -- or Bee:new()
    local bat = Bat() -- or Bat:new()
    bee:fly()
    bat:fly()
end)

--[[
Output:
flap flap flap I am a Bee
flap flap flap I am a Bat
]]--

SpeakFunClass = class('SpeakFunClass')
function SpeakFunClass.speak()
    return 1
end

--Calling your own methods of derived classes is better than calling methods inherited from base classes and mixed methods
--10 million calls with 30% faster execution time
--5 billion calls with very close execution time
UnitTest.Exec("abel_w6_UIFrame_performance", "test_mixin_inherited_method",  function ()
    local bee = Bee() -- or Bee:new()
    --local count = 5000000000
    local count = 5000000
    UnitTest.PerformanceTest("abel_w6_UIFrame_performance",'inherited base class method invocation', function()
        for i = 1, count do --10000000
            bee:fun()
        end
    end)
    UnitTest.PerformanceTest("abel_w6_UIFrame_performance",'inherited parent class method invocation', function()
        for i = 1, count do --10000000
            bee:funInsect()
        end
    end)
    UnitTest.PerformanceTest("abel_w6_UIFrame_performance",'Bee class method invocation', function()
        for i = 1, count do --10000000
            Bee:funInsect()
        end
    end)
    UnitTest.PerformanceTest("abel_w6_UIFrame_performance",'instance method invocation', function()
        for i = 1, count do --10000000
            bee:bar()
        end
    end)
    UnitTest.PerformanceTest("abel_w6_UIFrame_performance",'mixin method invocation', function()
        for i = 1, count do --10000000
            bee:foo()
        end
    end)

    Bee:include(SpeakFunClass) --Include class will cause the original method to be erased
    local bee1 = Bee() -- or Bee:new()
    UnitTest.PerformanceTest("abel_w6_UIFrame_performance",'include method invocation', function()
        for i = 1, count do --10000000
            bee1:speak()
        end
    end)

    ct.log("abel_w6_UIFrame_performance","[test_mixin_inherited_method]  bee2:fun")
    local bee2 = Bee() -- or Bee:new()
    local bat = Bat() -- or Bat:new()
    bee2:speak()
    --bee2.fun() --This will fail, the original method is overwritten after include class
    --bee2:fun() --This will fail, the original method is overwritten after include class
    local xxx = 0

end)




UnitTest.TestBlockEnd()-----------------------------------------------------------
