---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/10/23/023 11:28
---
local pbl = pbl

require "Common/define"
require "City"

MunicipalModel = {};
local this = MunicipalModel;

--构建函数
function MunicipalModel.New()
    return this;
end

function MunicipalModel.Awake()
    this:OnCreate();
    this.SlotList={}
end


function MunicipalModel:OnCreate()

    --注册本地事件
    Event.AddListener("m_detailPublicFacility", this.m_detailPublicFacility,self);--广告细节
    Event.AddListener("m_addSlot", this.m_addSlot,self);--添加槽位
    Event.AddListener("m_deleteSlot",this.m_deleteSlot,self)--删除槽位
    Event.AddListener("m_adPutAdToSlot",this.m_adPutAdToSlot,self)--打广告
    ----注册 AccountServer 消息
    MunicipalModel.registerAsNetMsg()
end

function MunicipalModel.registerAsNetMsg()
    --as网络回调注册
    CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","detailPublicFacility"),MunicipalModel.n_getdetailPublicFacility);--广告细节
    CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","adAddSlot"),MunicipalModel.n_getaddSlot);--添加槽位
    CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","adDelSlot"),MunicipalModel.n_deleteSlot);--删除槽位
    CityEngineLua.Message:registerNetMsg(pbl.enum("gscode.OpCode","adPutAdToSlot"),MunicipalModel.n_adPutAdToSlot);--打广告
end

--关闭事件--
function MunicipalModel.Close()
    --清空本地UI事件
    Event.RemoveListener("m_detailPublicFacility", this.m_detailPublicFacility);

end
---广告细节发包
function MunicipalModel:m_detailPublicFacility(buildingID)

    ----1、 获取协议id
    local msgId = pbl.enum("gscode.OpCode","detailPublicFacility")
    ----2、 填充 protobuf 内部协议数据
    local lMsg = { id=buildingID}
    ----3、 序列化成二进制数据
    local  pMsg = assert(pbl.encode("gs.Id", lMsg))
    ----4、 创建包，填入数据并发包
    CityEngineLua.Bundle:newAndSendMsg(msgId,pMsg);

end
---广告细节收包
function MunicipalModel.n_getdetailPublicFacility(stream)
    local lMsg = assert(pbl.decode("gs.PublicFacility", stream),"LoginModel.n_GsLoginSuccessfully stream == nil")
    if  lMsg.availableSlot then
        for i, v in ipairs(lMsg.availableSlot) do
            this.SlotList[i]=v
        end
    end
       ct.log("system","广告细节")
end

---添加槽位发包
function MunicipalModel:m_addSlot(buildingID,minDayToRent,maxDayToRent,rentPreDay,deposit)
    ----1、 获取协议id
    local msgId = pbl.enum("gscode.OpCode","adAddSlot")
    ----2、 填充 protobuf 内部协议数据
    local lMsg = { buildingId=buildingID,minDayToRent=minDayToRent,maxDayToRent=maxDayToRent,rentPreDay=rentPreDay}--/*,deposit=deposit/*}
    ----3、 序列化成二进制数据
    local  pMsg = assert(pbl.encode("gs.AddSlot", lMsg))
    ----4、 创建包，填入数据并发包
    CityEngineLua.Bundle:newAndSendMsg(msgId,pMsg);
end
---添加槽位收包
function MunicipalModel.n_getaddSlot(stream)
    local lMsg = assert(pbl.decode("gs.PublicFacility.Slot", stream),"LoginModel.n_GsLoginSuccessfully stream == nil")

end

---删除槽位发包
function MunicipalModel:m_deleteSlot(buildingId,slotId)
    ----1、 获取协议id
    local msgId = pbl.enum("gscode.OpCode","adDelSlot")
    ----2、 填充 protobuf 内部协议数据
    local lMsg = { buildingId=buildingId,slotId=slotId}
    ----3、 序列化成二进制数据
    local  pMsg = assert(pbl.encode("gs.AdDelSlot", lMsg))
    ----4、 创建包，填入数据并发包
    CityEngineLua.Bundle:newAndSendMsg(msgId,pMsg);

end

---删除槽位收包
function MunicipalModel.n_deleteSlot(stream)
    table.remove(this.SlotList,1)
    --local lMsg = assert(pbl.decode("gs.success", stream),"LoginModel.n_GsLoginSuccessfully stream == nil")

end

---打广告发包
function MunicipalModel:m_adPutAdToSlot(Slotid,metaId,type,buildingId)
    --local tp = pbl.enum("gs.PublicFacility.Ad.Type", "BUILDING")

    ----1、 获取协议id
    local msgId = pbl.enum("gscode.OpCode","adPutAdToSlot")
    ----2、 填充 protobuf 内部协议数据
    local lMsg = { id=Slotid,metaId=metaId,type=type,buildingId=buildingId}
    ----3、 序列化成二进制数据
    local  pMsg = assert(pbl.encode("gs.AddAd", lMsg))
    ----4、 创建包，填入数据并发包
    CityEngineLua.Bundle:newAndSendMsg(msgId,pMsg);
end
---打广告收包
function MunicipalModel:n_adPutAdToSlot(stream)
    local lMsg = assert(pbl.decode("gs.PublicFacility.Ad", stream),"LoginModel.n_GsLoginSuccessfully stream == nil")


end



