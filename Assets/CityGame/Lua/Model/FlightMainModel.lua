---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xuyafang.
--- DateTime: 2018/8/31 10:45
---
-----
FlightMainModel= {}
local this = FlightMainModel

function FlightMainModel.New()
    return this
end

function FlightMainModel.Awake()
    this:OnCreate()
end
--启动事件--
function FlightMainModel.OnCreate()
    --本地的回调注册
    --Event.AddListener("m_OpenFlightLoading", this.OpenFlightLoading)
end
--网络回调注册
function FlightMainModel.registerNetMsg()
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","getAllFlight","gs.Flights",FlightMainModel.n_OnGetAllFlight)
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","betFlight","gs.BetFlight",FlightMainModel.n_OnBetFlight)
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","getFlightBetHistory","gs.FlightBetHistory",FlightMainModel.n_OnGetBetHistory)
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","flightBetInform","gs.FlightBetInform",FlightMainModel.n_OnGetBetResult)
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","scoreChangeInform","gs.Num",FlightMainModel.n_OnFlightScoreChange)
    DataManager.ModelRegisterNetMsg(nil,"gscode.OpCode","searchFlight","gs.FlightSearchResult",FlightMainModel.n_OnGetSearchFlight)

end
--关闭事件--
function FlightMainModel.Close()
    --Event.RemoveListener("m_OpenFlightLoading", this.OpenFlightLoading)
end

--
function FlightMainModel.OpenFlightLoading()
    ct.OpenCtrl("FlightLoadingCtrl")
end
--
function FlightMainModel.CloseFlightLoading()
    --Event.Brocast("m_CloseFlightLoading")
    UIPanel.CloseAllFixedPanel()
end

--客户端请求---------------------------------------------------------------------------------
--
function FlightMainModel.m_ReqAllFlight()
    local msgId = pbl.enum("gscode.OpCode","getAllFlight")
    CityEngineLua.Bundle:newAndSendMsg(msgId, nil)
end
--
function FlightMainModel.m_ReqBetFlight(id, delay, score, date)
    local msgId = pbl.enum("gscode.OpCode","betFlight")
    local lMsg = { id = id, delay = delay, score = score, date = date}
    local pMsg = assert(pbl.encode("gs.BetFlight", lMsg))
    CityEngineLua.Bundle:newAndSendMsg(msgId, pMsg)
end
--
function FlightMainModel.m_ReqFlightBetHistory()
    local msgId = pbl.enum("gscode.OpCode","getFlightBetHistory")
    CityEngineLua.Bundle:newAndSendMsg(msgId, nil)
end
--data格式为：2019-05-22
function FlightMainModel.m_ReqSearchFlight(arrCode, depCode, date)
    local msgId = pbl.enum("gscode.OpCode","searchFlight")
    local lMsg = { arrCode = arrCode, depCode = depCode, date = date}
    local pMsg = assert(pbl.encode("gs.SearchFlight", lMsg))
    CityEngineLua.Bundle:newAndSendMsg(msgId, pMsg)
end
--服务器回调---------------------------------------------------------------------------------
--
function FlightMainModel.n_OnGetAllFlight(data, msgId)
    FlightMainModel.mSearchFlight = {}  --清掉之前的搜索数据
    if msgId == 0 then
        --local info = {}
        --info.titleInfo = "Error"
        --info.contentInfo = "GAucModel.n_OnGetAllFlight："..data.reason
        --ct.OpenCtrl("BtnDialogPageCtrl", info)
        Event.Brocast("SmallPop", GetLanguage(41010013), ReminderType.Warning)
        return
    end
    FlightMainModel.allFlightDic = {}
    if data.flight ~= nil then
        FlightMainModel._getDicValue(data.flight)
        Event.Brocast("c_getAllFlight", data.flight)
    end
end
--将所有航班信息转存成字典
function FlightMainModel._getDicValue(data)
    FlightMainModel.allFlightDic = {}
    for key, value in pairs(data) do
        FlightMainModel.allFlightDic[value.id] = value
    end
end
--通过id获取对应的航班数据
function FlightMainModel.getFlightBetById(id)
    if FlightMainModel.allFlightDic ~= nil then
        local data = FlightMainModel.allFlightDic[id]
        if data ~= nil then
            local bet = data.myBet
            return bet
        end
    end
    return nil
end
--通过id获取搜索数据
function FlightMainModel.getSearchFlightBetById(id)
    if FlightMainModel.mSearchFlight ~= nil then
        local data = FlightMainModel.mSearchFlight[id]
        if data ~= nil then
            local bet = data.myBet
            return bet
        end
    end
    return nil
end
--获取所有的航班数据
function FlightMainModel.getAllFlightData()
    return FlightMainModel.allFlightDic
end
--
function FlightMainModel.n_OnBetFlight(data, msgId)
    FlightMainModel.CloseFlightLoading()  --结束loading
    if msgId == 0 then
        Event.Brocast("SmallPop", GetLanguage(41010013), ReminderType.Warning)
        return
    end
    --从搜索押注
    if FlightMainModel.mSearchFlight ~= nil and FlightMainModel.mSearchFlight[data.id] ~= nil then
        FlightMainModel.mSearchFlight[data.id].myBet = {delay = data.delay, date = data.date, amount = data.score}
    end
    Event.Brocast("c_betFlightEvent", data)
end
--
function FlightMainModel.n_OnGetBetHistory(data, msgId)
    if msgId == 0 then
        Event.Brocast("SmallPop", GetLanguage(41010013), ReminderType.Warning)
        return
    end
    Event.Brocast("c_getFlightBetHistory", data)
end
--
function FlightMainModel.n_OnGetBetResult(data, msgId)
    FlightMainModel.CloseFlightLoading()  --结束loading
    if msgId == 0 then
        --local info = {}
        --info.titleInfo = "Error"
        --info.contentInfo = "GAucModel.n_OnGetBetResult："..data.reason
        --ct.OpenCtrl("BtnDialogPageCtrl", info)
        Event.Brocast("SmallPop", GetLanguage(41010013), ReminderType.Warning)
        return
    end
    Event.Brocast("c_getBetResult", data)
end
--
function FlightMainModel.n_OnFlightScoreChange(data, msgId)
    if msgId == 0 then
        --local info = {}
        --info.titleInfo = "Error"
        --info.contentInfo = "GAucModel.n_OnFlightScoreChange："..data.reason
        --ct.OpenCtrl("BtnDialogPageCtrl", info)
        Event.Brocast("SmallPop", GetLanguage(41010013), ReminderType.Warning)
        return
    end
    DataManager.SetMyFlightScore(data.num)
    Event.Brocast("c_flightScoreChange", data)
end
--
function FlightMainModel.n_OnGetSearchFlight(data, msgId)
    FlightMainModel.CloseFlightLoading()  --结束loading
    if msgId == 0 then
        --local info = {}
        --info.titleInfo = "Error"
        --info.contentInfo = "GAucModel.n_OnGetSearchFlight："..data.reason
        --ct.OpenCtrl("BtnDialogPageCtrl", info)
        Event.Brocast("SmallPop", GetLanguage(41010013), ReminderType.Warning)
        return
    end
    FlightMainModel.mSearchFlight = {}
    if data.data ~= nil then
        for i, value in ipairs(data.data) do
            FlightMainModel.mSearchFlight[value.FlightNo] = value
        end
    end
    Event.Brocast("c_getSearchFlightResult", data)
end
